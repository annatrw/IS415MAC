---
title: "In-class Exercise 6: Spatial Weights and Applications using sfdep"
date: "13 Feb 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  message: true
  warning: false
editor: visual
---

# Getting Started

# Installing and loading R packages

```{r}
pacman::p_load(sf, tmap, tidyverse, sfdep)
```

# Importing the data

## Geospatial data

```{r}
hunan <- st_read(dsn="data/geospatial",
                     layer="Hunan") %>% st_transform(crs=4480)
```

## Aspatial data

```{r}
pop2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
head( list(pop2012), n=10)
```

# Combining spatial and aspatial data

Both datasets have different columns, hence if we want to retain the geometry column from the geospatial data, left input file should be the one with geometry column; the right input file should be the aspatial data.

::: callout-note
Check if the unique identifier from both datasets are identical when performing any joins as R is case sensitive.
:::

::: callout-note
columns selected are based on the output produced after the join, thereafter selecting columns 1 to 4, 7 and 15 which retains the GDP per capita from aspatial data.
:::

```{r}
hunan_join <- left_join(hunan, pop2012)%>%
  select(1:4, 7, 15)
```

# Choropleth map of Hunan, GDP per capita

```{r}
tmap_mode("plot")
tm_shape(hunan_join) +
  tm_fill('GDPPC',
          style= "quantile",
          palette = "Blues",
          title= "GDP per capita") +
  tm_layout(main.title = "Distribution of GDP per captia by district, Hunan province",
            main.title.position= "center",
            main.title.size = 1.2,
            legend.height=0.45,
            legend.width=0.35,
            frame=TRUE)+
  tm_borders(alpha=0.5)+
  tm_compass(type='8star', size =2) +
  tm_scale_bar()+
  tm_grid(alpha=0.2)
```

# Contiguity neighbours method

Read the `st-contiguity()` method documentation \<ahref="https://sfdep.josiahparry.com/reference/st_contiguity.html"\> here</a>.

::: callout-note
This method is equivalent to the spdep package function poly2nb() used in Hands-On 6.
:::

## Queen method

::: callout-note
.before = 1 places the newly created field in the first column of hunan_join dataframe.
:::

```{r}
cn_queen <- hunan_join %>% mutate(nb= st_contiguity(geometry), .before=1)
```

-   the generated output cn_queen 's nb column shows the nearest neighbours that are referenced by the index
-   ie: the first data point Anxiang county has the following nearest neighbours: c(2,3,57,85) which refers to Hanshou, Jinshi, Li, Nan and Taoyuan.

## Rook method

```{r}
cn_rook <- hunan_join %>% mutate(nb= st_contiguity(geometry), queen=FALSE, .before=1)
```

# Contiguity weight matrix

## Queen method

```{r}
wm_q <- hunan_join %>% 
  mutate(nb= st_contiguity(geometry), 
         wt = st_weights(nb),
         .before=1)
```

-   this code chunk allow the running of nearest neighbour using queen method and calculation of the weights
-   generated output will include both the nearest neighbours and weights in the same dataframe

## Rook method

```{r}
wm_r <- hunan_join %>% 
  mutate(nb= st_contiguity(geometry),
         queen= FALSE,
         wt = st_weights(nb),
         .before=1)
```

```{r}

```

```{r}

```

```{r}

```

```{r}

```
