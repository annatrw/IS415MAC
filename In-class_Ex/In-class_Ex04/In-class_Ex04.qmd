---
title: "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods"
date: "30 Jan 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  message: true
  warning: false
editor: visual
---

# Getting Started

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or
-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

are the childcare centres in Singapore randomly distributed throughout the country? if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# Installing and Loading R packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

# Spatial Data Wrangling

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Standardising projection systems

```{r}
sg_sf <- st_transform(sg_sf, crs=3414)
```

```{r}
mpsz_sf <- st_transform(mpsz_sf, crs=3414)
```

Mapping geospatial data

```{r}
tmap_mode('plot')+
qtm(mpsz_sf)+
tm_shape(childcare_sf)+
  tm_dots() 
```

```{r}
tmap_mode('view')+
tm_shape(childcare_sf)+
  tm_dots(alph=0.5,
          size= 0.01) +
  tm_view(set.zoom.limits = c(11,24))
```

-   Plotted using tmap package and default comes with 3 map layers
-   tm_shape() input can be in sf format
-   tm_bubbles() can also be used, typically used to plot proportion symbol map
-   setting zoom limits (zoom out value-small, zoom in value-large)
-   Keep the 'view' mode of tmap to min (max 5 times) since it will be connecting to the open street map API

```{r}
tmap_mode('view')+
tm_shape(childcare_sf)+
  tm_bubbles(alph=0.5,
          size= 0.01) +
  tm_view(set.zoom.limits = c(11,24))
```

```{r}
tmap_mode('plot')
```

# Geospatial Data Wrangling

## Convert sf data to sp Spatial class

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

## Convert Spatial class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

## Convert generic sp format to spatstat's ppp format

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

## Duplicate points

Check for presence of duplicate points

```{r}
any(duplicated(childcare_ppp))
```

Count the number of co-incidence points

```{r}
multiplicity(childcare_ppp)
```

Compute the number of locations with more than 1 point event

```{r}
sum(multiplicity(childcare_ppp) >1)
```

Managing duplicates by jittering approach

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

## Creating owin object

In spatstat, owin objects are used to represent polygonal region (Singapore boundary). This helps explicitly define the required specific study area to prevent randomised points from falling out of the study area.

```{r}
sg_owin <- as(sg_sp, "owin")
```

```{r}
plot(sg_owin)
```

## Combining point features and owin objects

Extract the childcare points located within Singapore

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

Extracting target planning areas

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

Convert Spatial Polygon Dataframe layers into generic spatial polygon layers

```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

Convert spatial polygon objects into owin objects required by spatstat

```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Change the unit of measurement from metre to kilometre

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

Plot showing the 4 study areas and childcare centres.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

# Second-order Spatial Point Patterns Analysis

## Analysing Spatial Point Process using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.

### Choa Chu Kang planning area

G function estimation

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

Complete Spatial Randomness test

H0 (null hypothesis) = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

Reject the null hypothesis if the p-value is smaller than the alpha value of 0.001.

Monte Carlo test with G function

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

### Tampines planning area

G function estimation

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

Complete Spatial Randomness test

H0 (null hypothesis) = The distribution of childcare services at Tampines are randomly distributed

H1 = The distribution of childcare services at Tampines are not randomly distributed

Reject the null hypothesis if the p-value is smaller than the alpha value of 0.001.

Monte Carlo test with G function

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction="all",nsim=999)
```

```{r}
plot(G_tm.csr)
```

## Analysing Spatial Point Process using f-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.

### Choa Chu Kang planning area

F function estimation

```{r}
F_CK =Fest(childcare_ck_ppp)
plot(F_CK)
```

Complete Spatial Randomness test

H0 (null hypothesis) = The distribution of childcare services at Choa Chu Kang are randomly distributed

H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed

Reject the null hypothesis if the p-value is smaller than the alpha value of 0.001.

Monte Carlo test with F function

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

### Tampines planning area

F function estimation

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

Complete Spatial Randomness test

H0 (null hypothesis) = The distribution of childcare services at Tampines are randomly distributed

H1 = The distribution of childcare services at Tampines are not randomly distributed

Reject the null hypothesis if the p-value is smaller than the alpha value of 0.001.

Monte Carlo test with F function

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

## Analysing Spatial Point using K function

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.

### Choa Chu Kang planning area

k function estimation

```{r}

```

```{r}

```

```{r}

```

### Tampines planning area

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```
