[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/data/geospatial/ELDERCARE.html",
    "href": "Hands-on_Ex/Hands-on_Ex11/data/geospatial/ELDERCARE.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/data/geospatial/hexagons.html",
    "href": "Hands-on_Ex/Hands-on_Ex11/data/geospatial/hexagons.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html",
    "title": "Hands-on Exercise 11: Modelling Geographical Accessibility",
    "section": "",
    "text": "New package:  SpatialAcc \n\npacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#update-crs-information",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#update-crs-information",
    "title": "Hands-on Exercise 11: Modelling Geographical Accessibility",
    "section": "3.1 Update CRS Information",
    "text": "3.1 Update CRS Information\n\nmpsz <- st_transform(mpsz, 3414)\nhezagons <- st_transform(hexagons, 3414)\neldercare <- st_transform(eldercare, 3414)\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#visualising-model-output",
    "href": "Hands-on_Ex/Hands-on_Ex11/Hands-on_Ex11.html#visualising-model-output",
    "title": "Hands-on Exercise 11: Modelling Geographical Accessibility",
    "section": "5.1 Visualising Model Output",
    "text": "5.1 Visualising Model Output"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07_GLSA/Hands-on-Ex07_GLSA.html",
    "href": "Hands-on_Ex/Hands-on_Ex07_GLSA/Hands-on-Ex07_GLSA.html",
    "title": "Hands-on Exercise 7: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "2 Importing data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Aim: are the childcare centres in Singapore randomly distributed throughout the country? if no, then where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-sf-data-to-sps-spatial-class",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Converting sf data to sp’s Spatial class",
    "text": "4.1 Converting sf data to sp’s Spatial class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-spatial-class-into-generic-sp-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-spatial-class-into-generic-sp-object",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Converting Spatial class into generic sp object",
    "text": "4.2 Converting Spatial class into generic sp object\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nDifference between Spatial classes and generic sp objects: - the generic sp objects (spatial polygons) will only store the spatial component of the data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-generic-spatial-sp-format-to-spatstat-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#converting-generic-spatial-sp-format-to-spatstat-ppp-format",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.3 Converting generic spatial sp format to spatstat ppp format",
    "text": "4.3 Converting generic spatial sp format to spatstat ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#handling-duplicated-points",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.4 Handling duplicated points",
    "text": "4.4 Handling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nGetting the location of duplicated point events\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\nWays to handle duplicate points:\n\nDeleting duplicates; which would risk data loss.\nJittering; which adds small variations to duplicates so they do not occupy the exact same space.\nMaking each point ‘unique’; and attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\n\nImplementation of approach 2, jittering\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-owin-object",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.5 Creating owin object",
    "text": "4.5 Creating owin object\nIn spatstat, owin objects are used to represent polygonal region (Singapore boundary). This helps explicitly define the required specific study area to prevent randomised points from falling out of the study area.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-features-and-owin-objects",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-point-features-and-owin-objects",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.6 Combining point features and owin objects",
    "text": "4.6 Combining point features and owin objects\nExtract the childcare points located within Singapore\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernal-density-estimation-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernal-density-estimation-kde",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Kernal density estimation (KDE)",
    "text": "5.1 Kernal density estimation (KDE)\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n5.1.1 Rescaling KDE values\nConverting meter to kilometer\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\nblue: there are 0 to 5 childcare centers per 1km square\nyellow: 20 to 25 childcare centers per 1m square\n\nNotice that the legend is changed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#automatic-badwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#automatic-badwidth-methods",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Automatic badwidth methods",
    "text": "5.2 Automatic badwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nComparing outputs of bw.diggle() and bw.ppl() methods\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-methods",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Kernel methods",
    "text": "5.3 Kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-fixed-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-fixed-bandwidth",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Computing KDE by Fixed bandwidth",
    "text": "6.1 Computing KDE by Fixed bandwidth\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\nsigma value is 0.6 as unit for childcareSG_ppp.km object is in kilometer (0.6km = 600m).\n\n\nfor example- primary school buffer of 1km"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#computing-kde-by-adaptive-bandwidth",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Computing KDE by Adaptive bandwidth",
    "text": "6.2 Computing KDE by Adaptive bandwidth\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\nthe kernel size is shorter, KDE will appear more pixelised\n\nConverting KDE outputs to grid object to be suitable for mapping - Grid output allows conversion to raster format\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\nConverting gridded output to raster format\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nAssigning projection systems to raster layer\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nVisualising raster output on tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#comparing-spatial-point-patterns-using-kde",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Comparing spatial point patterns using KDE",
    "text": "6.3 Comparing spatial point patterns using KDE\nComparing KDE of childcare centres in Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.\nExtracting target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConvert Spatial Polygon Dataframe layers into generic spatial polygon layers\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nConvert spatial polygon objects into owin objects required by spatstat\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\nCombine childcare centre location points and study area: here the childcare points are extracted for analysis\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nChange the unit of measurement from metre to kilometre\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot showing the 4 study areas and childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\nComputing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\nComputing fixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Testing spatial point patterns using Clark and Evans Test",
    "text": "7.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion: Since the p-value is less than the alpha value of 0.05, there is sufficient evidence to reject the null hypothesis that childcare services are randomly distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-choa-chu-kang",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-choa-chu-kang",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.2 Clark and Evans test on Choa Chu Kang",
    "text": "7.2 Clark and Evans test on Choa Chu Kang\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.9865, p-value = 0.306\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-tampines",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#clark-and-evans-test-on-tampines",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.3 Clark and Evans test on Tampines",
    "text": "7.3 Clark and Evans test on Tampines\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.78586, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "Installing and loading tidyverse and sf packages\n\npacman::p_load(tidyverse, sf, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-geospatial-data-in-shapefile-format",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.1 Importing geospatial data in shapefile format",
    "text": "2.1 Importing geospatial data in shapefile format\nUtilising sf package to read the Masterplan subzone boundary (2014) data in shapefile format.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Hands-on_Ex/Hands-on_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nChecking the simple feature object mpsz:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-aspatial-data-in-csv-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-aspatial-data-in-csv-format",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "2.2 Importing aspatial data in csv format",
    "text": "2.2 Importing aspatial data in csv format\nImports the population census data in csv into R.\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-wrangling",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.1 Data wrangling",
    "text": "3.1 Data wrangling\n\npopdata2020 <- popdata %>%\nfilter(Time == 2020) %>%\ngroup_by(PA, SZ, AG) %>% summarise(`POP` = sum(`Pop`)) %>% ungroup()%>% pivot_wider(names_from=AG, values_from=POP) %>%\nmutate(YOUNG = rowSums(.[3:6]) +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#joining-aspatial-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#joining-aspatial-and-geospatial-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "3.2 Joining aspatial and geospatial data",
    "text": "3.2 Joining aspatial and geospatial data\nBefore performing a relational join on both datasets, the fields PZ and SZ in popdata2020 need to be capitalised since SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 <- popdata2020 %>%  mutate_at(\n.vars = vars(PA, SZ), \n.funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\n3.2.1 Perform left_join() on geospatial data\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-qtm",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.1 Plotting a choropleth map using qtm()",
    "text": "4.1 Plotting a choropleth map using qtm()\nThis function allows quick and easy plotting of choropleth maps, giving a quick overview of the data.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nNote:\n\ntmap_mode(“plot”) gives a static map. For interactive viewing, the parameter “view” should be used.\nThe fill argument is used to map the attribute (ie: DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map-using-tmap",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.2 Plotting a choropleth map using tmap()",
    "text": "4.2 Plotting a choropleth map using tmap()\nTo plot a highly customisable cartographic choropleth map, tmap()’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-sections, individual tmap functions used in the above code chunk will be introduced and explained.\n\n4.2.1 Plotting a base map\ntm_shape() is used to define input data, tm_polygons() is used to plot planning subzone ploygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n4.2.2 Using tm_polygons()\nPlotting geographical distributions of a selected variable by planning subzone, use the parameter of choice (ie: DEPENDENCY).\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nNote:\n\nInterval binning and colour scheme are customisable\nMissing values are default shaded grey\n\n\n\n4.2.3 Using tm_fill() and tm_border()\n\ntm_fill() fills the polygons with the chosen colour scheme\ntm_border() adds borders of the shapefile onto the choropleth map\ntm_polygons() wraps tm_fill() and tm_border()\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd=0.1, alpha=1)\n\n\n\n\nNote:\n\nalpha argument = transparency value ranging between 0 (transparent) and 1 (opaque)\nlwd = border line width; default value is 1\nlty = border line type; default value is “solid”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-classification-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-classification-of-tmap",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.3 Data classification of tmap",
    "text": "4.3 Data classification of tmap\ntmap provides 10 data classification methods: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, jenks.\nTo define a data classification method, use the style argument of tm_fill() or tm_polygons().\nUsing kmeans data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing equal data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing fisher data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing hclust data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing jenks data classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n4.3.1 Changing the number of classes\nusing n= 2,6,10,20.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nObservation from changing increasing the number of classes: the more classes there are, the harder it is to differentiate the values, hence choosing an appropriate number of classes is crucial to an effective visualisation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-choropleth-maps-with-custom-breaks",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-choropleth-maps-with-custom-breaks",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.4 Plotting choropleth maps with custom breaks",
    "text": "4.4 Plotting choropleth maps with custom breaks\nBreakpoints can be manually set to create a custom data classification. It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nDisplay descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nPlotting a map with custom breaks including a min and max value:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.5 Colour scheme",
    "text": "4.5 Colour scheme\nPre-defined colour ramps are pulled from the RColorBrewer package.\nUsing the tm_fill() argument, define the selected colour palette.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReverse shading can be done by adding “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-RdPu\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nRefer  here  for more colour palette options."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.6 Map layouts",
    "text": "4.6 Map layouts\nMap titles, scale bar, north arrow, margins and aspect ratios create more cohesive maps.\n\n4.6.1 Map legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.2 Map style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\nOther available  map styles  include: “white”, “gray”, “natural”, “cobalt”, “col_blind”, “albatross”, “beaver”, “bw”, “watercolor”, “red”, “black”\n\n\n4.6.3 Cartographic furniture\ntm_compass(), tm_scale_bar(), tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style:\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-multiple-choropleth-maps",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.7 Plotting multiple choropleth maps",
    "text": "4.7 Plotting multiple choropleth maps\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n4.7.1 Assigning multiple values to at least one of the asthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Oranges\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n4.7.2 Defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Purples\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNote:\n\n thres.poly = a number that specifies the threshold at which polygons are taken into account; corresponds to the proportion of area sizes of polygons to total polygon size; default is 0\n free.coords = defines each map to have its own coordinate ranges; default is “TRUE”\n\n\n\n4.7.3 Creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"YlGn\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"YlGn\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-selection-criterion",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "4.8 Mapping spatial object meeting selection criterion",
    "text": "4.8 Mapping spatial object meeting selection criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"YlGn\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-geospatial-data",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.1 Import Geospatial Data",
    "text": "4.1 Import Geospatial Data\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Hands-on_Ex/Hands-on_Ex08/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#update-crs",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#update-crs",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.2 Update CRS",
    "text": "4.2 Update CRS\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\nVerify transformed layer\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nReveal extent of mpsz_svy21 layer\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-aspatial-data",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5.1 Import Aspatial Data",
    "text": "5.1 Import Aspatial Data\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\nto identify the missing values, ensure that there are no NA values\nget a sense of the spread of data (are the values mainly 0 or similar to each other?)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#convert-aspatial-datafram-into-sf-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#convert-aspatial-datafram-into-sf-object",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5.2 Convert Aspatial Datafram into sf Object",
    "text": "5.2 Convert Aspatial Datafram into sf Object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages. st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     <dbl>         <dbl>    <dbl> <dbl>    <dbl>          <dbl>            <dbl>\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA <dbl>, PROX_HAWKER_MARKET <dbl>,\n#   PROX_KINDERGARTEN <dbl>, PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#eda-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#eda-statistical-graphics",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.1 EDA Statistical Graphics",
    "text": "6.1 EDA Statistical Graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nLess skewness is observed after normalisation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-histogram-plot-distribution-of-variables",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-histogram-plot-distribution-of-variables",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.2 Multiple Histogram plot distribution of variables",
    "text": "6.2 Multiple Histogram plot distribution of variables\nDraw a small multiple histograms (also known as trellis plot) by using ggarrange() of  ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\nThis step is to understand the data and variables have a distribution, not having 1 bar which might indicate it is a categorical variable and cannot be used"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#statistical-point-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#statistical-point-map",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.3 Statistical Point Map",
    "text": "6.3 Statistical Point Map\nReveal the geospatial distribution of condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nCreate interactive point symbol map\n\ntmap_options(check.and.fix = TRUE)\n\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\n\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#simple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#simple-linear-regression-method",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.1 Simple Linear Regression Method",
    "text": "7.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n  *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nA few statistical outliers with relatively high selling prices."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-linear-regression-method",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.2 Multiple Linear Regression Method",
    "text": "7.2 Multiple Linear Regression Method\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\nAvoid variables with 0.8 and above (can be positive or negative values), indicating high correlation and dependence\n\nMatrix reorder is very important for mining the hidden structure and patterns in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#hedonic-pricing-model-using-multiple-linear-regression",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#hedonic-pricing-model-using-multiple-linear-regression",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.3 Hedonic Pricing Model using Multiple Linear Regression",
    "text": "7.3 Hedonic Pricing Model using Multiple Linear Regression\nUse lm() to calibrate multiple linear regression model.\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\n\nThis code outputs an lm object which is a list with coefficients of variables"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#prep-publication-quality-table-olsrr-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#prep-publication-quality-table-olsrr-method",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.4 Prep Publication Quality Table: olsrr method",
    "text": "7.4 Prep Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#prep-publication-quality-table-gtsummary-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#prep-publication-quality-table-gtsummary-method",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.5 Prep Publication Quality Table: gtsummary method",
    "text": "7.5 Prep Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nUsing gtsummary package, model statistics are included in the report by using * add_glace_table() that appends them to the report table * add_glance_source_note() that adds statistics as a table source note as shown below\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n7.5.1 Check for Multicolinearity\nolsrr provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the  ols_vif_tol()  of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nOutput interpretation: Since the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n7.5.1.1 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nOuput interpretation: The figure above reveals that most of the data point are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n7.5.1.2 Test for Normality Assumption\nUsing  ols_plot_resid_hist()  to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nOutput interpretation: The figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nOutput interpretation: The summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n7.5.1.3 Test for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visualise the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output <- as.data.frame(condo.mlr$residuals)\n\nNext, join the newly created data frame with condo_resale.sf object\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nOutput interpretation: The figure above reveal that there is sign of spatial autocorrelation.\nUsing Moran I test to confirm signs of spatial autocorrelation\nCompute distance-based weight matrix\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nConvert the output neighbours list to spatial weights\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nPerform Moran I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nOutput interpretation: The Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#fixed-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#fixed-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.1 Fixed Bandwidth GWR Model",
    "text": "8.1 Fixed Bandwidth GWR Model\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.37828e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.341 CV score: 4.721292e+14 \nFixed bandwidth: 971.3407 CV score: 4.721292e+14 \nFixed bandwidth: 971.3409 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \n\n\nThe recommended bandwidth is 971.3405 meters.\n\n8.1.1 GWR Model method for fixed bandwidth\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved to a list of class “gwrm”\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-04-25 19:57:58.696498 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3408 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4645e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9008e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5206e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793007\n   AREA_SQM                 21575\n   AGE                     434200\n   PROX_CBD               2704591\n   PROX_CHILDCARE         1654088\n   PROX_ELDERLYCARE      38867786\n   PROX_URA_GROWTH_AREA  78515685\n   PROX_MRT               3124310\n   PROX_PARK             18122416\n   PROX_PRIMARY_SCH       4637495\n   PROX_SHOPPING_MALL     1529951\n   PROX_BUS_STOP         11342166\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073633\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3803 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6197 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534071e+14 \n   R-square value:  0.8909911 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-04-25 19:58:00.233178 \n\n\nOutput interpretation: The report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.2 Adaptive Bandwidth GWR Model",
    "text": "8.2 Adaptive Bandwidth GWR Model\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n30 meters is the recommended bandwidth to be used.\n\n8.2.1 GWR Model for adaptive bandwidth\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-04-25 19:58:10.372943 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-04-25 19:58:12.325855 \n\n\nOutput interpretation:The report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-gwr-output",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-gwr-output",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.3 Visualising GWR Output",
    "text": "8.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n*Condition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\n*Local R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\n*Predicted: these are the estimated (or fitted) y values 3. computed by GWR.\n*Residuals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\n*Coefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n8.3.1 Converting SDF into sf Dataframe\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\n\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n8.3.2 Visualising Local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n8.3.3 Visualising Coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nBy URA Planning region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "",
    "text": "pacman:: p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-shapefile-of-hunan",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-shapefile-of-hunan",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "2.1 Import shapefile of Hunan",
    "text": "2.1 Import shapefile of Hunan\n\nhunan <- st_read(dsn=\"data/geospatial\",\n                     layer=\"Hunan\") \n\nReading layer `Hunan' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Hands-on_Ex/Hands-on_Ex06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-csv-of-hunan-population",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#import-csv-of-hunan-population",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "2.2 Import csv of Hunan population",
    "text": "2.2 Import csv of Hunan population\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#relational-join",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#relational-join",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "2.3 Relational join",
    "text": "2.3 Relational join\n\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#queen-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#queen-contiguity-based-neighbours",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "4.1 QUEEN contiguity based neighbours",
    "text": "4.1 QUEEN contiguity based neighbours\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#rook-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#rook-contiguity-based-neighbours",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "4.2 ROOK contiguity based neighbours",
    "text": "4.2 ROOK contiguity based neighbours\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-contiguity-weights",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-contiguity-weights",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "4.3 Visualising contiguity weights",
    "text": "4.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most commonly used method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs (getting Latitude and Longitude of Polygon Centroids).\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work.\nTo do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nDo the same for latitude, but access the second value per centroid [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-queen-contiguity-based-neighbours-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-queen-contiguity-based-neighbours-map",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "4.4 Plotting QUEEN contiguity based neighbours map",
    "text": "4.4 Plotting QUEEN contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-rook-contiguity-based-neighbours-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-rook-contiguity-based-neighbours-map",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "4.5 Plotting ROOK contiguity based neighbours map",
    "text": "4.5 Plotting ROOK contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-both-queen-and-rook",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-both-queen-and-rook",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "4.6 Plotting both QUEEN and ROOK",
    "text": "4.6 Plotting both QUEEN and ROOK\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#cut-off-distance",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#cut-off-distance",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "5.1 Cut-off distance",
    "text": "5.1 Cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-fixed-distance-weight-matric",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-fixed-distance-weight-matric",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "5.2 Computing fixed distance weight matric",
    "text": "5.2 Computing fixed distance weight matric\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way of displaying structure of weight matrix:\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-fixed-distance-weight-matrix",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "5.3 Computing fixed distance weight matrix",
    "text": "5.3 Computing fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "5.4 Computing Adaptive distance weight matrix",
    "text": "5.4 Computing Adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nView contents of matrix:\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nEach county only has exactly 6 neighbours!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#distance-based-neighbours-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#distance-based-neighbours-1",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "5.5 Distance based neighbours",
    "text": "5.5 Distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#row-standardised-weights-matrix",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "6.1 Row standardised weights matrix",
    "text": "6.1 Row standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-lag-with-row-standardised-weights",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-lag-with-row-standardised-weights",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "7.1 Spatial lag with row-standardised weights",
    "text": "7.1 Spatial lag with row-standardised weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRetrieved the GDPPC for these 5 countries in the previous section\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppend spatially lag GDPPC values into huanan sf dataframe\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot GDPPC and spatial lag GDPPC for comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "7.2 Spatial lag as a sum of neighbouring values",
    "text": "7.2 Spatial lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nUse lag.listw to compute lag variable from weight and GDPPC\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppend lag_sum GDPPC field into hunan sf data frame\n\nhunan <- left_join(hunan, lag.res)\n\nPlot GDPPC and spatial lag sum GDPPC for comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-window-average",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-window-average",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "7.3 Spatial window average",
    "text": "7.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs <- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n[1] has six neighbours instead of five\nGet the weights with nb2listw()\n\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nConvert the lag variable listw object into a dataframe\n\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\n\n\n\n\n\nNote\n\n\n\nThird command line renames field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\n\nAppend lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used\n\nhunan %>%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nqtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-window-sum",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-window-sum",
    "title": "Hands-on Exercise 6: Spatial Weights and Applications",
    "section": "7.4 Spatial window sum",
    "text": "7.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs <- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nAssign binary weights to the neighbour structure that includes the diagonal element\n\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nCompute lag variable with lag.listw()\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nConvert the lag variable listw object into a data.frame by using as.data.frame()\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\n\n\n\n\n\nNote\n\n\n\nSecond command line renames field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\n\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nCompare values of lag GDPPC and spatial window average\n\nhunan %>%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot lag_sum GDPPC and w_sum_gdppc for comparison\n\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data-in-shapefile-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.1 Importing geospatial data in shapefile format",
    "text": "2.1 Importing geospatial data in shapefile format\nUtilising sf package to read the Masterplan subzone boundary (2014) data in shapefile format.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting polyline feature data in shapefile format\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-gis-data-in-kml-format",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.2 Importing GIS data in kml format",
    "text": "2.2 Importing GIS data in kml format\nThis section uses sf package to read Pre-Schools location data in kml format.\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Hands-on_Ex/Hands-on_Ex01/data/geospatial/preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-contents-of-simple-feature-dataframes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-contents-of-simple-feature-dataframes",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.3 Checking contents of Simple Feature Dataframes",
    "text": "2.3 Checking contents of Simple Feature Dataframes\nTo retrieve and view basic feature information of the Masterplan subzone boundary (2014) layer, the following code chunk is used.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nTo further view associated attribute information in the dataframe, glimpse() from dplyr package and head() from Base R can be used below.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2.4 Plotting the geospatial data",
    "text": "2.4 Plotting the geospatial data\n\nplot(mpsz)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDefault plot of an sf object is multi-plot of all attributes\n\n\nTo plot only the geometry to view the subzone boundary:\n\nplot(st_geometry(mpsz))\n\n\n\n\nTo plot specific attributes for quick viewing:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#buffering",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5.1 Buffering",
    "text": "5.1 Buffering\nContext: A governmental organisation wants to retrofit and upgrade an existing cycling path that requires 5 meters of reserved land on either side of the current cycling path. How can we find out the total land area needed to be acquired?\nSolution:\n\nUsing a buffer of 5 meters around the cycling paths\n\n\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\n\n\nCalculate the area of the buffers\n\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nTherefore, the total area needed would be the sum of areas of buffers\n\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5.2 Point-in-polygon count",
    "text": "5.2 Point-in-polygon count\nContext: How can we find out the number of pre-schools in each planning subzone?\nSolution: 1. Identify the count of pre-schools in each subzone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nCheck summary statistics of newly derived ‘PreSch Count’ field\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nListing the planning subzone with the highest number of pre-schools\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nTampines East subzone has the most number of pre-schools.\n\nComputing the density of pre-schools by planning subzone\n\nFirst, derive the area of each planning subzone:\n\nmpsz3414$Area <- mpsz3414 %>% st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#histogram",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6.1 Histogram",
    "text": "6.1 Histogram\nShows distribution of PreSch Density using conventional package from R Graphics.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nAppropriate histogram visualisation using ggplot2.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, color=\"black\",  fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6.2 Scatterplot",
    "text": "6.2 Scatterplot\nShows the relationship between PreSch Density and PreSch Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`,  x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "This is the Home page"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "2 About This Site\n\n\n\n\n\nAs part of IS415 Geospatial Analytics and Applications AY2022-23 Semester 2, this website was created to document and showcase the various geospatial analytics methods learned under the guidance of Prof Kam Tin Seong."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "4.1 Aspatial data",
    "text": "4.1 Aspatial data\nData from WPdx Global Data Repositories will be used. The WPdx+ dataset will be used in this assignment."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "4.2 Geospatial data",
    "text": "4.2 Geospatial data\nThe state boundary data of Nigeria is obtained from  Humanitarian Data Exchange portal. Download the Nigeria - Subnational Administrative Boundaries zip file titled nga_adm_osgof_20190417.zip"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-nga-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-nga-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.1 Importing NGA data",
    "text": "6.1 Importing NGA data\nWe will be using Administrative Boundary 2 of Nigeria - showing the local government areas within each state.\nUsing st_read() from sf’s package, import both layers of data and assign the CRS code 26391.\n\nNGA_adm2 <- st_read(\"data/geospatial/\", layer = \"nga_admbnda_adm2\") %>% st_transform(crs = 26391)\n\nReading layer `nga_admbnda_adm2' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Take-home_Ex/Take-home_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#retaining-essential-columns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#retaining-essential-columns",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.2 Retaining essential columns",
    "text": "6.2 Retaining essential columns\nRemoval of unnecessary columns is done, keeping only the name and PCODE of administrative boundaries 1 and 2.\n\nNGA_adm2 <- NGA_adm2 %>%\n  dplyr::select(c(3:4, 8:9))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#managing-duplicates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#managing-duplicates",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.3 Managing duplicates",
    "text": "6.3 Managing duplicates\nCheck if there are duplicated values in the dataset. We see a total of 6 duplicates.\n\nNGA_adm2$ADM2_EN[duplicated(NGA_adm2$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nManually assign missing values to the duplicated LGA names.\n\nNGA_adm2$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA_adm2$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA_adm2$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA_adm2$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA_adm2$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA_adm2$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA_adm2$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA_adm2$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA_adm2$ADM2_EN[546] <- \"Obi, Benue\"\nNGA_adm2$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA_adm2$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA_adm2$ADM2_EN[694] <- \"Surulere, Oyo\"\n\nCheck once more if all duplicates are removed:\n\nNGA_adm2$ADM2_EN[duplicated(NGA_adm2$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nDuplicates have been successfully managed!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-osun-study-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-osun-study-area",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "6.4 Extracting Osun study area",
    "text": "6.4 Extracting Osun study area\nFilter and extract the LGAs in Osun state using the column ADM1_EN, saving into a variable osunT.\n\nosunT <- NGA_adm2 %>% filter(`ADM1_EN` == \"Osun\")\nosunT\n\nSimple feature collection with 30 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 178398.7 ymin: 329463.4 xmax: 292278.9 ymax: 452734.9\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1        Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((215920.8 33...\n2        Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((214352.3 40...\n3  Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((267717.8 37...\n4  Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((250576.1 40...\n5      Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((267547.9 42...\n6          Boripe   NG030006    Osun      NG030 MULTIPOLYGON (((256469.1 43...\n7       Ede North   NG030007    Osun      NG030 MULTIPOLYGON (((238094.5 40...\n8       Ede South   NG030008    Osun      NG030 MULTIPOLYGON (((238094.5 40...\n9        Egbedore   NG030009    Osun      NG030 MULTIPOLYGON (((222300.9 42...\n10         Ejigbo   NG030010    Osun      NG030 MULTIPOLYGON (((216011.1 42..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-water-point-data",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.1 Importing water point data",
    "text": "7.1 Importing water point data\nRead the csv of water point locations found in Nigeria, filtering by the column name #clean_country_name.\n\nwp_nga <- read_csv(\"data/aspatial/WPdx-P.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-aspatial-data-into-sf-dataframe",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-aspatial-data-into-sf-dataframe",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.2 Converting aspatial data into sf dataframe",
    "text": "7.2 Converting aspatial data into sf dataframe\nThis step ensures that the water point dataset is given a geometry column named New Georeferenced Column.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 97,478 × 75\n   row_id `#source`            `#lat_deg` `#lon_deg` `#report_date` `#status_id`\n    <dbl> <chr>                     <dbl>      <dbl> <chr>          <chr>       \n 1 158721 Federal Ministry of…       5.07       6.62 02/19/2015 12… Yes         \n 2 158892 Federal Ministry of…       5.09       7.09 02/06/2015 12… Yes         \n 3 323117 Federal Ministry of…       5.91       8.77 08/31/2015 12… Yes         \n 4 300176 Federal Ministry of…       5.23       7.32 05/17/2015 12… Yes         \n 5 324346 Federal Ministry of…       6.88       3.36 08/17/2015 12… Yes         \n 6 297273 Federal Ministry of…       6.59       3.29 05/26/2015 12… Yes         \n 7 296853 Federal Ministry of…       6.60       3.26 06/02/2015 12… Yes         \n 8 323866 Federal Ministry of…       6.20       6.73 09/18/2015 12… Yes         \n 9 297044 Federal Ministry of…       6.61       3.30 05/26/2015 12… Yes         \n10 324321 Federal Ministry of…       6.96       3.60 08/16/2015 12… Yes         \n# ℹ 97,468 more rows\n# ℹ 69 more variables: `#water_source_clean` <chr>,\n#   `#water_source_category` <chr>, `#water_tech_clean` <chr>,\n#   `#water_tech_category` <chr>, `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>, …\n\n\nWe need to include a referencing system for the create sf object wp_nga.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 97478 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 97,478 × 75\n   row_id `#source`            `#lat_deg` `#lon_deg` `#report_date` `#status_id`\n *  <dbl> <chr>                     <dbl>      <dbl> <chr>          <chr>       \n 1 158721 Federal Ministry of…       5.07       6.62 02/19/2015 12… Yes         \n 2 158892 Federal Ministry of…       5.09       7.09 02/06/2015 12… Yes         \n 3 323117 Federal Ministry of…       5.91       8.77 08/31/2015 12… Yes         \n 4 300176 Federal Ministry of…       5.23       7.32 05/17/2015 12… Yes         \n 5 324346 Federal Ministry of…       6.88       3.36 08/17/2015 12… Yes         \n 6 297273 Federal Ministry of…       6.59       3.29 05/26/2015 12… Yes         \n 7 296853 Federal Ministry of…       6.60       3.26 06/02/2015 12… Yes         \n 8 323866 Federal Ministry of…       6.20       6.73 09/18/2015 12… Yes         \n 9 297044 Federal Ministry of…       6.61       3.30 05/26/2015 12… Yes         \n10 324321 Federal Ministry of…       6.96       3.60 08/16/2015 12… Yes         \n# ℹ 97,468 more rows\n# ℹ 69 more variables: `#water_source_clean` <chr>,\n#   `#water_source_category` <chr>, `#water_tech_clean` <chr>,\n#   `#water_tech_category` <chr>, `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>, …\n\n\nWe then transform the sf object using the appropriate CRS for Osun state.\n\nwp_sf <- wp_sf %>% st_transform(crs=26391)\n\nFilter the water points found in Osun state using the #clean_adm1 column.\n\nwp_osun <- wp_sf %>% filter(`#clean_adm1` == \"Osun\")\nwp_osun\n\nSimple feature collection with 5745 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 179198.9 ymin: 338261.8 xmax: 292542.7 ymax: 449013.7\nProjected CRS: Minna / Nigeria West Belt\n# A tibble: 5,745 × 75\n   row_id `#source`            `#lat_deg` `#lon_deg` `#report_date` `#status_id`\n *  <dbl> <chr>                     <dbl>      <dbl> <chr>          <chr>       \n 1 225950 Federal Ministry of…       7.43       4.26 05/05/2015 12… Yes         \n 2 225524 Federal Ministry of…       7.78       4.56 04/22/2015 12… Yes         \n 3 197014 Federal Ministry of…       7.49       4.53 04/30/2015 12… Yes         \n 4 225173 Federal Ministry of…       7.93       4.73 05/02/2015 12… Yes         \n 5 225843 Federal Ministry of…       7.74       4.44 05/08/2015 12… Yes         \n 6 235508 Federal Ministry of…       7.15       4.64 04/27/2015 12… Yes         \n 7 197708 Federal Ministry of…       7.87       4.72 05/13/2015 12… Yes         \n 8 195041 Federal Ministry of…       7.73       4.45 06/17/2015 12… Yes         \n 9 225222 Federal Ministry of…       7.81       4.15 05/14/2015 12… Yes         \n10 460770 GRID3                      7.4        4.33 06/13/2018 12… Unknown     \n# ℹ 5,735 more rows\n# ℹ 69 more variables: `#water_source_clean` <chr>,\n#   `#water_source_category` <chr>, `#water_tech_clean` <chr>,\n#   `#water_tech_category` <chr>, `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>, …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-functional-water-points-in-osun",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-functional-water-points-in-osun",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.3 Extracting functional water points in Osun",
    "text": "7.3 Extracting functional water points in Osun\n\nosun_functional <- wp_osun %>%\n  filter(`#status_clean` %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional, needs repair\",\n             \"Functional, not in use\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-non-functional-water-points-in-osun",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-non-functional-water-points-in-osun",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "7.4 Extracting non-functional water points in Osun",
    "text": "7.4 Extracting non-functional water points in Osun\n\nosun_nonfunctional <- wp_osun %>%\n  filter(`#status_clean` %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Non-Functional\",\n             \"Non-Functional, dry\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#point-in-polygon-count",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#point-in-polygon-count",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "8.1 Point-in-polygon count",
    "text": "8.1 Point-in-polygon count\nWe use the mutate() function from dplyr to add 3 new columns that count the total, functional and non-functional water points in each LGA.\n\nosunT_wp <- osunT %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(osunT, wp_osun))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(osunT, osun_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(osunT, osun_nonfunctional)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "8.2 Choropleth map",
    "text": "8.2 Choropleth map\nTo get a general inital sensing of the absolute number of water points and where they are located, we can plot a choropleth map to visualise water points by LGA.\n\n8.2.1 Functional water points\n\np1 <- tm_shape(osunT_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_text(\"ADM2_EN\", size=0.3) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs in Osun\",\n            legend.outside = FALSE)\n\n\n\n8.2.2 Non-functional water points\n\np2 <- tm_shape(osunT_wp) +\n  tm_fill(\"wp_nonfunctional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_text(\"ADM2_EN\", size=0.3) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of nonfunctional water point by LGAs in Osun\",\n            legend.outside = FALSE)\n\n\n\n8.2.3 Comparison\nA side-by-side comparison of choropleth maps to make it easier for viewing.\n\ntmap_arrange(p1, p2, nrow = 1)\n\n\n\n\nFrom the above choropleth maps, we observe that the highest number of functional waterpoints are found in Ejigbo LGA with 256.8 to 283 water points and that of non-functional water points are found in Aiyedade LGA with 146.6 to 161 water points. Functional water points are primarily found in the Eastern regions of Osun while non-functional water points found in the South Eastern regions with the exception of Northen LGAs Ejigbo and Odo-Otin."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tmap-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tmap-visualisation",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "8.3 tmap visualisation",
    "text": "8.3 tmap visualisation\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_functional)+\n  tm_dots(size = 0.01,\n          col = \"blue\",\n          border.col=\"black\",\n          border.lwd=0.5) \n\n\n\n\n\ntmap_mode(\"plot\")\n\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_nonfunctional) +\n  tm_dots(size = 0.01,\n          col = \"red\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n8.3.1 Removal of excess water point data\nWe see that a number of water point data points fall outside of the Osun state boundary. Remove them with the below code, referencing this link.\n\n8.3.1.1 Functional water points\n\nout <- osun_functional[lengths(st_intersects(osun_functional, osunT))==0,]\n\nThere are a total of 114 functional water points beyond the Osun state boundary.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(out) +\n  tm_dots(size = 0.01,\n          col = \"darkblue\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\nDrop the functional water points that are outside Osun state boundary using the subset() function.\n\nosun_functional <- subset(osun_functional, lengths(st_intersects(osun_functional, osunT))!=0,)\n\nView the functional water points within Osun, we see that now the 114 water points beyond Osun state boundary are removed.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_functional) +\n  tm_dots(size = 0.01,\n          col = \"blue\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\n\n\n8.3.1.2 Non-functional water points\n\nout_non <- osun_nonfunctional[lengths(st_intersects(osun_nonfunctional, osunT))==0,]\n\nThere are a total of 131 non-functional water points beyond the Osun state boundary.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(out_non) +\n  tm_dots(size = 0.01,\n          col = \"orange\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\nDrop the non-functional water points that are outside Osun state boundary.\n\nosun_nonfunctional <- subset(osun_nonfunctional, lengths(st_intersects(osun_nonfunctional, osunT))!=0,)\n\nView the non-functional water points within Osun, we see that now the 131 water points beyond Osun state boundary are removed.\n\ntmap_mode(\"plot\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(osun_nonfunctional) +\n  tm_dots(size = 0.01,\n          col = \"red\",\n          border.col=\"black\",\n          border.lwd=0.5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.1 Data preparation",
    "text": "9.1 Data preparation\n\n9.1.1 sp Spatial* class\nUsing the as_Spatial() function from sf package, we convert the spatial data from simple feature data frame to sp’s Spatial* class.\n\nfunctional_spatial <- as_Spatial(osun_functional)\n\nnonfunctional_spatial <- as_Spatial(osun_nonfunctional)\n\nosun_spatial <-as_Spatial(osunT)\n\nWe see that the converted Spatial* objects are of class SpatialPointsDataFrame or SpatialPolygonsDataFrame.\n\nfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2623 \nextent      : 184202.3, 291989.5, 341443.2, 449013.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 74\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id,    X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  : 171841, Federal Ministry of Water Resources, Nigeria, 7.0890301, 4.0771867, 01/01/2010 12:00:00 AM,     Unknown,                Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,         Osun,     Aiyedade,           NA, ... \nmax values  : 683844,                                        GRID3, 8.0618983, 5.0550034, 08/29/2018 12:00:00 AM,         Yes, Undefined Hand Dug Well,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,         Osun,       Osogbo,           NA, ... \n\n\n\nnonfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2129 \nextent      : 184218.5, 291855.5, 338261.8, 448933.5  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 74\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id,    X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  : 183489, Federal Ministry of Water Resources, Nigeria,  7.060309, 4.0773333, 04/22/2015 12:00:00 AM,          No,                Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,         Osun,     Aiyedade,           NA, ... \nmax values  : 475147,                                        GRID3, 8.0611733, 5.0537867, 08/29/2018 12:00:00 AM,     Unknown, Undefined Hand Dug Well,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,         Osun,       Osogbo,           NA, ... \n\n\n\nosun_spatial\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 178398.7, 292278.9, 329463.4, 452734.9  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\n\n\n9.1.2 Generic sp object\nSince spatstat requires data to be in ppp object form, and only Spatial objects can be converted into ppp form, we convert the data into Spatial objects first.\n\nfunctional_sp <- as(functional_spatial, \"SpatialPoints\")\nnonfunctional_sp <- as(nonfunctional_spatial, \"SpatialPoints\")\nosun_sp <- as(osun_spatial, \"SpatialPolygons\")\n\n\n\n9.1.3 spatstat’s ppp object\nWe use spatstat to convert the spatial objects into ppp format.\n\nfunctional_ppp <- as(functional_sp, \"ppp\")\nnonfunctional_ppp <- as(nonfunctional_sp, \"ppp\")\n\n\n\n9.1.4 Check for duplicates\nEnsure that there are no duplicates in the data before visualising it.\n\nany(duplicated(functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(nonfunctional_ppp))\n\n[1] FALSE\n\n\nThere are no duplicates in the data.\n\n\n9.1.5 Creating owin objects\nOwin objects are used to define and confine a polygonal study area - in this analysis, we will be confining the study area to Osun state.\n\nosun_owin <- as(osun_sp, \"owin\")\nplot(osun_owin)\n\n\n\n\nWe extract the relevant functional and non-functional water points within Osun state.\n\nfunctionalOsun_ppp= functional_ppp[osun_owin]\nnonfunctionalOsun_ppp= nonfunctional_ppp[osun_owin]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-the-output-of-ppp-objects",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-the-output-of-ppp-objects",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.2 Visualising the output of ppp objects",
    "text": "9.2 Visualising the output of ppp objects\n\nFunctional water pointsNon-functional water points\n\n\n\nplot(functionalOsun_ppp)\n\n\n\n\n\n\n\nplot(nonfunctionalOsun_ppp)\n\n\n\n\n\n\n\nHere, we see that both the functional and non-functional water points are clustered towards the northern and central parts of Osun in seemingly similar locations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-plots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-plots",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.3 KDE plots",
    "text": "9.3 KDE plots\nWe can better visualise the data using KDE plots with the automatic bandwidth method which employs the density() function of spatstat.\nThere are 4 different kernel bandwidth estimation functions available in spatstat: bw.diggle(), bw.ppl(), bw.scott(), bw.CvL(); with the first two are recommended. bw.diggle() is appropriate for visualising one tight cluster amid random noise, while bw.ppl() is more appropriate for visualising data with predominantly tight clusters (read more here).\nBased on the ppp object outputs, we can see apparent clustering but also quite a number of data points dispersed throughout Osun, hence we will use bw.diggle() here.\n\nFunctional water pointsNon-functional water pointsComparison\n\n\n\nkde_functional_bw <- density(functionalOsun_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")  \n\n\nplot(kde_functional_bw)\n\n\n\n\nUse the rescale()  function to convert the KDE output scale to kilometers for easier interpretation of the values.\n\nfunctionalOsun_ppp.km <- rescale(functionalOsun_ppp, 1000, \"km\")\n\n\nkde_functional_bw <- density(functionalOsun_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_functional_bw)\n\n\n\n\n\n\n\nnonfunctionalOsun_ppp.km <- rescale(nonfunctionalOsun_ppp, 1000, \"km\")\n\n\nkde_nonfunctional_bw <- density(nonfunctionalOsun_ppp.km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nplot(kde_nonfunctional_bw)\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_functional_bw, main=\"functional\")\nplot(kde_nonfunctional_bw , main=\"non-functional\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-raster",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-raster",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.4 Converting KDE output into raster",
    "text": "9.4 Converting KDE output into raster\n\nFunctional water pointsNon-functional water points\n\n\n\ngridded_kde_functional <- as.SpatialGridDataFrame.im(kde_functional_bw)\nspplot(gridded_kde_functional)\n\n\n\n\nSaving the gridded output as a raster layer and assigning the CRS\n\nkde_functional_raster <- raster(gridded_kde_functional)\nkde_functional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -5.069271e-15, 26.78087  (min, max)\n\n\n\nprojection(kde_functional_raster) <- CRS(\"+init=EPSG:26391\")\nkde_functional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 \nsource     : memory\nnames      : v \nvalues     : -5.069271e-15, 26.78087  (min, max)\n\n\n\n\n\ngridded_kde_nonfunctional <- as.SpatialGridDataFrame.im(kde_nonfunctional_bw)\nspplot(gridded_kde_nonfunctional)\n\n\n\n\nSaving the gridded output as a raster layer and assigning the CRS\n\nkde_nonfunctional_raster <- raster(gridded_kde_nonfunctional)\nkde_nonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.727292e-15, 22.89375  (min, max)\n\n\n\nprojection(kde_nonfunctional_raster) <- CRS(\"+init=EPSG:26391\")\nkde_nonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 \nsource     : memory\nnames      : v \nvalues     : -3.727292e-15, 22.89375  (min, max)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-output-on-tmap",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-output-on-tmap",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "9.5 Visualising output on tmap",
    "text": "9.5 Visualising output on tmap\n\nFunctional water pointsNon-functional water points\n\n\n\ntm_shape(kde_functional_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\ntm_shape(kde_nonfunctional_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\nFrom the above KDE analysis, we can observe a high concentration of functional water points in the northwestern regions of Osun, with several water points being clustered towards the northwestern coast. For non-functional water points, there is a high concentration in central Osun and seemingly sparse dispersion observed nearer the northeastern regions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-study-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extracting-study-areas",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "10.1 Extracting study areas",
    "text": "10.1 Extracting study areas\nExtract and save the selected LGAs (in Spatial* data format) using the below code:\n\no = osun_spatial[osun_spatial@data$ADM2_EN == \"Osogbo\",]\nn = osun_spatial[osun_spatial@data$ADM2_EN == \"Ife North\",]\ns = osun_spatial[osun_spatial@data$ADM2_EN == \"Ife South\",]\ne = osun_spatial[osun_spatial@data$ADM2_EN == \"Ede North\",]\n\nBelow are the selected study areas:\n\npar(mfrow=c(2,2))\nplot(o, main = \"Osogbo\")\nplot(n, main = \"Ife north\")\nplot(s, main = \"Ife south\")\nplot(e, main = \"Ede North\")\n\n\n\n\n\n10.1.1 Data preparation\nConverting the LGAs in sf format to spatial polygons\n\no_sp = as(o, \"SpatialPolygons\")\nn_sp = as(n, \"SpatialPolygons\")\ns_sp = as(s, \"SpatialPolygons\")\ne_sp = as(e, \"SpatialPolygons\")\n\nCreating owin objects\n\no_owin = as(o_sp, \"owin\")\nn_owin = as(n_sp, \"owin\")\ns_owin = as(s_sp, \"owin\")\ne_owin = as(e_sp, \"owin\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-6",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-6",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "10.2 Functional water points",
    "text": "10.2 Functional water points\n\n10.2.1 Extracting the relevant data for each LGA\n\no_ppp = functional_ppp[o_owin]\nn_ppp = functional_ppp[n_owin]\ns_ppp = functional_ppp[s_owin]\ne_ppp = functional_ppp[e_owin]\n\n\n\n10.2.2 Rescaling the data to kilometers\n\no_ppp.km = rescale(o_ppp, 1000, \"km\")\nn_ppp.km = rescale(n_ppp, 1000, \"km\")\ns_ppp.km = rescale(s_ppp, 1000, \"km\")\ne_ppp.km = rescale(e_ppp, 1000, \"km\")\n\n\n\n10.2.3 Visualising the LGA ppp objects\n\npar(mfrow=c(2,2))\nplot(o_ppp.km, main=\"Osogbo\")\nplot(n_ppp.km, main=\"Ife north\")\nplot(s_ppp.km, main=\"Ife south\")\nplot(e_ppp.km, main=\"Ede north\")\n\n\n\n\n\n\n10.2.4 Comparing LGA KDE outputs\n\npar(mfrow=c(2,2))\nplot(density(o_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osogbo\")\nplot(density(n_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife north\")\nplot(density(s_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife south\")\nplot(density(e_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ede north\")\n\n\n\n\nWe can observe that there are a high concentration of functional water points in the North of Osogbo with a range of up to 30. In Ede North, tight clusters are observed with a range of up to 200. In both Ife South and Ife North, a smaller range of KDE plots is observed with only up to a range of 20."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-6",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-6",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "10.3 Non-functional water points",
    "text": "10.3 Non-functional water points\n\n10.3.1 Extracting the relevant data for each LGA\n\no_non_ppp = nonfunctional_ppp[o_owin]\nn_non_ppp = nonfunctional_ppp[n_owin]\ns_non_ppp = nonfunctional_ppp[s_owin]\ne_non_ppp = nonfunctional_ppp[e_owin]\n\n\n\n10.3.2 Rescaling the data to kilometers\n\no_non_ppp.km = rescale(o_non_ppp, 1000, \"km\")\nn_non_ppp.km = rescale(n_non_ppp, 1000, \"km\")\ns_non_ppp.km = rescale(s_non_ppp, 1000, \"km\")\ne_non_ppp.km = rescale(e_non_ppp, 1000, \"km\")\n\n\n\n10.3.3 Visualising the LGA ppp objects\n\npar(mfrow=c(2,2))\nplot(o_non_ppp.km, main=\"Osogbo\")\nplot(n_non_ppp.km, main=\"Ife North\")\nplot(s_non_ppp.km, main=\"Ife South\")\nplot(e_non_ppp.km, main=\"Ede North\")\n\n\n\n\n\n\n10.3.4 Comparing LGA KDE outputs\n\npar(mfrow=c(2,2))\nplot(density(o_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osogbo\")\nplot(density(n_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife north\")\nplot(density(s_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ife south\")\nplot(density(e_non_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Ede north\")\n\n\n\n\nFor non-functional water points, we can observe that there are higher concentrations of non-functional water points in Osogbo and Ede North - with a range of 30 and 15 respectively - compared to Ife North and Ife South - with a range of 12 and 6 respectively. Overall, we see that there is a lower concentration of non-functional compared to functional water points in all 4 LGAs."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-7",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-water-points-7",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "11.1 Functional water points",
    "text": "11.1 Functional water points\n\nH0: The distribution of functional water points in selected LGAs are randomly distributed.\nH1: The distribution of functional water points in selected LGAs are not randomly distributed.\nConfidence level: 95%\nSignificance level: 0.05\n\nThe null hypothesis is rejected if the p value is less than 0.05 at 95% confidence level. If the p value is greater than 0.05, there is insufficient evidence to reject the null hypothesis.\n\nOsogboIfe SouthIfe NorthEde North\n\n\n\n11.1.0.1 L function\n\nL_o_functional = Lest(o_ppp, correction = \"Ripley\")\nplot(L_o_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.2 Complete Spatial Randomness test\n\nL_o_functional.csr <- envelope(o_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_o_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Osogbo\nHence, we reject the null hypothesis that functional water points in Osogbo are randomly distributed.\n\n\n\n\n\n11.1.0.3 L function\n\nL_s_functional = Lest(s_ppp, correction = \"Ripley\")\nplot(L_s_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.4 Complete Spatial Randomness\n\nL_s_functional.csr <- envelope(s_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_s_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Ife South\nHence, we reject the null hypothesis that functional water points in Ife South are randomly distributed.\n\n\n\n\n\n11.1.0.5 L function\n\nL_n_functional = Lest(n_ppp, correction = \"Ripley\")\nplot(L_n_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.6 Complete Spatial Randomness\n\nL_n_functional.csr <- envelope(n_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_n_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Ife North\nHence, we reject the null hypothesis that functional water points in Ife North are randomly distributed.\n\n\n\n\n\n11.1.0.7 L function\n\nL_e_functional = Lest(e_ppp, correction = \"Ripley\")\nplot(L_e_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.1.0.8 Complete Spatial Randomness\n\nL_e_functional.csr <- envelope(e_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_e_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in functional water points in Ede North.\nHence, we reject the null hypothesis that functional water points in Ede North are randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-7",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#non-functional-water-points-7",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "11.2 Non-functional water points",
    "text": "11.2 Non-functional water points\n\nH0: The distribution of non-functional water points in selected LGAs are randomly distributed.\nH1: The distribution of non-functional water points in selected LGAs are not randomly distributed.\nConfidence level: 95%\nSignificance level: 0.05\n\n\nOsogboIfe SouthIfe NorthEde North\n\n\n\n11.2.0.1 L function\n\nL_o_nonfunctional = Lest(o_non_ppp, correction = \"Ripley\")\nplot(L_o_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.2 Complete Spatial Randomness test\n\nL_o_nonfunctional.csr <- envelope(o_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_o_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nFor d greater than 125m (estimated), the L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Osogbo. Hence, we reject the null hypothesis that nonfunctional water points in Osogbo are randomly distributed.\nFor 0m to 31.25m (estimated), the L function lies with in the lower envelope at 95% confidence level and below 0, hence we can conclude spatial dispersion is statistically not significant and we reject the null hypothesis.\nFor 31.25m to 62.5m (estimated), the L function lies within the upper envelope and is greater than 0, hence we have insufficient evidence to reject the null hypothesis. Therefore, functional water points at this distance are randomly distributed.\n\n\n\n\n\n11.2.0.3 L function\n\nL_s_nonfunctional = Lest(s_non_ppp, correction = \"Ripley\")\nplot(L_s_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.4 Complete Spatial Randomness\n\nL_s_nonfunctional.csr <- envelope(s_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_s_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Ife South.\nHence, we reject the null hypothesis that non-functional water points in Ife South are randomly distributed.\n\n\n\n\n\n11.2.0.5 L function\n\nL_n_nonfunctional = Lest(n_non_ppp, correction = \"Ripley\")\nplot(L_n_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.6 Complete Spatial Randomness\n\nL_n_nonfunctional.csr <- envelope(n_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_n_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Ife North.\nHence, we reject the null hypothesis that non-functional water points in Ife North are randomly distributed.\n\n\n\n\n\n11.2.0.7 L function\n\nL_e_nonfunctional = Lest(e_non_ppp, correction = \"Ripley\")\nplot(L_e_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n11.2.0.8 Complete Spatial Randomness\n\nL_e_nonfunctional.csr <- envelope(e_non_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(L_e_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nThe L function is more than 0 and well above the envelope, we can conclude that there are statistically significant signs of clustering pattern in non-functional water points in Ede North.\nHence, we reject the null hypothesis that non-functional water points in Ede North are randomly distributed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-nearest-neighbour-list",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-nearest-neighbour-list",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.1 Preparing nearest neighbour list",
    "text": "12.1 Preparing nearest neighbour list\nrbind the filtered functional and non-functional data points within Osun boundary.\n\nosun_final_wp <- rbind(osun_functional, osun_nonfunctional)\n\nThe st_knn() is used to obtain the k nearest neighbour for water point data.\n\nnb <- include_self(st_knn(st_geometry(osun_final_wp), 5))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-kernel-weights",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-kernel-weights",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.2 Computing kernel weights",
    "text": "12.2 Computing kernel weights\n\nwt <- st_kernel_weights(nb, osun_final_wp , \"gaussian\", adaptive=TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-vector-list",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-vector-list",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.3 Preparing vector list",
    "text": "12.3 Preparing vector list\nUsing the functional water point data, replace the values in column #status_clean with “Functional” to standardise column values.\n\nosun_functional$`#status_clean`[osun_functional$`#status_clean` != \"Functional\"] <- \"Functional\"\n\nSave the column into a variable called x\n\nx <- osun_functional$`#status_clean`\n\nDo the same for non-functional water point data:\n\nosun_nonfunctional$`#status_clean`[osun_nonfunctional$`#status_clean` != \"Non-Functional\"] <- \"Non-Functional\"\n\n\ny <- osun_nonfunctional$`#status_clean`"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#obtaining-lclq",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#obtaining-lclq",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.4 Obtaining LCLQ",
    "text": "12.4 Obtaining LCLQ\n\nH0: Spatial distribution of functional and non-functional water points are independent of each other.\nH1: Spatial distribution of functional and non-functional water points are not independent of each other.\nConfidence level: 95%\n\n\nLCLQ_osun <- local_colocation(x, y, nb ,wt ,39)\n\n\nLCLQ_wp <- cbind(osun_final_wp, LCLQ_osun)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-lclq",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualising-lclq",
    "title": "Take Home Exercise 1: Spatial Point Pattern Analysis on distribution of water points in Osun State, Nigeria",
    "section": "12.5 Visualising LCLQ",
    "text": "12.5 Visualising LCLQ\n\ntmap_mode(\"view\")\ntm_shape(osunT) +\n  tm_polygons() +\ntm_shape(LCLQ_wp) +\n  tm_dots(col = \"p_sim_Non.Functional\",\n          size = 0.01,\n          border.col=\"black\",\n          border.lwd=0.5  )\n\n\n\n\n\ntm_view(set.zoom.limits = c(5,20))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1]  5 20\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\n\ntmap_mode(\"plot\")\n\nFrom the above map, we can conclude that for water points with simulated p values less than 0.05, reject the null hypothesis that functional and non-functional water points are independent of each other. While for those with values greater than 0.05, there is insufficient evidence to reject the null hypothesis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Housing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, Geographical Weighted Models were introduced for calibrating predictive model for housing resale prices."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-hdb-resale-prices-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-hdb-resale-prices-data",
    "title": "Take Home Exercise 3",
    "section": "5.1 Import HDB Resale Prices Data",
    "text": "5.1 Import HDB Resale Prices Data\nUsing read_csv(), import the HDB resale price data.\n\nresale_all <- read_csv(\"data/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\nThis is how the resale data looks like.\n\nglimpse(resale_all)\n\n\nFilter out 2021 and 2022 data as per assignment requirement using grepl().\n\nresale2122 <- filter(resale_all, grepl('2021', month)|grepl('2022', month))\n\nFilter out 2023 data for testing.\n\nresale23_test <- filter(resale_all, grepl('2023', month))\n\nFor the purposes of this assignment, we will be focusing on 5 Room HDB resale flat prices.\n\nunique(resale2122$flat_type)\n\n\n\nresale2122_5r <- filter(resale2122, flat_type == '5 ROOM')\n\n\nresale23_test <- filter(resale23_test, flat_type == '5 ROOM')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#geocode-resale-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#geocode-resale-data",
    "title": "Take Home Exercise 3",
    "section": "5.2 Geocode Resale Data",
    "text": "5.2 Geocode Resale Data\nReferencing senior’s work, this geocoding function using OneMap API will retrieve the latitude and longitude for resale data.\n\nlibrary(httr)\ngeocode_function <- function(block, street_name) {\n  base_url <- \"https://developers.onemap.sg/commonapi/search\"\n  address <- paste(block, street_name, sep = \" \")\n  query <- list(\"searchVal\" = address, \n                \"returnGeom\" = \"Y\",\n                \"getAddrDetails\" = \"N\",\n                \"pageNum\" = \"1\")\n  \n  res <- GET(base_url, query = query)\n  restext<-content(res, as=\"text\")\n  \n  output <- fromJSON(restext)  %>% \n    as.data.frame %>%\n    select(results.LATITUDE, results.LONGITUDE)\n\n  return(output)\n}\n\n\nTraining DataTesting Data\n\n\n\nresale2122_5r$street_name <- gsub(\"ST\\\\.\", \"SAINT\", resale2122_5r$street_name)\n\nExecute the geocoding function\n\nresale2122_5r$LATITUDE <- 0\nresale2122_5r$LONGITUDE <- 0\n\nfor (i in 1:nrow(resale2122_5r)){\n  temp_output <- geocode_function(resale2122_5r[i, 4], resale2122_5r[i, 5])\n  \n  resale2122_5r$LATITUDE[i] <- temp_output$results.LATITUDE\n  resale2122_5r$LONGITUDE[i] <- temp_output$results.LONGITUDE\n}\n\nWe check if there are null values in the coordinate columns, in which there are none.\n\nsum(is.na(resale2122_5r$LATITUDE))\n\n\nsum(is.na(resale2122_5r$LONGITUDE))\n\n\n\n\nresale23_test$street_name <- gsub(\"ST\\\\.\", \"SAINT\", resale23_test$street_name)\n\nExecute the geocoding function\n\nresale23_test$LATITUDE <- 0\nresale23_test$LONGITUDE <- 0\n\nfor (i in 1:nrow(resale23_test)){\n  temp_output <- geocode_function(resale23_test[i, 4], resale23_test[i, 5])\n  \n  resale23_test$LATITUDE[i] <- temp_output$results.LATITUDE\n  resale23_test$LONGITUDE[i] <- temp_output$results.LONGITUDE\n}\n\n\nsum(is.na(resale23_test$LATITUDE))\n\n\nsum(is.na(resale23_test$LONGITUDE))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remaining-lease",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remaining-lease",
    "title": "Take Home Exercise 3",
    "section": "5.3 Remaining Lease",
    "text": "5.3 Remaining Lease\nReferencing senior’s work, the remaining lease in years is retrieved by converting years and months into years.\n\nTraining DataTesting Data\n\n\n\nstr_list <- str_split(resale2122_5r$remaining_lease, \" \")\n\nfor (i in 1:length(str_list)) {\n  if (length(unlist(str_list[i])) > 2) {\n      year <- as.numeric(unlist(str_list[i])[1])\n      month <- as.numeric(unlist(str_list[i])[3])\n      resale2122_5r$remaining_lease[i] <- year + round(month/12, 2)\n  }\n  else {\n    year <- as.numeric(unlist(str_list[i])[1])\n    resale2122_5r$remaining_lease[i] <- year\n  }\n}\n\n\n\n\nstr_list <- str_split(resale23_test$remaining_lease, \" \")\n\nfor (i in 1:length(str_list)) {\n  if (length(unlist(str_list[i])) > 2) {\n      year <- as.numeric(unlist(str_list[i])[1])\n      month <- as.numeric(unlist(str_list[i])[3])\n      resale23_test$remaining_lease[i] <- year + round(month/12, 2)\n  }\n  else {\n    year <- as.numeric(unlist(str_list[i])[1])\n    resale23_test$remaining_lease[i] <- year\n  }\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#floor-level",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#floor-level",
    "title": "Take Home Exercise 3",
    "section": "5.4 Floor Level",
    "text": "5.4 Floor Level\nReferencing senior’s work, the floor level is retrieved by first sorting the storeys in ascending order, then assigning a numerical value to each category.\n\nTraining DataTesting Data\n\n\n\nstoreys <- sort(unique(resale2122_5r$storey_range))\n\n\nstorey_order <- 1:length(storeys)\nstorey_range_order <- data.frame(storeys, storey_order)\n\n\nresale2122_5r <- left_join(resale2122_5r, storey_range_order, by= c(\"storey_range\" = \"storeys\"))\n\n\n\n\nstoreys <- sort(unique(resale23_test$storey_range))\n\n\nstorey_order <- 1:length(storeys)\nstorey_range_order <- data.frame(storeys, storey_order)\n\n\nresale23_test <- left_join(resale23_test, storey_range_order, by= c(\"storey_range\" = \"storeys\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#age-of-unit",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#age-of-unit",
    "title": "Take Home Exercise 3",
    "section": "5.5 Age of Unit",
    "text": "5.5 Age of Unit\n\nTraining DataTesting Data\n\n\nConvert the date field to a date data type, which assumes the first day of the month since date is in yyyy/mm format; referencing sources online.\n\ndate <- as.Date(as.yearmon(resale2122_5r$month))\nresale2122_5r$start <- as.numeric(format(date,'%Y'))\n\nAge of unit calculation will only consider the year when the flat was sold.\n\nresale2122_5r$UNIT_AGE <- resale2122_5r$start - resale2122_5r$lease_commence_date\n\n\n\n\ndate <- as.Date(as.yearmon(resale23_test$month))\nresale23_test$start <- as.numeric(format(date,'%Y'))\nresale23_test$UNIT_AGE <- resale23_test$start - resale23_test$lease_commence_date"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#convert-resale-data-to-sf-object",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#convert-resale-data-to-sf-object",
    "title": "Take Home Exercise 3",
    "section": "5.6 Convert Resale Data To sf Object",
    "text": "5.6 Convert Resale Data To sf Object\nConvert the dataframe into an sf object with geometry field attached, referencing here.\n\nTraining DataTesting Data\n\n\n\nresale2122_5r_sf <- st_as_sf(resale2122_5r, \n                      coords = c(\"LONGITUDE\", \n                                 \"LATITUDE\"), \n                      # the geographical features are in longitude & latitude, in decimals\n                      # as such, WGS84 is the most appropriate coordinates system\n                      crs=4326) %>%\n  #afterwards, we transform it to SVY21, our desired CRS\n  st_transform(crs = 3414)\n\n\n\n\nresale23_test_sf <- st_as_sf(resale23_test, \n                      coords = c(\"LONGITUDE\", \n                                 \"LATITUDE\"), \n                      # the geographical features are in longitude & latitude, in decimals\n                      # as such, WGS84 is the most appropriate coordinates system\n                      crs=4326) %>%\n  #afterwards, we transform it to SVY21, our desired CRS\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#factors-with-geographic-coordinates",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#factors-with-geographic-coordinates",
    "title": "Take Home Exercise 3",
    "section": "6.1 Factors With Geographic Coordinates",
    "text": "6.1 Factors With Geographic Coordinates\n\n6.1.1 Self-sourced and referenced\n\n6.1.1.1 Kindergartens\nUsing OneMap API retrieval methods, my personal token was pre-loaded into the token variable and used to call the OneMap API to retrieve location of kindergartens in Singapore as an sf object.\n\n\n\n\nsearch_themes(token, \"kindergarten\")\nget_theme_status(token, \"kindergartens\")\nthemetibble <- get_theme(token, \"kindergartens\")\nkindergarten_sf <- st_as_sf(themetibble, coords=c(\"Lng\", \"Lat\"), crs=4326)\n\n\n\n6.1.1.2 Shopping Malls\nWith reference to a previously done project to scrape the locations of shopping malls in Singapore, read in the csv and convert it to an sf object with appropriate projection system.\n\nmall_csv <- read_csv(\"data/geospatial/mall_coordinates_updated.csv\")\n\n\nglimpse(mall_csv)\n\n\nmalls_sf <- st_as_sf(mall_csv,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\n\n\n6.1.2 Geojson Sources\nImport the geojson files.\n\nelder_sf <- st_read(dsn = \"data/geospatial/ElderCare\", layer=\"ELDERCARE\")\nmrt_sf <- st_read(dsn = \"data/geospatial/TrainStationExit\", layer=\"Train_Station_Exit_Layer\")\nbus_sf <- st_read(dsn = \"data/geospatial/BusStop_Feb2023\", layer=\"BusStop\")\n\nhawker_sf <- st_read(\"data/geospatial/hawker-centres-geojson.geojson\") \nparks_sf <- st_read(\"data/geospatial/parks.kml\") \nsupermkt_sf <- st_read(\"data/geospatial/supermarkets-geojson.geojson\") \nchildcare_sf <- st_read(\"data/geospatial/child-care-services-geojson.geojson\") \n\nmpsz_sf <- st_read(dsn=\"data/geospatial/MPSZ2019\", layer = \"MPSZ-2019\") \n\n\n6.1.2.1 CRS\nCheck the CRS projection for the layers.\n\nst_crs(elder_sf)\nst_crs(mrt_sf)\nst_crs(bus_sf)\nst_crs(hawker_sf)\nst_crs(parks_sf)\nst_crs(supermkt_sf)\nst_crs(childcare_sf)\nst_crs(mpsz_sf)\nst_crs(kindergarten_sf)\nst_crs(malls_sf)\n\nThey are projected wrongly - using EPSG 9001 - when it should be projected to EPSG 4326 instead.\nSet correct CRS except for malls_sf which is already EPSG 3414 done in previous section when transforming to sf object.\n\nmpsz_sf <- st_set_crs(mpsz_sf, 3414)\nelder_sf <- st_set_crs(elder_sf, 3414)\nmrt_sf <- st_set_crs(mrt_sf, 3414)\nbus_sf <- st_set_crs(bus_sf, 3414)\n\nhawker_sf <- hawker_sf %>%\n  st_transform(crs = 3414)\nparks_sf <- parks_sf %>%\n  st_transform(crs = 3414)\nsupermkt_sf <- supermkt_sf %>%\n  st_transform(crs = 3414)\nchildcare_sf <- childcare_sf %>%\n  st_transform(crs = 3414)\nkindergarten_sf <- kindergarten_sf %>%\n  st_transform(crs = 3414)\n\nVerify that there are no invalid geometries:\n\nlength(which(st_is_valid(mpsz_sf) == FALSE))\nlength(which(st_is_valid(elder_sf) == FALSE))\nlength(which(st_is_valid(mrt_sf) == FALSE))\nlength(which(st_is_valid(bus_sf) == FALSE))\nlength(which(st_is_valid(hawker_sf) == FALSE))\nlength(which(st_is_valid(supermkt_sf) == FALSE))\nlength(which(st_is_valid(parks_sf) == FALSE))\nlength(which(st_is_valid(childcare_sf) == FALSE))\nlength(which(st_is_valid(kindergarten_sf) == FALSE))\nlength(which(st_is_valid(malls_sf) == FALSE))\n\nThere are invalid geometries for mpsz_sf; which can be rectified with st_make_valid().\n\nmpsz_sf <- sf::st_make_valid(mpsz_sf)\nlength(which(st_is_valid(mpsz_sf) == FALSE))\n\n\n\n\n6.1.3 Calculate Proximity\nUsing a proximity function from senior’s work, st_distance is used to compute a distance matrix which will retrieve the minimum distance from origin to destination.\n\nget_prox <- function(origin_df, dest_df, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)           \n  \n  # find the nearest location_factor and create new data frame\n  near <- origin_df %>% \n    mutate(PROX = apply(dist_matrix, 1, function(x) min(x)) / 1000) \n  \n  # rename column name according to input parameter\n  names(near)[names(near) == 'PROX'] <- col_name\n\n  # Return df\n  return(near)\n}\n\n\nTraining DataTesting Data\n\n\n\nresale2122_5r_sf <- get_prox(resale2122_5r_sf, elder_sf, \"PROX_ELDERCARE\") \nresale2122_5r_sf <- get_prox(resale2122_5r_sf, mrt_sf, \"PROX_MRT\")\nresale2122_5r_sf <- get_prox(resale2122_5r_sf, hawker_sf, \"PROX_HAWKER\") \nresale2122_5r_sf <- get_prox(resale2122_5r_sf, parks_sf, \"PROX_PARK\") \nresale2122_5r_sf <- get_prox(resale2122_5r_sf, supermkt_sf, \"PROX_SUPERMARKET\")\nresale2122_5r_sf <- get_prox(resale2122_5r_sf, malls_sf, \"PROX_MALL\")\n\n\n\n\nresale23_test_sf <- get_prox(resale23_test_sf, elder_sf, \"PROX_ELDERCARE\") \nresale23_test_sf <- get_prox(resale23_test_sf, mrt_sf, \"PROX_MRT\")\nresale23_test_sf <- get_prox(resale23_test_sf, hawker_sf, \"PROX_HAWKER\") \nresale23_test_sf <- get_prox(resale23_test_sf, parks_sf, \"PROX_PARK\") \nresale23_test_sf <- get_prox(resale23_test_sf, supermkt_sf, \"PROX_SUPERMARKET\")\nresale23_test_sf <- get_prox(resale23_test_sf, malls_sf, \"PROX_MALL\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#calculate-number-of-amenities",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#calculate-number-of-amenities",
    "title": "Take Home Exercise 3",
    "section": "6.2 Calculate Number of Amenities",
    "text": "6.2 Calculate Number of Amenities\nUsing a function to get the number of amenities within a certain distance from senior’s work, the get within function counts the number of amenities within the threshold distance.\n\nget_within <- function(origin_df, dest_df, threshold_dist, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  wdist <- origin_df %>% \n    mutate(WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist)))\n  \n  # rename column name according to input parameter\n  names(wdist)[names(wdist) == 'WITHIN_DT'] <- col_name\n\n  # Return df\n  return(wdist)\n}\n\n\nTraining DataTesting Data\n\n\n\n6.2.0.1 Number of Kindergartens Within 350m\n\nresale2122_5r_sf <- get_within(resale2122_5r_sf, kindergarten_sf, 350, \"WITHIN_350M_KINDERGARTEN\")\n\n\n\n6.2.0.2 Number of Childcare Centres Within 350m\n\nresale2122_5r_sf <- get_within(resale2122_5r_sf, childcare_sf, 350, \"WITHIN_350M_CHILDCARE\")\n\n\n\n6.2.0.3 Number of Bus Stops Within 350m\n\nresale2122_5r_sf <- get_within(resale2122_5r_sf, bus_sf, 350, \"WITHIN_350M_BUS\")\n\n\n\n\n\n6.2.0.4 Number of Kindergartens Within 350m\n\nresale23_test_sf <- get_within(resale23_test_sf, kindergarten_sf, 350, \"WITHIN_350M_KINDERGARTEN\")\n\n\n\n6.2.0.5 Number of Childcare Centres Within 350m\n\nresale23_test_sf <- get_within(resale23_test_sf, childcare_sf, 350, \"WITHIN_350M_CHILDCARE\")\n\n\n\n6.2.0.6 Number of Bus Stops Within 350m\n\nresale23_test_sf <- get_within(resale23_test_sf, bus_sf, 350, \"WITHIN_350M_BUS\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#factors-without-geographic-coordinates",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#factors-without-geographic-coordinates",
    "title": "Take Home Exercise 3",
    "section": "6.3 Factors Without Geographic Coordinates",
    "text": "6.3 Factors Without Geographic Coordinates\n\n6.3.1 CBD\nGet the coordinates of Singapore’s Central Business District in Downtown Core using latlong.net: 1.287953, 103.851784\n\nname <- c('CBD')\nlatitude= c(1.287953)\nlongitude= c(103.851784)\ncbd <- data.frame(name, latitude, longitude)\n\n\ncbd_sf <- st_as_sf(cbd, coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 3414)\n\n\nst_crs(cbd_sf)\n\nUpon checking, the CBD data is in the correct CRS.\n\n6.3.1.1 Get Proximity To CBD\nThis is done by calling the earlier defined get_prox function.\n\nTraining DataTesting Data\n\n\n\nresale2122_5r_sf <- get_prox(resale2122_5r_sf, cbd_sf, \"PROX_CBD\") \n\n\n\n\nresale23_test_sf <- get_prox(resale23_test_sf, cbd_sf, \"PROX_CBD\") \n\n\n\n\n\n\n\n6.3.2 Primary Schools\nRead the csv of schools and filter out the primary schools for study.\n\npri_sch <- read_csv(\"data/geospatial/general-information-of-schools.csv\")\n\n\npri_sch <- pri_sch %>%\n  filter(mainlevel_code == \"PRIMARY\") %>%\n  select(school_name, address, postal_code, mainlevel_code)\n\n\nglimpse(pri_sch)\n\n\n6.3.2.1 Geocode\nReferencing this link, define a get_coords() function that utilises the OneMap API, feeding the postal codes through it to get latitude and longitude.\n\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://developers.onemap.sg/commonapi/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\nWe extract the unique postal codes and feed them through the get_coords function.\n\nprisch_postal <- sort(unique(pri_sch$postal_code))\n\n\nprisch_coords <- get_coords(prisch_postal)\n\nThis code checks for any null values in the retrieved coordinates data.\n\nprisch_coords[(is.na(prisch_coords$postal) | is.na(prisch_coords$latitude) | is.na(prisch_coords$longitude)), ]\n\n\nglimpse(prisch_coords)\n\nWe can safely combine the retrieved coordinates with the original primary schools csv data.\n\nprisch_coords = prisch_coords[c(\"postal\",\"latitude\", \"longitude\")]\npri_sch <- left_join(pri_sch, prisch_coords, by = c('postal_code' = 'postal'))\n\nLastly, we convert to it to an sf object with the correct projection.\n\nprisch_sf <- st_as_sf(pri_sch,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\n\n6.3.2.2 Number of Primary Schools Within 1km\nRun the primary schools data through the get_within function to get the number of primary schools within 1km.\n\nTraining DataTesting Data\n\n\n\nresale2122_5r_sf <- get_within(resale2122_5r_sf, prisch_sf, 1000, \"WITHIN_1KM_PRISCH\")\n\n\n\n\nresale23_test_sf <- get_within(resale23_test_sf, prisch_sf, 1000, \"WITHIN_1KM_PRISCH\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#good-primary-schools",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#good-primary-schools",
    "title": "Take Home Exercise 3",
    "section": "6.4 Good Primary Schools",
    "text": "6.4 Good Primary Schools\nWith reference to salary.sg, we can extract the top 10 primary schools in 2022. Using the method employed by senior, the following web crawling method is used to search for the html element - which is a list item - on the web page to retrieve the top 10 primary schools.\n\nurl <- \"https://www.salary.sg/2022/best-primary-schools-2022-by-popularity/\"\n\ngood_pri <- data.frame()\n\nschools <- read_html(url) %>%\n  html_nodes(xpath = paste('//*[@id=\"post-33132\"]/div[3]/div/div/ol/li') ) %>%\n  html_text() \n\nfor (i in (schools)){\n  sch_name <- toupper(gsub(\" – .*\",\"\",i))\n  sch_name <- gsub(\"\\\\(PRIMARY SECTION)\",\"\",sch_name)\n  sch_name <- trimws(sch_name)\n  new_row <- data.frame(pri_sch_name=sch_name)\n  # Add the row\n  good_pri <- rbind(good_pri, new_row)\n}\n\ntop_good_pri <- head(good_pri, 10)\n\n\ntop_good_pri\n\n\nCheck which top schools are not in prisch_sf.\n\ntop_good_pri$pri_sch_name[!top_good_pri$pri_sch_name %in% prisch_sf$school_name]\n\nGet the coordinates list of good primary schools and check for null values, upon which we see that St Hilda’s primary school does not exist in the prisch_sf data.\n\ngood_pri_list <- unique(top_good_pri$pri_sch_name)\ngood_pri_list\n\n\ngoodprisch_coords <- get_coords(good_pri_list)\ngoodprisch_coords\n\n\ngoodprisch_coords[(is.na(goodprisch_coords$postal) | is.na(goodprisch_coords$latitude) | is.na(goodprisch_coords$longitude)), ]\n\nTo rectify this, change the apostrophe symbol for the school title “ST HILDA’S PRIMARY SCHOOL”.\n\ntop_good_pri$pri_sch_name[top_good_pri$pri_sch_name == \"ST. HILDA’S PRIMARY SCHOOL\"] <- \"ST. HILDA'S PRIMARY SCHOOL\"\n\nHere, we check once again for null values in the new coordinates list.\n\ngood_pri_list <- unique(top_good_pri$pri_sch_name)\ngood_pri_list\n\n\ngoodprisch_coords <- get_coords(good_pri_list)\ngoodprisch_coords\n\n\ngoodprisch_coords[(is.na(goodprisch_coords$postal) | is.na(goodprisch_coords$latitude) | is.na(goodprisch_coords$longitude)), ]\n\nFinally, convert the layer into an sf object with the correct projection.\n\ngood_pri_sf <- st_as_sf(goodprisch_coords,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nTraining DataTesting Data\n\n\n\nresale2122_5r_sf <- get_prox(resale2122_5r_sf, good_pri_sf, \"PROX_GOOD_PRISCH\")\n\n\n\n\nresale23_test_sf <- get_prox(resale23_test_sf, good_pri_sf, \"PROX_GOOD_PRISCH\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#other-data-processing",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#other-data-processing",
    "title": "Take Home Exercise 3",
    "section": "6.5 Other Data Processing",
    "text": "6.5 Other Data Processing\nFor the last steps of data processing, we retain necessary columns by dropping unnecessary one using subset() as well as convert the remaining lease field from a string data type to numeric.\n\nresale2122_5r_sf <- subset(resale2122_5r_sf, select = -c(month, town, flat_type, storey_range, block, street_name, flat_model, lease_commence_date, start)) %>% select(resale_price, everything())\n\n\nresale2122_5r_sf$remaining_lease <- as.numeric(resale2122_5r_sf$remaining_lease)\n\n\nglimpse(resale2122_5r_sf)\n\n\nresale23_test_sf <- subset(resale23_test_sf, select = -c(month, town, flat_type, storey_range, block, street_name, flat_model, lease_commence_date, start)) %>% select(resale_price, everything())\n\n\nresale23_test_sf$remaining_lease <- as.numeric(resale23_test_sf$remaining_lease)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#write-data-to-rds-file",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#write-data-to-rds-file",
    "title": "Take Home Exercise 3",
    "section": "6.6 Write Data To rds File",
    "text": "6.6 Write Data To rds File\nSave the train and test data that are sf objects into an rds file to reduce the computation and render time, as well as for easy access.\n\ntrain <- write_rds(resale2122_5r_sf, \"data/rds/factors.rds\")\n\n\ntest <- write_rds(resale23_test_sf, \"data/rds/factors_test.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#eda-with-statistical-graphs",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#eda-with-statistical-graphs",
    "title": "Take Home Exercise 3",
    "section": "7.1 EDA with Statistical Graphs",
    "text": "7.1 EDA with Statistical Graphs\n\nsummary(train$resale_price)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 350000  528000  595000  627297  690000 1418000 \n\n\n\nggplot(data=train, aes(x=`resale_price`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nFrom the histogram, We can observe a right skewed distribution of HDB resale prices in 2021 to 2022.\nTo visualise the shape of independent variables, use a multiple histogram plot below.\n\nFLOOR_AREA_SQM <- ggplot(data=train, aes(x= `floor_area_sqm`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nLEASE_YRS <- ggplot(data=train, aes(x= `remaining_lease`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nSTOREY_ORDER <- ggplot(data=train, aes(x= `storey_order`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nUNIT_AGE <- ggplot(data=train, aes(x= `UNIT_AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERCARE <- ggplot(data=train, aes(x= `PROX_ELDERCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=train, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER <- ggplot(data=train, aes(x= `PROX_HAWKER`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=train, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_SPM <- ggplot(data=train, aes(x= `PROX_SUPERMARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MALL <- ggplot(data=train, aes(x= `PROX_MALL`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\nPROX_CBD <- ggplot(data=train, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\nPROX_TOP_SCH <- ggplot(data=train, \n                               aes(x= `PROX_GOOD_PRISCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(FLOOR_AREA_SQM, LEASE_YRS, STOREY_ORDER, UNIT_AGE, PROX_ELDERCARE, PROX_MRT, PROX_HAWKER, PROX_PARK, PROX_SPM, PROX_MALL, PROX_CBD, PROX_TOP_SCH,  \n          ncol = 3, nrow = 4 )\n\n\n\n\nWe can observe a generally right skewed nature of the above variables.\n\nNUM_KG <- ggplot(data=train, aes(x= `WITHIN_350M_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nNUM_CC <- ggplot(data=train, aes(x= `WITHIN_350M_CHILDCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nNUM_BUS <- ggplot(data=train, aes(x= `WITHIN_350M_BUS`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nNUM_PRISCH <- ggplot(data=train, aes(x= `WITHIN_1KM_PRISCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(NUM_KG, NUM_CC, NUM_BUS, NUM_PRISCH, ncol= 2, nrow= 2)\n\n\n\n\nWe can observe the right skewed data from ‘WITHIN_350M_KINDERGARTEN’, while the other 3 factors indicate normally distributed childcare, bus stops and primary schools."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#statistical-point-map",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#statistical-point-map",
    "title": "Take Home Exercise 3",
    "section": "7.2 Statistical Point Map",
    "text": "7.2 Statistical Point Map\n\ntmap_mode(\"view\")\n\n\ntmap_options(check.and.fix = TRUE)\n\n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Take-home_Ex/Take-home_Ex03/data/geospatial/MPSZ2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\ntm_shape(mpsz_sf)+\n  tm_polygons() +\ntm_shape(train) +  \n  tm_dots(col = \"resale_price\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11, 12))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nWe can observe that the HDB resale prices are high in the CBD, Southern and central areas of Singapore, reaching to $720,000 to $1,418,000 range. Resale flats in the North East (Punggol, Sengkang etc) are beginning to get more expensive, reaching the $625,000 range. The West and Northern districts have a larger majority of cheaper resale HDB flats that are in the $350,000 to $625,000 range."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#ordinary-least-squares-ols-method",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#ordinary-least-squares-ols-method",
    "title": "Take Home Exercise 3",
    "section": "8.1 Ordinary Least Squares (OLS) Method",
    "text": "8.1 Ordinary Least Squares (OLS) Method\nCompute the regression model using the lm() function below.\n\ntrain_nogeom <- train %>% st_drop_geometry()\n\nprice_mlr <- lm(resale_price ~ .,\n                data=train_nogeom)\nsummary(price_mlr)\n\n\nCall:\nlm(formula = resale_price ~ ., data = train_nogeom)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-324299  -54097   -2735   48780  715869 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              -165691.0    19744.8  -8.392  < 2e-16 ***\nfloor_area_sqm              5530.3      126.6  43.675  < 2e-16 ***\nremaining_lease             5588.6       79.5  70.295  < 2e-16 ***\nstorey_order               19992.5      352.5  56.723  < 2e-16 ***\nPROX_ELDERCARE              1002.0     1180.4   0.849  0.39595    \nPROX_MRT                  -25078.5     2016.2 -12.439  < 2e-16 ***\nPROX_HAWKER               -32340.1     1382.1 -23.399  < 2e-16 ***\nPROX_PARK                   7980.0     1752.5   4.554 5.32e-06 ***\nPROX_SUPERMARKET           -8458.9     4651.4  -1.819  0.06900 .  \nPROX_MALL                 -23894.5     2090.7 -11.429  < 2e-16 ***\nWITHIN_350M_KINDERGARTEN    8418.9      668.8  12.588  < 2e-16 ***\nWITHIN_350M_CHILDCARE      -3877.4      390.7  -9.924  < 2e-16 ***\nWITHIN_350M_BUS              534.2      245.4   2.177  0.02952 *  \nPROX_CBD                  -19925.7      239.9 -83.054  < 2e-16 ***\nWITHIN_1KM_PRISCH         -14105.9      502.4 -28.078  < 2e-16 ***\nPROX_GOOD_PRISCH           -1322.9      418.2  -3.163  0.00156 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 83390 on 14503 degrees of freedom\nMultiple R-squared:  0.6746,    Adjusted R-squared:  0.6742 \nF-statistic:  2004 on 15 and 14503 DF,  p-value: < 2.2e-16\n\n\n\n8.1.1 Publication Quality Table\nUsing  gt summary  package, it produces a summary table for the OLS model output for HDB resale price data.\n\ntbl_regression(price_mlr, intercept = TRUE) %>% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-165,691\n-204,393, -126,989\n<0.001\n    floor_area_sqm\n5,530\n5,282, 5,778\n<0.001\n    remaining_lease\n5,589\n5,433, 5,744\n<0.001\n    storey_order\n19,992\n19,302, 20,683\n<0.001\n    PROX_ELDERCARE\n1,002\n-1,312, 3,316\n0.4\n    PROX_MRT\n-25,079\n-29,030, -21,127\n<0.001\n    PROX_HAWKER\n-32,340\n-35,049, -29,631\n<0.001\n    PROX_PARK\n7,980\n4,545, 11,415\n<0.001\n    PROX_SUPERMARKET\n-8,459\n-17,576, 658\n0.069\n    PROX_MALL\n-23,894\n-27,993, -19,796\n<0.001\n    WITHIN_350M_KINDERGARTEN\n8,419\n7,108, 9,730\n<0.001\n    WITHIN_350M_CHILDCARE\n-3,877\n-4,643, -3,112\n<0.001\n    WITHIN_350M_BUS\n534\n53, 1,015\n0.030\n    PROX_CBD\n-19,926\n-20,396, -19,455\n<0.001\n    WITHIN_1KM_PRISCH\n-14,106\n-15,091, -13,121\n<0.001\n    PROX_GOOD_PRISCH\n-1,323\n-2,143, -503\n0.002\n  \n  \n    \n      R² = 0.675; Adjusted R² = 0.674; AIC = 370,258; Statistic = 2,004; p-value = <0.001; σ = 83,388\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n8.1.2 Check Non-linearity\n\nols_plot_resid_fit(price_mlr)\n\n\n\n\nThe points are scattered around 0 line, indicating that the dependent variable (price) and independent variables have a linear relationship.\n\n\n8.1.3 Check Multicolinearity\n\nvif <- ols_vif_tol(price_mlr)\nvif\n\n                  Variables Tolerance      VIF\n1            floor_area_sqm 0.5598668 1.786139\n2           remaining_lease 0.5253518 1.903486\n3              storey_order 0.8703427 1.148973\n4            PROX_ELDERCARE 0.8084843 1.236882\n5                  PROX_MRT 0.8038367 1.244034\n6               PROX_HAWKER 0.7643724 1.308263\n7                 PROX_PARK 0.8262207 1.210330\n8          PROX_SUPERMARKET 0.8722162 1.146505\n9                 PROX_MALL 0.7694176 1.299684\n10 WITHIN_350M_KINDERGARTEN 0.9239515 1.082308\n11    WITHIN_350M_CHILDCARE 0.7381697 1.354702\n12          WITHIN_350M_BUS 0.8500367 1.176420\n13                 PROX_CBD 0.5009505 1.996205\n14        WITHIN_1KM_PRISCH 0.6576783 1.520500\n15         PROX_GOOD_PRISCH 0.8104372 1.233902\n\n\nWe can observe that all vif values are well below 5, indicating there is no multicolinearity between the independent variables.\n\n\n8.1.4 Check Normality Assumption\nFrom the  ols_plot_resid_hist package, the residuals are resembling a normal distribution.\n\nols_plot_resid_hist(price_mlr)\n\n\n\n\n\n\n8.1.5 Check Spatial Autocorrelation\nSince we are building a predictive geographically weighted regression model that accounts for spatial distribution, we check for  spatial autocorrelation to understand the relationship data points have with neighbouring points.\nExtract out the residuals and convert it into a dataframe.\n\nmlr.output <- as.data.frame(price_mlr$residuals)\nprice_resale.res.sf <- cbind(train, \n                        price_mlr$residuals) %>%\nrename(`MLR_RES` = `price_mlr.residuals`)\n\nNext, convert it into an sp spatial object to prepare the residuals for the spatial autocorrelation test.\n\nprice_resale.sp <- as_Spatial(price_resale.res.sf)\nprice_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 14519 \nextent      : 6958.193, 42645.18, 28157.26, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, remaining_lease, storey_order,       PROX_ELDERCARE,           PROX_MRT,        PROX_HAWKER,          PROX_PARK,     PROX_SUPERMARKET,            PROX_MALL, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, WITHIN_350M_BUS,         PROX_CBD, WITHIN_1KM_PRISCH, ... \nmin values  :       350000,             99,           49.08,            1, 3.24852165967354e-07, 0.0229291315265009, 0.0494878683203785, 0.0600396043825887, 7.47984318619627e-07, 2.21189111471176e-12,                        0,                     0,               0,  1.6109563636452,                 0, ... \nmax values  :      1418000,            167,           96.75,           17,     8.26597091415839,   2.12908590009577,   6.63382585101601,   6.00301683925507,     1.67131003223853,     4.00920093399656,                        8,                    20,              19, 23.2773731998479,                 9, ... \n\n\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_sf)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(price_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nFrom the tmap plot of residuals, we can observe signs of spatial clustering, hence we can perform Moran I test to confirm this.\nUsing the  dnearneigh function from spdep package, the following code chunk identifies neighbours that are euclidean distance away between the lower and upper bounds specified.\n\nnb <- dnearneigh(coordinates(price_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 14519 \nNumber of nonzero links: 10417942 \nPercentage nonzero weights: 4.942066 \nAverage number of links: 717.5385 \nLink number distribution:\n\n   4    5    6   13   21   29   30   32   54   55   56   57   59   62   64   67 \n   5    6    6    8    6    6    3    7   14   52    2    4    2    2   10    2 \n  71   72   73   74   81   84   85   86   88   89   90   91   92   93   94   95 \n   1    3    2    1    6    8    9    1    6   13    5   11    5    7    2   11 \n  96   98   99  100  101  102  103  104  105  106  108  109  111  113  114  115 \n  21    3   11   17    1    5   10    8    5    4    8    4    6   10   12   23 \n 116  117  118  119  120  121  122  123  124  125  126  127  128  129  131  132 \n   9    6   16    5   32    4    4   11   10   16    4   23  134   44   38    7 \n 133  134  135  136  137  138  139  140  141  142  143  144  145  146  147  148 \n   4   17   16   12    5   10   16    1    1    8   13   28    9    8    4   10 \n 149  150  151  152  153  154  155  156  157  158  159  160  161  162  163  166 \n  10   16   24   11    6   11   57    5   12    3   26   11   24    8   16    6 \n 167  168  170  171  172  173  174  175  176  177  178  179  180  181  182  183 \n  13   21   10   24   12   11    5    4   18   11    3   18   12   12    6    1 \n 184  185  186  187  188  189  190  191  192  193  194  195  197  198  199  200 \n  31   15    4   23   33    3    5    3    9   26    3   16   27    1    2    6 \n 201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  216 \n  14    1   10   10    6    3   14   13   14   16   17   13   16   14   11   15 \n 217  218  219  220  221  222  223  224  225  226  227  228  229  230  231  232 \n  14    8    3   29   18   12   48   16   13    4   14    3    3    6   20   23 \n 233  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248 \n   6    8   44   30    5   12   18   34   32   19    6    8    7    5   11    5 \n 249  250  251  252  253  254  255  256  257  258  259  260  261  262  263  264 \n   6   17    6    8   54    1    8    7    4    3    6   25    8    1   25    3 \n 265  266  267  268  269  270  271  272  273  274  275  276  277  278  279  280 \n  11   17    4   17   21   12   12   31   15    6   29   26   20   49   47   16 \n 281  282  283  284  285  286  287  288  289  290  291  292  293  294  295  296 \n   4   11   10   21   20    6   23   14   27   15   16   14   41   10   10   12 \n 297  298  299  300  301  302  303  304  305  306  307  308  309  310  311  312 \n  22   34   16   21   19   24   15   24   15    4   21   18    8   20    9   33 \n 313  314  315  316  317  318  319  320  321  322  323  324  325  326  327  328 \n  13    2   26   16   14   18    6   21   18   18    6   25   47    5   25   15 \n 329  330  331  332  333  334  335  336  337  338  339  340  341  342  343  344 \n  19   27   38   22   35   38   38   24   16   78   43   23   21   42   46   26 \n 345  346  347  348  349  350  351  352  353  354  355  356  357  358  359  360 \n  32    6   33   37   27   13   14    7   14   16   31   21   18   13   16   25 \n 361  362  363  364  365  366  367  368  369  370  372  373  374  375  376  377 \n  23   49   11    1    6   20   17   38   16   23   17   11   36   17    7    4 \n 378  379  380  381  382  383  384  385  386  387  388  389  390  391  392  393 \n  13    4   19   17   14    6   12    5   53   27    6   31   27   20    4   46 \n 394  395  396  397  398  399  400  401  402  403  404  405  406  407  408  409 \n  30    6   31    1   20    3    8   23   26   11   23   38    8   17    4   20 \n 410  411  412  413  414  415  416  417  418  419  420  421  422  423  424  425 \n  45   18   13   22   20   28   15   16    9   11   13   23   24   48    3   22 \n 426  427  428  429  430  431  432  433  434  435  436  437  438  439  440  441 \n   8   21   20   49   21   25   17    6    6   10   40   14   12   38    4   10 \n 442  443  444  445  446  447  448  449  450  451  452  453  454  455  456  457 \n   9   25    8   26    7   30   10   11   17   17   20   34   12   22   11   13 \n 458  459  460  461  462  463  464  465  466  467  468  469  470  471  472  473 \n  13   17   17    8   37   17    6   14    8   25   20   13    2   13   14    7 \n 474  475  476  477  478  479  480  481  482  483  484  485  486  487  488  489 \n   2   10   20   15   10   19   20    6   11   25   19    6   10   12    8   13 \n 490  491  492  493  494  495  496  497  498  499  500  501  502  503  504  505 \n  20   13    6   17    6   23    9    5   28    6    6   30   16   25   36   20 \n 506  507  508  509  510  511  512  513  514  515  516  517  518  519  520  521 \n   6   29    7    3    9   14    1    7   23    2   20   12   16    6   11   33 \n 522  523  524  525  526  527  528  529  530  531  532  533  534  535  536  537 \n  12   26    8    5   31    9    7   10   17   10   14   10   14   15   32    5 \n 538  539  540  542  543  544  545  547  548  549  550  551  553  554  555  556 \n   5   19   22   14   11    1   14    4   10   10   11   16   10    5   28    4 \n 557  558  559  560  561  562  563  564  565  566  567  568  569  570  571  572 \n   7   14   21    8    9    6    6    2    5   11    8   12    4   36   20    1 \n 573  574  575  576  577  578  579  580  581  582  583  584  585  586  587  588 \n  13    6   29    4   13    7    6   10   16    7   23    3   17   10   31   17 \n 589  590  591  592  593  595  596  597  598  599  600  601  602  603  604  605 \n   8   13    8    3   19    7   21    8   11   19    9   28    1   19   10   20 \n 606  607  608  609  610  611  612  613  614  615  616  617  618  619  620  621 \n   1   21   16   14   14    6   17   16   17   22   21   10   28   33   40   45 \n 622  623  624  625  626  627  628  629  630  631  632  633  634  635  636  637 \n  22   11   12   14   44   27   16    2   18   56   24    9   12   15   23   33 \n 638  639  640  641  642  643  644  645  646  647  648  649  650  651  652  653 \n  46   20    6   25   21   15   23    8    8   18   12   16   11   10    4   27 \n 654  655  656  657  658  659  660  661  662  663  664  665  666  667  668  669 \n  21   16   24   13   13   19   25   18    7   15    6    6   25    2   20   14 \n 670  671  672  673  674  675  676  677  678  679  680  682  683  684  685  686 \n   8   34    2   10    9   35   31    6    7   13   19    5    7    4   51   15 \n 687  688  689  691  692  693  694  695  696  697  698  699  700  701  702  703 \n  10    9   20    5   31    6   29    9   18   19   26   11    9    5   13   13 \n 704  705  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   3   25   10   14    8   10   26   19   23   32   46   70    2   18    9   16 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   6   18   15    8   11    1   16   20   14   13   14   10   34    3   11   22 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n  13   11    3    6    8    8    8    8   27    4   11   35   27    8   32    4 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1   12    2    8   17    1   14    3    1    8    3   14   16    8   10    6 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   7   33   19   15    6    3    4   22    3   10    9    3    1    9   11    3 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   4    7   26    3    3    8    6   17    1    8    2   10   13   12    1    2 \n 801  802  803  804  805  806  807  808  809  810  811  813  815  819  820  821 \n   8    2    6    4    8    1    7    4    8    5   12    5   10    8   11    4 \n 823  824  827  828  829  830  831  832  833  834  835  838  839  840  842  843 \n   3    3    7    3    1    7    4    4    1    6    1   12    7    1    3   16 \n 845  846  847  848  849  850  852  854  856  857  858  861  862  863  865  866 \n   3    1    4    3    4    8    3    6   11    1    5    4    2    4    3    4 \n 867  868  870  871  872  873  874  875  878  879  880  883  884  885  889  890 \n  11    5    2    1    3    1    3    7    7    3    3    1    6    1    4   10 \n 892  893  894  896  897  898  899  900  901  903  904  907  908  909  910  912 \n   5    7    1    4    4    1    2    4   10    4    7   10    5    1    2    7 \n 913  914  929  933  935  942  949  950  964  967  971  973  985  997 1001 1006 \n  10   21    6    3    1    5    6    3    1   11    6    1   34   10    8    8 \n1009 1022 1026 1027 1030 1040 1045 1051 1054 1079 1092 1093 1095 1097 1101 1102 \n   2   17    7    3   12   10   17    2    1   15    5   13   34    8    6    6 \n1120 1124 1132 1137 1144 1148 1151 1152 1156 1160 1167 1170 1173 1175 1183 1186 \n   7    2    7    2    3   10    4   19   12    7    3    3    2   22    3    2 \n1195 1199 1204 1212 1217 1220 1223 1226 1239 1243 1247 1250 1252 1254 1259 1261 \n  12   21    7    1    4    5   38   16    4    8    2    1    5    2    7    4 \n1263 1264 1266 1267 1268 1273 1276 1280 1285 1291 1292 1294 1295 1296 1297 1298 \n   3    3    1    5    3    5    7   36    1    5   11    8    7    3    4    2 \n1300 1305 1309 1313 1316 1317 1320 1324 1333 1335 1336 1344 1348 1352 1354 1356 \n   3    5    4    8    1    4    9    3    4    2    3    5    5   11    3    5 \n1357 1359 1364 1366 1367 1368 1369 1379 1383 1384 1390 1392 1396 1399 1401 1402 \n   7    6   10    2    4    4    4    4   12    4   11   17    7    5    2   13 \n1403 1405 1407 1408 1410 1411 1413 1415 1416 1417 1422 1423 1424 1426 1429 1431 \n   9    5   10    4    8    8    6    5   10    1    3    3   17    9    8   12 \n1432 1433 1435 1436 1437 1438 1441 1442 1444 1447 1448 1451 1453 1455 1456 1458 \n   6    4    4   11   11    7    9    6    2    5    4   10    9   20    6   16 \n1462 1463 1464 1467 1472 1474 1479 1482 1483 1486 1487 1489 1492 1493 1496 1497 \n   8   15   12    8   10    3   20    5    8    5    8   16    3    9    4    6 \n1498 1499 1501 1506 1510 1513 1514 1519 1524 1525 1526 1528 1529 1531 1532 1533 \n   7    7    3   12    4    8    3    2    2    4   13    3    3   10    3   42 \n1534 1535 1538 1539 1540 1541 1542 1543 1544 1545 1548 1549 1550 1551 1552 1556 \n  15    7    5    9   16    6    2    9    5    2    3    4   12    4    3    2 \n1557 1558 1559 1561 1562 1565 1566 1568 1569 1572 1573 1577 1579 1580 1583 1584 \n   4    8    9    4    1    2    2   18   20    8    5    8    9    4    5    2 \n1586 1587 1589 1590 1598 1600 1601 1603 1609 1610 1611 1612 1615 1616 1617 1620 \n   5   16    5   14    1    3    7    2    5    9    5   13   11   25   13    2 \n1624 1629 1633 1635 1636 1638 1641 1642 1647 1648 1650 1652 1654 1655 1656 1657 \n   7    7    9    4    3   17   11    4    5    6    6   13    3    5   12    6 \n1658 1660 1661 1662 1666 1667 1668 1671 1676 1679 1682 1683 1684 1685 1689 1690 \n   7    9   14    9    2    9   15    6    4    6    4    3    3   17    9    1 \n1691 1692 1694 1707 1709 1712 1713 1717 1718 1719 1720 1721 1730 1731 1732 1734 \n   2    8    4   15   12    7    2    2    6    3   12    6    1   11    7    8 \n1736 1738 1739 1741 1743 1744 1745 1746 1747 1759 1762 1765 1771 1773 1775 1786 \n   8    5   12    3    6   12    8    7   10    5    2    4    3    1    2   10 \n1794 1803 1805 1808 1810 1813 1815 1817 1821 1823 1828 1831 1832 1844 1853 1856 \n  18    3    3   11    6    7    1    2    8    8    9    3    1    5    4    2 \n1862 1865 1871 1878 1880 1883 1884 1886 1888 1889 1891 1892 1893 1898 1902 1907 \n   4    6    7   14    2    4    7    5    8    3    9    6    9    4    2    2 \n1909 1910 1920 1921 1924 1933 1935 1937 1938 1940 1941 1942 1945 1949 1952 1955 \n   5   11    6    2    2    6    3    1    2    4    1    6    7    2    6    2 \n1959 1961 1964 1965 1969 1974 1976 1977 1980 1988 1991 1993 1996 1999 2005 2010 \n   5    3    4    4    3    3   10    4    6    3    5    9    3   12    6    5 \n2012 2014 2017 2024 2027 2029 2033 2036 2042 2043 2045 2046 2052 2053 2055 2061 \n   5    4    7   15    4   15    9    4    1    2    5    3    5   13    1   19 \n2063 2066 2067 2069 2071 2077 2081 2084 2092 2093 2097 2098 2100 2109 2110 2112 \n  15    2    1    6    6    6    9    1    6    3    2    6    2   12   15   11 \n2115 2117 2118 2119 2138 2142 2143 2145 2148 2154 2158 2164 2165 2170 2171 2172 \n   3    2    3    2    8    1    2   15    1    4    1   10    3    4    2    6 \n2186 2188 2190 2194 2198 2200 2204 2208 2216 2218 2227 2229 2233 2236 2237 2240 \n   4    4    6    2    5    8    5   16    2    9    6    4    4    5    3    8 \n2244 2245 2248 2249 2251 2253 2256 2260 2263 2264 2265 2275 2276 2280 2290 2303 \n   3    4    3    3    5    5    3   13    1   10    6    2    4   11    2    4 \n2304 2305 2306 2310 2313 2314 2316 2317 2319 2320 2321 2322 2326 2327 2335 2338 \n   5    7    5    4    3    8    6    4    4    2    2    4    2    5    5    4 \n2345 2346 2347 2350 2351 2354 2356 2358 2372 2375 2378 2387 2388 2392 2393 2398 \n   6    2    3    5    7    1    2    3    4    5    4    7    5    5    1    4 \n2403 2404 2406 2407 2409 2412 2413 2417 2418 2419 2426 2430 2431 2434 2435 2439 \n   4    1    5    5    4    1    5    5    2    4    4   10    5    7    5    6 \n2444 2445 2457 2462 2464 2474 2479 2490 2493 2494 2496 2502 2508 2509 2516 2517 \n   6    1    2    7    6    4    8    7   15    8    4    5    1   11    2    5 \n2519 2552 \n   2    5 \n5 least connected regions:\n918 6125 10704 10705 10706 with 4 links\n5 most connected regions:\n4165 6296 6974 7602 12525 with 2552 links\n\n\nThe next code chunk below converts the neighbours list into spatial weights using  nb2listw function.\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 14519 \nNumber of nonzero links: 10417942 \nPercentage nonzero weights: 4.942066 \nAverage number of links: 717.5385 \nLink number distribution:\n\n   4    5    6   13   21   29   30   32   54   55   56   57   59   62   64   67 \n   5    6    6    8    6    6    3    7   14   52    2    4    2    2   10    2 \n  71   72   73   74   81   84   85   86   88   89   90   91   92   93   94   95 \n   1    3    2    1    6    8    9    1    6   13    5   11    5    7    2   11 \n  96   98   99  100  101  102  103  104  105  106  108  109  111  113  114  115 \n  21    3   11   17    1    5   10    8    5    4    8    4    6   10   12   23 \n 116  117  118  119  120  121  122  123  124  125  126  127  128  129  131  132 \n   9    6   16    5   32    4    4   11   10   16    4   23  134   44   38    7 \n 133  134  135  136  137  138  139  140  141  142  143  144  145  146  147  148 \n   4   17   16   12    5   10   16    1    1    8   13   28    9    8    4   10 \n 149  150  151  152  153  154  155  156  157  158  159  160  161  162  163  166 \n  10   16   24   11    6   11   57    5   12    3   26   11   24    8   16    6 \n 167  168  170  171  172  173  174  175  176  177  178  179  180  181  182  183 \n  13   21   10   24   12   11    5    4   18   11    3   18   12   12    6    1 \n 184  185  186  187  188  189  190  191  192  193  194  195  197  198  199  200 \n  31   15    4   23   33    3    5    3    9   26    3   16   27    1    2    6 \n 201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  216 \n  14    1   10   10    6    3   14   13   14   16   17   13   16   14   11   15 \n 217  218  219  220  221  222  223  224  225  226  227  228  229  230  231  232 \n  14    8    3   29   18   12   48   16   13    4   14    3    3    6   20   23 \n 233  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248 \n   6    8   44   30    5   12   18   34   32   19    6    8    7    5   11    5 \n 249  250  251  252  253  254  255  256  257  258  259  260  261  262  263  264 \n   6   17    6    8   54    1    8    7    4    3    6   25    8    1   25    3 \n 265  266  267  268  269  270  271  272  273  274  275  276  277  278  279  280 \n  11   17    4   17   21   12   12   31   15    6   29   26   20   49   47   16 \n 281  282  283  284  285  286  287  288  289  290  291  292  293  294  295  296 \n   4   11   10   21   20    6   23   14   27   15   16   14   41   10   10   12 \n 297  298  299  300  301  302  303  304  305  306  307  308  309  310  311  312 \n  22   34   16   21   19   24   15   24   15    4   21   18    8   20    9   33 \n 313  314  315  316  317  318  319  320  321  322  323  324  325  326  327  328 \n  13    2   26   16   14   18    6   21   18   18    6   25   47    5   25   15 \n 329  330  331  332  333  334  335  336  337  338  339  340  341  342  343  344 \n  19   27   38   22   35   38   38   24   16   78   43   23   21   42   46   26 \n 345  346  347  348  349  350  351  352  353  354  355  356  357  358  359  360 \n  32    6   33   37   27   13   14    7   14   16   31   21   18   13   16   25 \n 361  362  363  364  365  366  367  368  369  370  372  373  374  375  376  377 \n  23   49   11    1    6   20   17   38   16   23   17   11   36   17    7    4 \n 378  379  380  381  382  383  384  385  386  387  388  389  390  391  392  393 \n  13    4   19   17   14    6   12    5   53   27    6   31   27   20    4   46 \n 394  395  396  397  398  399  400  401  402  403  404  405  406  407  408  409 \n  30    6   31    1   20    3    8   23   26   11   23   38    8   17    4   20 \n 410  411  412  413  414  415  416  417  418  419  420  421  422  423  424  425 \n  45   18   13   22   20   28   15   16    9   11   13   23   24   48    3   22 \n 426  427  428  429  430  431  432  433  434  435  436  437  438  439  440  441 \n   8   21   20   49   21   25   17    6    6   10   40   14   12   38    4   10 \n 442  443  444  445  446  447  448  449  450  451  452  453  454  455  456  457 \n   9   25    8   26    7   30   10   11   17   17   20   34   12   22   11   13 \n 458  459  460  461  462  463  464  465  466  467  468  469  470  471  472  473 \n  13   17   17    8   37   17    6   14    8   25   20   13    2   13   14    7 \n 474  475  476  477  478  479  480  481  482  483  484  485  486  487  488  489 \n   2   10   20   15   10   19   20    6   11   25   19    6   10   12    8   13 \n 490  491  492  493  494  495  496  497  498  499  500  501  502  503  504  505 \n  20   13    6   17    6   23    9    5   28    6    6   30   16   25   36   20 \n 506  507  508  509  510  511  512  513  514  515  516  517  518  519  520  521 \n   6   29    7    3    9   14    1    7   23    2   20   12   16    6   11   33 \n 522  523  524  525  526  527  528  529  530  531  532  533  534  535  536  537 \n  12   26    8    5   31    9    7   10   17   10   14   10   14   15   32    5 \n 538  539  540  542  543  544  545  547  548  549  550  551  553  554  555  556 \n   5   19   22   14   11    1   14    4   10   10   11   16   10    5   28    4 \n 557  558  559  560  561  562  563  564  565  566  567  568  569  570  571  572 \n   7   14   21    8    9    6    6    2    5   11    8   12    4   36   20    1 \n 573  574  575  576  577  578  579  580  581  582  583  584  585  586  587  588 \n  13    6   29    4   13    7    6   10   16    7   23    3   17   10   31   17 \n 589  590  591  592  593  595  596  597  598  599  600  601  602  603  604  605 \n   8   13    8    3   19    7   21    8   11   19    9   28    1   19   10   20 \n 606  607  608  609  610  611  612  613  614  615  616  617  618  619  620  621 \n   1   21   16   14   14    6   17   16   17   22   21   10   28   33   40   45 \n 622  623  624  625  626  627  628  629  630  631  632  633  634  635  636  637 \n  22   11   12   14   44   27   16    2   18   56   24    9   12   15   23   33 \n 638  639  640  641  642  643  644  645  646  647  648  649  650  651  652  653 \n  46   20    6   25   21   15   23    8    8   18   12   16   11   10    4   27 \n 654  655  656  657  658  659  660  661  662  663  664  665  666  667  668  669 \n  21   16   24   13   13   19   25   18    7   15    6    6   25    2   20   14 \n 670  671  672  673  674  675  676  677  678  679  680  682  683  684  685  686 \n   8   34    2   10    9   35   31    6    7   13   19    5    7    4   51   15 \n 687  688  689  691  692  693  694  695  696  697  698  699  700  701  702  703 \n  10    9   20    5   31    6   29    9   18   19   26   11    9    5   13   13 \n 704  705  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   3   25   10   14    8   10   26   19   23   32   46   70    2   18    9   16 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   6   18   15    8   11    1   16   20   14   13   14   10   34    3   11   22 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n  13   11    3    6    8    8    8    8   27    4   11   35   27    8   32    4 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1   12    2    8   17    1   14    3    1    8    3   14   16    8   10    6 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   7   33   19   15    6    3    4   22    3   10    9    3    1    9   11    3 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   4    7   26    3    3    8    6   17    1    8    2   10   13   12    1    2 \n 801  802  803  804  805  806  807  808  809  810  811  813  815  819  820  821 \n   8    2    6    4    8    1    7    4    8    5   12    5   10    8   11    4 \n 823  824  827  828  829  830  831  832  833  834  835  838  839  840  842  843 \n   3    3    7    3    1    7    4    4    1    6    1   12    7    1    3   16 \n 845  846  847  848  849  850  852  854  856  857  858  861  862  863  865  866 \n   3    1    4    3    4    8    3    6   11    1    5    4    2    4    3    4 \n 867  868  870  871  872  873  874  875  878  879  880  883  884  885  889  890 \n  11    5    2    1    3    1    3    7    7    3    3    1    6    1    4   10 \n 892  893  894  896  897  898  899  900  901  903  904  907  908  909  910  912 \n   5    7    1    4    4    1    2    4   10    4    7   10    5    1    2    7 \n 913  914  929  933  935  942  949  950  964  967  971  973  985  997 1001 1006 \n  10   21    6    3    1    5    6    3    1   11    6    1   34   10    8    8 \n1009 1022 1026 1027 1030 1040 1045 1051 1054 1079 1092 1093 1095 1097 1101 1102 \n   2   17    7    3   12   10   17    2    1   15    5   13   34    8    6    6 \n1120 1124 1132 1137 1144 1148 1151 1152 1156 1160 1167 1170 1173 1175 1183 1186 \n   7    2    7    2    3   10    4   19   12    7    3    3    2   22    3    2 \n1195 1199 1204 1212 1217 1220 1223 1226 1239 1243 1247 1250 1252 1254 1259 1261 \n  12   21    7    1    4    5   38   16    4    8    2    1    5    2    7    4 \n1263 1264 1266 1267 1268 1273 1276 1280 1285 1291 1292 1294 1295 1296 1297 1298 \n   3    3    1    5    3    5    7   36    1    5   11    8    7    3    4    2 \n1300 1305 1309 1313 1316 1317 1320 1324 1333 1335 1336 1344 1348 1352 1354 1356 \n   3    5    4    8    1    4    9    3    4    2    3    5    5   11    3    5 \n1357 1359 1364 1366 1367 1368 1369 1379 1383 1384 1390 1392 1396 1399 1401 1402 \n   7    6   10    2    4    4    4    4   12    4   11   17    7    5    2   13 \n1403 1405 1407 1408 1410 1411 1413 1415 1416 1417 1422 1423 1424 1426 1429 1431 \n   9    5   10    4    8    8    6    5   10    1    3    3   17    9    8   12 \n1432 1433 1435 1436 1437 1438 1441 1442 1444 1447 1448 1451 1453 1455 1456 1458 \n   6    4    4   11   11    7    9    6    2    5    4   10    9   20    6   16 \n1462 1463 1464 1467 1472 1474 1479 1482 1483 1486 1487 1489 1492 1493 1496 1497 \n   8   15   12    8   10    3   20    5    8    5    8   16    3    9    4    6 \n1498 1499 1501 1506 1510 1513 1514 1519 1524 1525 1526 1528 1529 1531 1532 1533 \n   7    7    3   12    4    8    3    2    2    4   13    3    3   10    3   42 \n1534 1535 1538 1539 1540 1541 1542 1543 1544 1545 1548 1549 1550 1551 1552 1556 \n  15    7    5    9   16    6    2    9    5    2    3    4   12    4    3    2 \n1557 1558 1559 1561 1562 1565 1566 1568 1569 1572 1573 1577 1579 1580 1583 1584 \n   4    8    9    4    1    2    2   18   20    8    5    8    9    4    5    2 \n1586 1587 1589 1590 1598 1600 1601 1603 1609 1610 1611 1612 1615 1616 1617 1620 \n   5   16    5   14    1    3    7    2    5    9    5   13   11   25   13    2 \n1624 1629 1633 1635 1636 1638 1641 1642 1647 1648 1650 1652 1654 1655 1656 1657 \n   7    7    9    4    3   17   11    4    5    6    6   13    3    5   12    6 \n1658 1660 1661 1662 1666 1667 1668 1671 1676 1679 1682 1683 1684 1685 1689 1690 \n   7    9   14    9    2    9   15    6    4    6    4    3    3   17    9    1 \n1691 1692 1694 1707 1709 1712 1713 1717 1718 1719 1720 1721 1730 1731 1732 1734 \n   2    8    4   15   12    7    2    2    6    3   12    6    1   11    7    8 \n1736 1738 1739 1741 1743 1744 1745 1746 1747 1759 1762 1765 1771 1773 1775 1786 \n   8    5   12    3    6   12    8    7   10    5    2    4    3    1    2   10 \n1794 1803 1805 1808 1810 1813 1815 1817 1821 1823 1828 1831 1832 1844 1853 1856 \n  18    3    3   11    6    7    1    2    8    8    9    3    1    5    4    2 \n1862 1865 1871 1878 1880 1883 1884 1886 1888 1889 1891 1892 1893 1898 1902 1907 \n   4    6    7   14    2    4    7    5    8    3    9    6    9    4    2    2 \n1909 1910 1920 1921 1924 1933 1935 1937 1938 1940 1941 1942 1945 1949 1952 1955 \n   5   11    6    2    2    6    3    1    2    4    1    6    7    2    6    2 \n1959 1961 1964 1965 1969 1974 1976 1977 1980 1988 1991 1993 1996 1999 2005 2010 \n   5    3    4    4    3    3   10    4    6    3    5    9    3   12    6    5 \n2012 2014 2017 2024 2027 2029 2033 2036 2042 2043 2045 2046 2052 2053 2055 2061 \n   5    4    7   15    4   15    9    4    1    2    5    3    5   13    1   19 \n2063 2066 2067 2069 2071 2077 2081 2084 2092 2093 2097 2098 2100 2109 2110 2112 \n  15    2    1    6    6    6    9    1    6    3    2    6    2   12   15   11 \n2115 2117 2118 2119 2138 2142 2143 2145 2148 2154 2158 2164 2165 2170 2171 2172 \n   3    2    3    2    8    1    2   15    1    4    1   10    3    4    2    6 \n2186 2188 2190 2194 2198 2200 2204 2208 2216 2218 2227 2229 2233 2236 2237 2240 \n   4    4    6    2    5    8    5   16    2    9    6    4    4    5    3    8 \n2244 2245 2248 2249 2251 2253 2256 2260 2263 2264 2265 2275 2276 2280 2290 2303 \n   3    4    3    3    5    5    3   13    1   10    6    2    4   11    2    4 \n2304 2305 2306 2310 2313 2314 2316 2317 2319 2320 2321 2322 2326 2327 2335 2338 \n   5    7    5    4    3    8    6    4    4    2    2    4    2    5    5    4 \n2345 2346 2347 2350 2351 2354 2356 2358 2372 2375 2378 2387 2388 2392 2393 2398 \n   6    2    3    5    7    1    2    3    4    5    4    7    5    5    1    4 \n2403 2404 2406 2407 2409 2412 2413 2417 2418 2419 2426 2430 2431 2434 2435 2439 \n   4    1    5    5    4    1    5    5    2    4    4   10    5    7    5    6 \n2444 2445 2457 2462 2464 2474 2479 2490 2493 2494 2496 2502 2508 2509 2516 2517 \n   6    1    2    7    6    4    8    7   15    8    4    5    1   11    2    5 \n2519 2552 \n   2    5 \n5 least connected regions:\n918 6125 10704 10705 10706 with 4 links\n5 most connected regions:\n4165 6296 6974 7602 12525 with 2552 links\n\nWeights style: W \nWeights constants summary:\n      n        nn    S0       S1       S2\nW 14519 210801361 14519 80.30014 58598.26\n\n\nThe Moran I test is performed below.\n\nlm.morantest(price_mlr, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = resale_price ~ ., data = train_nogeom)\nweights: nb_lw\n\nMoran I statistic standard deviate = 534.39, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    2.939151e-01    -4.904277e-04     3.035164e-07 \n\n\nSince the p-value is less than 2.2e-16 which is smaller than the alpha value of 0.05, there is evidence to conclude the residuals are not randomly distributed. the Observed Moran I value is 0.29395 which is larger than 0, indicating the residuals resemble a clustered distribution."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#ordinary-least-squares-ols-regression-predictive-model",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#ordinary-least-squares-ols-regression-predictive-model",
    "title": "Take Home Exercise 3",
    "section": "8.2 Ordinary Least Squares (OLS) Regression Predictive Model",
    "text": "8.2 Ordinary Least Squares (OLS) Regression Predictive Model\n\n8.2.1 Training Data\n\nprice_ols_train <- predict(price_mlr,\n             data=train,\n             se.fit = TRUE,\n             interval = \"prediction\")\nsummary(price_ols_train)\n\n               Length Class  Mode   \nfit            43557  -none- numeric\nse.fit         14519  -none- numeric\ndf                 1  -none- numeric\nresidual.scale     1  -none- numeric\n\n\n\nprice_ols_train$residual.scale\n\n[1] 83388.49\n\n\n\n\n8.2.2 Testing Data\nTo predict HDB resale prices using the test data, use the predict () function from the car package.\n\nprice_ols_test <- predict(price_mlr,\n             data=test,\n             se.fit = TRUE,\n             interval = \"prediction\")\nsummary(price_ols_test)\n\n               Length Class  Mode   \nfit            43557  -none- numeric\nse.fit         14519  -none- numeric\ndf                 1  -none- numeric\nresidual.scale     1  -none- numeric\n\n\n\nsummary(price_ols_test$fit)\n\n      fit               lwr               upr         \n Min.   : 108035   Min.   : -58559   Min.   : 274628  \n 1st Qu.: 542859   1st Qu.: 379321   1st Qu.: 706467  \n Median : 612140   Median : 448599   Median : 775661  \n Mean   : 627297   Mean   : 463755   Mean   : 790839  \n 3rd Qu.: 685101   3rd Qu.: 521575   3rd Qu.: 848660  \n Max.   :1170458   Max.   :1006807   Max.   :1334109  \n\n\n\nprice_ols_test$residual.scale\n\n[1] 83388.49\n\n\nBy comparing the residuals from the training and testing data, they have yielded the same value of 83388.49, indicating that the OLS predictive model was able to predict the HDB resale prices."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#geographically-weighted-regression-gwr-predictive-model",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#geographically-weighted-regression-gwr-predictive-model",
    "title": "Take Home Exercise 3",
    "section": "8.3 Geographically Weighted Regression (GWR) Predictive Model",
    "text": "8.3 Geographically Weighted Regression (GWR) Predictive Model\nConvert the training data into an sp object for subsequent analysis.\n\ntrain_sp <- as_Spatial(train)\ntrain_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 14519 \nextent      : 6958.193, 42645.18, 28157.26, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 16\nnames       : resale_price, floor_area_sqm, remaining_lease, storey_order,       PROX_ELDERCARE,           PROX_MRT,        PROX_HAWKER,          PROX_PARK,     PROX_SUPERMARKET,            PROX_MALL, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, WITHIN_350M_BUS,         PROX_CBD, WITHIN_1KM_PRISCH, ... \nmin values  :       350000,             99,           49.08,            1, 3.24852165967354e-07, 0.0229291315265009, 0.0494878683203785, 0.0600396043825887, 7.47984318619627e-07, 2.21189111471176e-12,                        0,                     0,               0,  1.6109563636452,                 0, ... \nmax values  :      1418000,            167,           96.75,           17,     8.26597091415839,   2.12908590009577,   6.63382585101601,   6.00301683925507,     1.67131003223853,     4.00920093399656,                        8,                    20,              19, 23.2773731998479,                 9, ... \n\n\n\n8.3.1 Adaptive Bandwidth\nFirst, we will determine the optimal adaptive bandwidth for the gwr model using the code below.\n\nbw_adaptive <- bw.gwr(resale_price ~.,\n                  data=train_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\nWrite the output of the optimal adaptive bandwidth into an rds file.\n\nwrite_rds(bw_adaptive, \"data/rds/bw_adaptive.rds\") \n\nThe gwr predictive model is computed below using the previously calculated optimal bandwidth:\n\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease + PROX_CBD + \n                            PROX_ELDERCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH + PROX_GOOD_PRISCH,\n                          data=train_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\nWrite the output of the gwr.basic model into an rds file.\n\nwrite_rds(gwr_adaptive, \"data/rds/gwr_adaptive.rds\")\n\nDisplay the contents of the model below:\n\ngwr_adaptive <- read_rds(\"data/rds/gwr_adaptive.rds\")\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-17 08:52:17.048319 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease + PROX_CBD + PROX_ELDERCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH + \n    PROX_GOOD_PRISCH, data = train_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease PROX_CBD PROX_ELDERCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH PROX_GOOD_PRISCH\n   Number of data points: 14519\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-324299  -54097   -2735   48780  715869 \n\n   Coefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              -165691.0    19744.8  -8.392  < 2e-16 ***\n   floor_area_sqm              5530.3      126.6  43.675  < 2e-16 ***\n   storey_order               19992.5      352.5  56.723  < 2e-16 ***\n   remaining_lease             5588.6       79.5  70.295  < 2e-16 ***\n   PROX_CBD                  -19925.7      239.9 -83.054  < 2e-16 ***\n   PROX_ELDERCARE              1002.0     1180.4   0.849  0.39595    \n   PROX_HAWKER               -32340.1     1382.1 -23.399  < 2e-16 ***\n   PROX_MRT                  -25078.5     2016.2 -12.439  < 2e-16 ***\n   PROX_PARK                   7980.0     1752.5   4.554 5.32e-06 ***\n   PROX_MALL                 -23894.5     2090.7 -11.429  < 2e-16 ***\n   PROX_SUPERMARKET           -8458.9     4651.4  -1.819  0.06900 .  \n   WITHIN_350M_KINDERGARTEN    8418.9      668.8  12.588  < 2e-16 ***\n   WITHIN_350M_CHILDCARE      -3877.4      390.7  -9.924  < 2e-16 ***\n   WITHIN_350M_BUS              534.2      245.4   2.177  0.02952 *  \n   WITHIN_1KM_PRISCH         -14105.9      502.4 -28.078  < 2e-16 ***\n   PROX_GOOD_PRISCH           -1322.9      418.2  -3.163  0.00156 ** \n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 83390 on 14503 degrees of freedom\n   Multiple R-squared: 0.6746\n   Adjusted R-squared: 0.6742 \n   F-statistic:  2004 on 15 and 14503 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 1.008486e+14\n   Sigma(hat): 83348.27\n   AIC:  370258.4\n   AICc:  370258.5\n   BIC:  356031.2\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 69 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.7946e+08 -9.6724e+05 -1.4552e+05  3.6217e+06\n   floor_area_sqm           -1.6034e+05  1.1165e+03  3.2034e+03  5.8176e+03\n   storey_order              3.3585e+03  1.1693e+04  1.4186e+04  1.7944e+04\n   remaining_lease          -7.3105e+04 -2.1272e+03  4.0938e+03  6.6691e+03\n   PROX_CBD                 -8.8341e+07 -2.8883e+05 -2.0156e+04  9.7493e+04\n   PROX_ELDERCARE           -1.6279e+07 -4.7141e+04  1.3052e+04  9.1405e+04\n   PROX_HAWKER              -6.7649e+06 -5.5437e+04  3.6489e+03  1.1450e+05\n   PROX_MRT                 -7.8455e+06 -1.1892e+05 -4.9072e+04  5.2506e+04\n   PROX_PARK                -3.5965e+07 -9.6154e+04 -1.0960e+04  6.3723e+04\n   PROX_MALL                -2.8128e+07 -1.0545e+05 -2.3200e+04  5.9033e+04\n   PROX_SUPERMARKET         -6.7266e+06 -9.3833e+04 -1.8712e+04  5.2123e+04\n   WITHIN_350M_KINDERGARTEN -3.5303e+05 -9.4771e+03 -6.3515e+02  7.4898e+03\n   WITHIN_350M_CHILDCARE    -9.7906e+04 -3.6575e+03  4.6350e+02  5.2338e+03\n   WITHIN_350M_BUS          -4.0644e+04 -2.6840e+03  7.9049e+01  2.7765e+03\n   WITHIN_1KM_PRISCH        -1.5107e+06 -6.7399e+03  6.6886e+01  7.2958e+03\n   PROX_GOOD_PRISCH         -3.8384e+07 -1.0992e+05  1.7128e+04  2.4181e+05\n                                 Max.\n   Intercept                791294700\n   floor_area_sqm              553894\n   storey_order                 28264\n   remaining_lease              12809\n   PROX_CBD                  37653414\n   PROX_ELDERCARE             9015002\n   PROX_HAWKER               36079132\n   PROX_MRT                  13087576\n   PROX_PARK                 12916427\n   PROX_MALL                 15349887\n   PROX_SUPERMARKET           4282686\n   WITHIN_350M_KINDERGARTEN    222801\n   WITHIN_350M_CHILDCARE        62437\n   WITHIN_350M_BUS              25374\n   WITHIN_1KM_PRISCH           190039\n   PROX_GOOD_PRISCH          97952173\n   ************************Diagnostic information*************************\n   Number of data points: 14519 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1454.963 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 13064.04 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 353806.5 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 352433.6 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 347927.4 \n   Residual sum of squares: 2.732835e+13 \n   R-square value:  0.9118132 \n   Adjusted R-square value:  0.901991 \n\n   ***********************************************************************\n   Program stops at: 2023-03-17 08:56:48.999281 \n\n\nFrom the above output and referencing this link for interpreting GWR outputs, we can observe that the GWR model has a lower AIC value of 352433.6 compared to the Global Regression model which has a value of 370258.4, indicating that the GWR model is a better fit for the data compared to the global regression model. The Residual sum of squares for the GWR model is also smaller than that compared to the global regression model, indicating the GWR model has a closer fit to the observed data.\n\n\n8.3.2 Visualise GWR output\n\nresale.sf.adaptive <- st_as_sf(gwr_adaptive$SDF) %>%\n  st_transform(crs=3414)\nresale.sf.adaptive.svy21 <- st_transform(resale.sf.adaptive, 3414)\nresale.sf.adaptive.svy21  \n\nSimple feature collection with 14519 features and 54 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6958.193 ymin: 28157.26 xmax: 42645.18 ymax: 48741.06\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Intercept floor_area_sqm storey_order remaining_lease    PROX_CBD\n1  -543922.315       5798.420     19921.33        9898.314   -858.6719\n2  -455784.609       4884.513     19901.94        7705.634   2266.5729\n3  -512073.474       4490.400     22228.63        7884.370  38683.0292\n4   -25274.000       1843.624     24463.34        7990.419 -11223.3874\n5  -626888.561       4668.305     21565.30        8089.424  42245.2023\n6     1719.449       2941.478     23222.81        8571.491 -24507.6269\n7  -557333.913       5302.043     19486.07        7505.329  11773.1036\n8  -415412.903       4491.243     21907.71        7744.784  27745.8712\n9  -337832.948       4516.634     20322.93        7771.730  -7123.5491\n10 -910529.170       4195.171     21988.23        8439.962  71590.8110\n   PROX_ELDERCARE PROX_HAWKER  PROX_MRT   PROX_PARK  PROX_MALL PROX_SUPERMARKET\n1       -13072.20   -45495.08 -75797.72   76873.781  -93706.87         46355.87\n2       -34378.12   134933.71 101221.84 -198916.246  -56710.20        -52827.67\n3      -131693.52   -69535.73  51143.76 -153356.715 -114055.72        -19813.92\n4        19579.72    77084.86  28637.83  -34017.472  -13903.67         20859.65\n5      -172555.91    17625.06 -35577.00 -159535.592   39733.35        -47020.34\n6        54207.70    10721.96 -43423.70   -6239.236  -49549.46         41126.84\n7       -54903.67   171371.68 140386.22 -260819.748  -68210.93        -70784.58\n8      -133868.63   -43581.03  56678.64 -164278.720 -103482.58        -47493.21\n9       -37380.73   145880.12  82402.56 -211756.073  -42026.48        -55373.41\n10     -168225.94   -84533.06 -86020.14  -80346.241   21808.80         84107.22\n   WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS\n1                 -3702.856              4396.732      -3620.1390\n2                 12899.984              7369.359       8876.7757\n3                 10702.397              7523.916      -2211.8918\n4                 18586.932             -1397.015       1121.0196\n5                 15323.347             11072.893       2617.3135\n6                 20746.176             -3234.304       3210.2936\n7                  8886.546              8369.911       5682.4560\n8                 12755.269              6366.276        419.2191\n9                 12148.770              5232.924       8253.1675\n10                -1405.150             13991.956      -2885.0542\n   WITHIN_1KM_PRISCH PROX_GOOD_PRISCH      y     yhat   residual CV_Score\n1         -19651.954       -14798.835 483000 520774.3  -37774.29        0\n2         -22308.331        -4372.036 590000 678469.4  -88469.37        0\n3         -52699.212        19801.413 629000 705712.4  -76712.40        0\n4          -1117.886       -35827.116 670000 812096.3 -142096.27        0\n5         -60158.652         5470.719 680000 732430.0  -52430.00        0\n6          -4990.206       -47860.821 760000 847500.1  -87500.08        0\n7         -23742.899        10531.956 768000 871399.0 -103398.99        0\n8         -56144.137        20399.417 816800 847604.5  -30804.54        0\n9         -18145.095         2667.099 820000 869514.4  -49514.42        0\n10        -33729.036        22267.276 830000 931320.1 -101320.12        0\n   Stud_residual Intercept_SE floor_area_sqm_SE storey_order_SE\n1     -0.8742109    158542.20          844.4323        1457.736\n2     -2.0152387    126071.62          559.7671        1303.619\n3     -1.7477976    259802.12          946.9022        1739.495\n4     -3.2541165    112750.46          619.1971        1592.735\n5     -1.3833479    199621.63          721.5796        1436.238\n6     -2.1093872    120678.76          550.8411        1347.255\n7     -2.4053112    146846.13          631.9891        1401.630\n8     -0.7453731    212127.87          806.7247        1605.774\n9     -1.1171237     96618.68          523.2458        1182.313\n10    -2.2650800    282399.65          927.5423        1583.970\n   remaining_lease_SE PROX_CBD_SE PROX_ELDERCARE_SE PROX_HAWKER_SE PROX_MRT_SE\n1            351.3113   12710.022          20457.23       29693.67    19004.44\n2            318.8009   10002.732          15566.87       27512.51    21093.18\n3            490.2410   24085.776          44560.68       67283.18    43678.88\n4            381.0479    8815.157          18407.69       27153.58    20167.38\n5            350.8117   16475.946          33591.89       46095.21    34232.89\n6            318.0177    9926.553          17975.10       23531.16    22137.01\n7            353.2831   11466.768          18170.32       31947.06    22842.01\n8            420.3836   19064.802          34241.56       51584.02    35408.10\n9            299.4600    6553.453          14554.28       22167.24    17944.33\n10           444.1576   26387.322          50554.34       75087.50    44581.31\n   PROX_PARK_SE PROX_MALL_SE PROX_SUPERMARKET_SE WITHIN_350M_KINDERGARTEN_SE\n1      35935.86     32703.81            45755.20                    8479.763\n2      31876.20     14970.65            30519.60                    3540.085\n3      60862.84     29512.47            62214.35                   19820.525\n4      39333.19     15078.13            25270.32                    3531.364\n5      38123.20     38653.62            48824.18                    9332.557\n6      34130.16     13448.84            23398.72                    3764.996\n7      37662.12     18007.13            36581.97                    4217.026\n8      47536.44     24376.65            44675.07                   14818.855\n9      30100.09     13352.78            26761.09                    3203.425\n10     62048.51     67936.07            76298.99                   19576.334\n   WITHIN_350M_CHILDCARE_SE WITHIN_350M_BUS_SE WITHIN_1KM_PRISCH_SE\n1                  4264.484           2371.936            10270.238\n2                  2819.247           1885.707             5254.453\n3                  5666.858           3444.424            17149.171\n4                  2386.609           1704.021             4857.579\n5                  4526.847           2575.145            12136.390\n6                  2553.898           1622.145             5134.633\n7                  3211.516           2288.978             6346.090\n8                  4879.843           2957.016            13329.807\n9                  2524.873           1693.603             4260.269\n10                 6537.305           3417.585            19005.268\n   PROX_GOOD_PRISCH_SE Intercept_TV floor_area_sqm_TV storey_order_TV\n1            15694.359  -3.43077316          6.866649        13.66594\n2            11375.964  -3.61528316          8.725974        15.26669\n3            20174.625  -1.97101346          4.742200        12.77878\n4            13683.786  -0.22415874          2.977442        15.35933\n5            13881.186  -3.14038396          6.469563        15.01513\n6            11969.928   0.01424815          5.339976        17.23714\n7            12524.443  -3.79535979          8.389453        13.90243\n8            15800.972  -1.95831363          5.567256        13.64309\n9             9994.823  -3.49655945          8.631954        17.18914\n10           22951.966  -3.22425741          4.522889        13.88172\n   remaining_lease_TV PROX_CBD_TV PROX_ELDERCARE_TV PROX_HAWKER_TV PROX_MRT_TV\n1            28.17534 -0.06755865        -0.6390015     -1.5321476   -3.988420\n2            24.17068  0.22659538        -2.2084151      4.9044485    4.798794\n3            16.08264  1.60605286        -2.9553749     -1.0334786    1.170904\n4            20.96959 -1.27319197         1.0636710      2.8388472    1.420007\n5            23.05917  2.56405316        -5.1368318      0.3823622   -1.039264\n6            26.95287 -2.46889602         3.0157100      0.4556496   -1.961589\n7            21.24452  1.02671508        -3.0216126      5.3642390    6.145966\n8            18.42314  1.45534534        -3.9095370     -0.8448552    1.600725\n9            25.95248 -1.08699173        -2.5683676      6.5808891    4.592123\n10           19.00218  2.71307606        -3.3276259     -1.1257940   -1.929511\n   PROX_PARK_TV PROX_MALL_TV PROX_SUPERMARKET_TV WITHIN_350M_KINDERGARTEN_TV\n1     2.1391943   -2.8653201           1.0131280                 -0.43666972\n2    -6.2402747   -3.7880914          -1.7309428                  3.64397544\n3    -2.5197101   -3.8646617          -0.3184783                  0.53996538\n4    -0.8648541   -0.9221085           0.8254601                  5.26338535\n5    -4.1847374    1.0279334          -0.9630545                  1.64192364\n6    -0.1828071   -3.6842937           1.7576531                  5.51027800\n7    -6.9252545   -3.7879953          -1.9349579                  2.10730174\n8    -3.4558481   -4.2451518          -1.0630808                  0.86074597\n9    -7.0350651   -3.1473957          -2.0691763                  3.79243154\n10   -1.2948939    0.3210195           1.1023372                 -0.07177801\n   WITHIN_350M_CHILDCARE_TV WITHIN_350M_BUS_TV WITHIN_1KM_PRISCH_TV\n1                 1.0310116         -1.5262378           -1.9134857\n2                 2.6139454          4.7074005           -4.2456050\n3                 1.3277050         -0.6421659           -3.0729889\n4                -0.5853557          0.6578671           -0.2301324\n5                 2.4460497          1.0163752           -4.9568819\n6                -1.2664185          1.9790428           -0.9718720\n7                 2.6062185          2.4825301           -3.7413429\n8                 1.3046069          0.1417710           -4.2119241\n9                 2.0725495          4.8731405           -4.2591426\n10                2.1403248         -0.8441792           -1.7747203\n   PROX_GOOD_PRISCH_TV  Local_R2                  geometry\n1           -0.9429398 0.9475410 POINT (30820.82 39547.58)\n2           -0.3843222 0.9241404 POINT (29412.84 38680.21)\n3            0.9815009 0.9331871 POINT (29982.66 39489.71)\n4           -2.6182165 0.9254545  POINT (28149.18 39053.5)\n5            0.3941104 0.9317547 POINT (30053.55 38976.12)\n6           -3.9984217 0.9056712  POINT (28526.9 39944.36)\n7            0.8409121 0.9290346 POINT (29507.16 38473.85)\n8            1.2910230 0.9270069  POINT (29872.38 39327.2)\n9            0.2668480 0.9318115 POINT (29333.46 38563.53)\n10           0.9701686 0.9440498 POINT (30264.97 39315.69)\n\n\n\ntmap_options(check.and.fix = TRUE)\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz_sf)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nFrom the map showing the outputs of the local R2 values, the Eastern, Central and Northern areas of Singapore are not able to have good fit of the GWR model for observed values as these areas have low R2 values. As for the rest of Singapore, the model is able to predict HDB resale prices well."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#gwr-random-forest-predictive-model",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#gwr-random-forest-predictive-model",
    "title": "Take Home Exercise 3",
    "section": "8.4 GWR Random Forest Predictive Model",
    "text": "8.4 GWR Random Forest Predictive Model\nUsing the ranger package Spatial ML, it allows for the computation of geographically weighted models using random forest regression.\n\n8.4.1 Preparing Coordinates Data\n\ncoords_train <- st_coordinates(train)\ncoords_test <- st_coordinates(test)\n\n\ncoords_train <- write_rds(coords_train, \"data/rds/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/rds/coords_test.rds\" )\n\n\nTraining DataTesting Data\n\n\nUsing the grf() function from Spatial ML, compute the GWR random forest model using the adaptive bandwidth derived previously in the GWR regression model. The number of trees is limited to 30 for computational efficiency.\n\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease + PROX_CBD + \n                            PROX_ELDERCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH + PROX_GOOD_PRISCH,\n                     dframe=train_nogeom, \n                     bw=69,\n                     kernel=\"adaptive\",\n                     coords=coords_train,\n                     ntree=30)\n\nWrite and save the gwr adaptive model output into an rds file.\n\nwrite_rds(gwRF_adaptive, \"data/rds/gwRF_adaptive.rds\")\n\n\ngwRF_adaptive <- read_rds(\"data/rds/gwRF_adaptive.rds\")\n\n\n\nTo predict using random forest methods on the test data, use the predict.grf() function below.\n\ntest <- cbind(test, coords_test) %>%\n  st_drop_geometry()\n\n\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\n\nGRF_PRED <- write_rds(gwRF_pred, \"data/rds/GRF_PRED.rds\")\n\n\nGRF_pred <- read_rds(\"data/rds/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n\n\n\n\nInterpreting results of random forest predictive model\n\ntest_data_p <- cbind(test, GRF_pred_df)\n\n\nwrite_rds(test_data_p,\"data/rds/test_data_p.rds\")\n\n\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n\n[1] 56716.64\n\n\n\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n\n\n\n\nThe above graph indicates a good fit of the GWR random forest model as points are distributed along the diagonal line."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Note\n\n\n\nApologies Prof, I was unable to complete the EHSA component of this take home exercise, and am prepared to be appropriately penalised. Thank you."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial",
    "title": "Take-home Exercise 2",
    "section": "4.1 Aspatial",
    "text": "4.1 Aspatial\nFor the purpose of this assignment, data from  Riwayat File Vaksinasi DKI Jakarta  will be used. Daily vaccination data is provided."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial",
    "title": "Take-home Exercise 2",
    "section": "4.2 Geospatial",
    "text": "4.2 Geospatial\nFor the purposes of this study, DKI Jakarta administration boundary 2019 will be used downloaded from Indonesia Geospatial  portal here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-geospatial-data",
    "title": "Take-home Exercise 2",
    "section": "6.1 Importing geospatial data",
    "text": "6.1 Importing geospatial data\nUse the st_read function to import the geospatial data of Jakarta.\n\njakarta <- st_read(dsn=\"data/geospatial\",\n                      layer=\"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\") \n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `/Users/annatrw/annatrw/IS415MAC/Take-home_Ex/Take-home_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#check-for-missing-values",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#check-for-missing-values",
    "title": "Take-home Exercise 2",
    "section": "6.2 Check for missing values",
    "text": "6.2 Check for missing values\nThis step checks for any missing values in the geospatial dataset, with reference to senior - Megan’s - work  here .\n\njakarta[rowSums(is.na(jakarta))!=0,]\n\nSimple feature collection with 2 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.8412 ymin: -6.154036 xmax: 106.8612 ymax: -6.144973\nGeodetic CRS:  WGS 84\n    OBJECT_ID KODE_DESA             DESA   KODE    PROVINSI KAB_KOTA KECAMATAN\n243     25645  31888888     DANAU SUNTER 318888 DKI JAKARTA     <NA>      <NA>\n244     25646  31888888 DANAU SUNTER DLL 318888 DKI JAKARTA     <NA>      <NA>\n    DESA_KELUR JUMLAH_PEN JUMLAH_KK LUAS_WILAY KEPADATAN PERPINDAHA JUMLAH_MEN\n243       <NA>          0         0          0         0          0          0\n244       <NA>          0         0          0         0          0          0\n    PERUBAHAN WAJIB_KTP SILAM KRISTEN KHATOLIK HINDU BUDHA KONGHUCU KEPERCAYAA\n243         0         0     0       0        0     0     0        0          0\n244         0         0     0       0        0     0     0        0          0\n    PRIA WANITA BELUM_KAWI KAWIN CERAI_HIDU CERAI_MATI U0 U5 U10 U15 U20 U25\n243    0      0          0     0          0          0  0  0   0   0   0   0\n244    0      0          0     0          0          0  0  0   0   0   0   0\n    U30 U35 U40 U45 U50 U55 U60 U65 U70 U75 TIDAK_BELU BELUM_TAMA TAMAT_SD SLTP\n243   0   0   0   0   0   0   0   0   0   0          0          0        0    0\n244   0   0   0   0   0   0   0   0   0   0          0          0        0    0\n    SLTA DIPLOMA_I DIPLOMA_II DIPLOMA_IV STRATA_II STRATA_III BELUM_TIDA\n243    0         0          0          0         0          0          0\n244    0         0          0          0         0          0          0\n    APARATUR_P TENAGA_PEN WIRASWASTA PERTANIAN NELAYAN AGAMA_DAN PELAJAR_MA\n243          0          0          0         0       0         0          0\n244          0          0          0         0       0         0          0\n    TENAGA_KES PENSIUNAN LAINNYA GENERATED KODE_DES_1 BELUM_ MENGUR_ PELAJAR_\n243          0         0       0      <NA>       <NA>      0       0        0\n244          0         0       0      <NA>       <NA>      0       0        0\n    PENSIUNA_1 PEGAWAI_ TENTARA KEPOLISIAN PERDAG_ PETANI PETERN_ NELAYAN_1\n243          0        0       0          0       0      0       0         0\n244          0        0       0          0       0      0       0         0\n    INDUSTR_ KONSTR_ TRANSP_ KARYAW_ KARYAW1 KARYAW1_1 KARYAW1_12 BURUH BURUH_\n243        0       0       0       0       0         0          0     0      0\n244        0       0       0       0       0         0          0     0      0\n    BURUH1 BURUH1_1 PEMBANT_ TUKANG TUKANG_1 TUKANG_12 TUKANG__13 TUKANG__14\n243      0        0        0      0        0         0          0          0\n244      0        0        0      0        0         0          0          0\n    TUKANG__15 TUKANG__16 TUKANG__17 PENATA PENATA_ PENATA1_1 MEKANIK SENIMAN_\n243          0          0          0      0       0         0       0        0\n244          0          0          0      0       0         0       0        0\n    TABIB PARAJI_ PERANCA_ PENTER_ IMAM_M PENDETA PASTOR WARTAWAN USTADZ JURU_M\n243     0       0        0       0      0       0      0        0      0      0\n244     0       0        0       0      0       0      0        0      0      0\n    PROMOT ANGGOTA_ ANGGOTA1 ANGGOTA1_1 PRESIDEN WAKIL_PRES ANGGOTA1_2\n243      0        0        0          0        0          0          0\n244      0        0        0          0        0          0          0\n    ANGGOTA1_3 DUTA_B GUBERNUR WAKIL_GUBE BUPATI WAKIL_BUPA WALIKOTA WAKIL_WALI\n243          0      0        0          0      0          0        0          0\n244          0      0        0          0      0          0        0          0\n    ANGGOTA1_4 ANGGOTA1_5 DOSEN GURU PILOT PENGACARA_ NOTARIS ARSITEK AKUNTA_\n243          0          0     0    0     0          0       0       0       0\n244          0          0     0    0     0          0       0       0       0\n    KONSUL_ DOKTER BIDAN PERAWAT APOTEK_ PSIKIATER PENYIA_ PENYIA1 PELAUT\n243       0      0     0       0       0         0       0       0      0\n244       0      0     0       0       0         0       0       0      0\n    PENELITI SOPIR PIALAN PARANORMAL PEDAGA_ PERANG_ KEPALA_ BIARAW_ WIRASWAST_\n243        0     0      0          0       0       0       0       0          0\n244        0     0      0          0       0       0       0       0          0\n    LAINNYA_12 LUAS_DESA KODE_DES_3 DESA_KEL_1 KODE_12\n243          0         0       <NA>       <NA>       0\n244          0         0       <NA>       <NA>       0\n                          geometry\n243 MULTIPOLYGON (((106.8612 -6...\n244 MULTIPOLYGON (((106.8504 -6...\n\n\nWe see that there are null values for KAB_KOTA and KECAMATAN columns for Object_ID 25645 and 25646, and since we are interested in the sub-district level, the following code removes missing values.\n\njakarta <- na.omit(jakarta,c(\"DESA_KELUR\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#transforming-coordinate-sytem",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#transforming-coordinate-sytem",
    "title": "Take-home Exercise 2",
    "section": "6.3 Transforming Coordinate Sytem",
    "text": "6.3 Transforming Coordinate Sytem\nCheck the CRS of the geospatial data using the st_crs() function.\n\nst_crs(jakarta)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nWe see it is projected using EPSG4326.\nWith reference to link , the national coordinate system for Jakarta, Indonesia TM-3 zone 54.1 is EPSG:23845, hence we use st_transform to transform the corrdinate system.\n\njakarta <- st_transform(jakarta, 23845)\n\nUpon checking, coordinate systems have been correctly transformed.\n\nst_crs(jakarta)\n\nCoordinate Reference System:\n  User input: EPSG:23845 \n  wkt:\nPROJCRS[\"DGN95 / Indonesia TM-3 zone 54.1\",\n    BASEGEOGCRS[\"DGN95\",\n        DATUM[\"Datum Geodesi Nasional 1995\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4755]],\n    CONVERSION[\"Indonesia TM-3 zone 54.1\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",139.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",200000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",1500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre.\"],\n        AREA[\"Indonesia - onshore east of 138°E.\"],\n        BBOX[-9.19,138,-1.49,141.01]],\n    ID[\"EPSG\",23845]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#removal-of-outer-islands",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#removal-of-outer-islands",
    "title": "Take-home Exercise 2",
    "section": "6.4 Removal of Outer Islands",
    "text": "6.4 Removal of Outer Islands\nWith reference to senior - Megan’s - work  here , this section will remove the outer islands, leaving the main land of Jakarta.\nFirst, visualise the geospatial data where we observe the outer islands are included in the data.\n\nplot(st_geometry(jakarta))\n\n\n\n\nBy visualising Jakarta on the city level, we observe that the outer islands are labelled with the prefix “KEPULAUAN SERIBU” - meaning ‘Thousand Islands’.\n\ntm_shape(jakarta) + \n  tm_polygons(\"KAB_KOTA\")\n\n\n\n\nTherefore, filtering out the records with the prefix “KEPULAUAN SERIBU” removes the outer islands.\n\njakarta <- filter(jakarta, KAB_KOTA != \"KEPULAUAN SERIBU\")\n\nSuccessfully removed the outer islands, by re-plotting the geospatial data below\n\nplot(st_geometry(jakarta))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#retain-relevant-fields",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#retain-relevant-fields",
    "title": "Take-home Exercise 2",
    "section": "6.5 Retain Relevant fields",
    "text": "6.5 Retain Relevant fields\nAs required, we will only retain the first 9 fields of the DKI Jakarta sf dataframe\n\njakarta <- jakarta[, 0:9]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#translate-column-names",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#translate-column-names",
    "title": "Take-home Exercise 2",
    "section": "6.6 Translate Column names",
    "text": "6.6 Translate Column names\nUsing google translate and dplyr  rename function , rename the columns for easier reference.\n\n\njakarta <- jakarta %>% dplyr::rename(\n                  village_code=KODE_DESA,\n                  village = DESA,\n                  code = KODE,\n                  province= PROVINSI,\n                  city = KAB_KOTA,\n                  district = KECAMATAN,\n                  subdistrict = DESA_KELUR,\n                  total_population = JUMLAH_PEN\n                  )\njakarta\n\nSimple feature collection with 261 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3644275 ymin: 663887.8 xmax: -3606237 ymax: 701380.1\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\nFirst 10 features:\n   OBJECT_ID village_code            village   code    province          city\n1      25477   3173031006          KEAGUNGAN 317303 DKI JAKARTA JAKARTA BARAT\n2      25478   3173031007             GLODOK 317303 DKI JAKARTA JAKARTA BARAT\n3      25397   3171031003      HARAPAN MULIA 317103 DKI JAKARTA JAKARTA PUSAT\n4      25400   3171031006       CEMPAKA BARU 317103 DKI JAKARTA JAKARTA PUSAT\n5      25390   3171021001         PASAR BARU 317102 DKI JAKARTA JAKARTA PUSAT\n6      25391   3171021002       KARANG ANYAR 317102 DKI JAKARTA JAKARTA PUSAT\n7      25394   3171021005 MANGGA DUA SELATAN 317102 DKI JAKARTA JAKARTA PUSAT\n8      25386   3171011003       PETOJO UTARA 317101 DKI JAKARTA JAKARTA PUSAT\n9      25403   3171041001              SENEN 317104 DKI JAKARTA JAKARTA PUSAT\n10     25408   3171041006             BUNGUR 317104 DKI JAKARTA JAKARTA PUSAT\n      district        subdistrict total_population\n1   TAMAN SARI          KEAGUNGAN            21609\n2   TAMAN SARI             GLODOK             9069\n3    KEMAYORAN      HARAPAN MULIA            29085\n4    KEMAYORAN       CEMPAKA BARU            41913\n5  SAWAH BESAR         PASAR BARU            15793\n6  SAWAH BESAR       KARANG ANYAR            33383\n7  SAWAH BESAR MANGGA DUA SELATAN            35906\n8       GAMBIR       PETOJO UTARA            21828\n9        SENEN              SENEN             8643\n10       SENEN             BUNGUR            23001\n                         geometry\n1  MULTIPOLYGON (((-3626874 69...\n2  MULTIPOLYGON (((-3627130 69...\n3  MULTIPOLYGON (((-3621251 68...\n4  MULTIPOLYGON (((-3620608 69...\n5  MULTIPOLYGON (((-3624097 69...\n6  MULTIPOLYGON (((-3624785 69...\n7  MULTIPOLYGON (((-3624752 69...\n8  MULTIPOLYGON (((-3626121 69...\n9  MULTIPOLYGON (((-3623189 69...\n10 MULTIPOLYGON (((-3622451 69..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-aspatial-data",
    "title": "Take-home Exercise 2",
    "section": "7.1 Importing Aspatial Data",
    "text": "7.1 Importing Aspatial Data\nRead the excel file of 27 Feb 2022 to visualise the data.\n\nfeb22 <- read_xlsx(\"data/aspatial/Data Vaksinasi Berbasis Kelurahan (27 Februari 2022).xlsx\")\nhead(feb22)\n\n# A tibble: 6 × 27\n  `KODE KELURAHAN` `WILAYAH KOTA` KECAMATAN   KELURAHAN   SASARAN `BELUM VAKSIN`\n  <chr>            <chr>          <chr>       <chr>         <dbl>          <dbl>\n1 <NA>             <NA>           <NA>        TOTAL       8941211        1517196\n2 3172051003       JAKARTA UTARA  PADEMANGAN  ANCOL         23947           4592\n3 3173041007       JAKARTA BARAT  TAMBORA     ANGKE         29381           5319\n4 3175041005       JAKARTA TIMUR  KRAMAT JATI BALE KAMBA…   29074           5903\n5 3175031003       JAKARTA TIMUR  JATINEGARA  BALI MESTER    9752           1649\n6 3175101006       JAKARTA TIMUR  CIPAYUNG    BAMBU APUS    26285           4030\n# ℹ 21 more variables: `JUMLAH\\r\\nDOSIS 1` <dbl>, `JUMLAH\\r\\nDOSIS 2` <dbl>,\n#   `TOTAL VAKSIN\\r\\nDIBERIKAN` <dbl>, `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>, …\n\n\nThere are a total of 27 columns, with target and yet-to-be vaccinated population shown as total and breakdown of individual age groups.\nWe are interested in the total vaccination numbers, hence we retain the first 6 columns and remove the first row with null values.\n\nfeb22 <- feb22 [-1, 0:6]\n\nAspatial data pre-processing requires the following: 1. Retaining relevant columns and rows 2. Extracting the date from the filepath 3. Reformating of date and organising column names\nHowever, since there are 12 files to iterate through, we can create a function to perform steps 1 and 2."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data-pre-processing-function",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data-pre-processing-function",
    "title": "Take-home Exercise 2",
    "section": "7.2 Aspatial Data Pre-processing Function",
    "text": "7.2 Aspatial Data Pre-processing Function\n\naspatialfunc <- function(filepath){\n  final_file <- read_xlsx(filepath)\n  final_file <- final_file[-1,0:6]\n  \n\n  start = gregexpr(pattern=\"Kelurahan\", filepath)[[1]] + 11\n  end = gregexpr(pattern=\")\", filepath)[[1]] -1\n  final_file$date <- substr(filepath, start, end)\n\n\n  return(final_file)\n}\n\nReferencing senior - Megan’s - work here and using lapply function, aspatial files are fed into the pre-processing function and outputs are stored in the variable dflist.\n\nfileslist <-list.files(path = \"data/aspatial\", pattern = \"*.xlsx\", full.names=TRUE)\n\ndflist <- lapply(seq_along(fileslist), function(x) aspatialfunc(fileslist[x]))\n\nChecking dflist\n\nhead(dflist)\n\n[[1]]\n# A tibble: 267 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN   KELURAHAN SASARAN `BELUM VAKSIN`\n   <chr>            <chr>           <chr>       <chr>       <dbl>          <dbl>\n 1 3172051003       JAKARTA UTARA   PADEMANGAN  ANCOL       23947           4592\n 2 3173041007       JAKARTA BARAT   TAMBORA     ANGKE       29381           5319\n 3 3175041005       JAKARTA TIMUR   KRAMAT JATI BALE KAM…   29074           5903\n 4 3175031003       JAKARTA TIMUR   JATINEGARA  BALI MES…    9752           1649\n 5 3175101006       JAKARTA TIMUR   CIPAYUNG    BAMBU AP…   26285           4030\n 6 3174031002       JAKARTA SELATAN MAMPANG PR… BANGKA      21566           3950\n 7 3175051002       JAKARTA TIMUR   PASAR REBO  BARU        23886           3344\n 8 3175041004       JAKARTA TIMUR   KRAMAT JATI BATU AMP…   47898           9382\n 9 3171071002       JAKARTA PUSAT   TANAH ABANG BENDUNGA…   21494           3772\n10 3175031002       JAKARTA TIMUR   JATINEGARA  BIDARA C…   36689           7530\n# ℹ 257 more rows\n# ℹ 1 more variable: date <chr>\n\n[[2]]\n# A tibble: 267 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN   KELURAHAN SASARAN `BELUM VAKSIN`\n   <chr>            <chr>           <chr>       <chr>       <dbl>          <dbl>\n 1 3172051003       JAKARTA UTARA   PADEMANGAN  ANCOL       23947           4449\n 2 3173041007       JAKARTA BARAT   TAMBORA     ANGKE       29381           5101\n 3 3175041005       JAKARTA TIMUR   KRAMAT JATI BALE KAM…   29074           5699\n 4 3175031003       JAKARTA TIMUR   JATINEGARA  BALI MES…    9752           1598\n 5 3175101006       JAKARTA TIMUR   CIPAYUNG    BAMBU AP…   26285           3857\n 6 3174031002       JAKARTA SELATAN MAMPANG PR… BANGKA      21566           3818\n 7 3175051002       JAKARTA TIMUR   PASAR REBO  BARU        23886           3160\n 8 3175041004       JAKARTA TIMUR   KRAMAT JATI BATU AMP…   47898           9041\n 9 3171071002       JAKARTA PUSAT   TANAH ABANG BENDUNGA…   21494           3627\n10 3175031002       JAKARTA TIMUR   JATINEGARA  BIDARA C…   36689           7172\n# ℹ 257 more rows\n# ℹ 1 more variable: date <chr>\n\n[[3]]\n# A tibble: 267 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN   KELURAHAN SASARAN `BELUM VAKSIN`\n   <chr>            <chr>           <chr>       <chr>       <dbl>          <dbl>\n 1 3172051003       JAKARTA UTARA   PADEMANGAN  ANCOL       23947           4402\n 2 3173041007       JAKARTA BARAT   TAMBORA     ANGKE       29381           5041\n 3 3175041005       JAKARTA TIMUR   KRAMAT JATI BALE KAM…   29074           5632\n 4 3175031003       JAKARTA TIMUR   JATINEGARA  BALI MES…    9752           1576\n 5 3175101006       JAKARTA TIMUR   CIPAYUNG    BAMBU AP…   26285           3791\n 6 3174031002       JAKARTA SELATAN MAMPANG PR… BANGKA      21566           3778\n 7 3175051002       JAKARTA TIMUR   PASAR REBO  BARU        23886           3110\n 8 3175041004       JAKARTA TIMUR   KRAMAT JATI BATU AMP…   47898           8917\n 9 3171071002       JAKARTA PUSAT   TANAH ABANG BENDUNGA…   21494           3580\n10 3175031002       JAKARTA TIMUR   JATINEGARA  BIDARA C…   36689           7071\n# ℹ 257 more rows\n# ℹ 1 more variable: date <chr>\n\n[[4]]\n# A tibble: 267 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN   KELURAHAN SASARAN `BELUM VAKSIN`\n   <chr>            <chr>           <chr>       <chr>       <dbl>          <dbl>\n 1 3172051003       JAKARTA UTARA   PADEMANGAN  ANCOL       23947           5527\n 2 3173041007       JAKARTA BARAT   TAMBORA     ANGKE       29381           5986\n 3 3175041005       JAKARTA TIMUR   KRAMAT JATI BALE KAM…   29074           6802\n 4 3175031003       JAKARTA TIMUR   JATINEGARA  BALI MES…    9752           1920\n 5 3175101006       JAKARTA TIMUR   CIPAYUNG    BAMBU AP…   26285           4612\n 6 3174031002       JAKARTA SELATAN MAMPANG PR… BANGKA      21566           4346\n 7 3175051002       JAKARTA TIMUR   PASAR REBO  BARU        23886           3776\n 8 3175041004       JAKARTA TIMUR   KRAMAT JATI BATU AMP…   47898          10985\n 9 3171071002       JAKARTA PUSAT   TANAH ABANG BENDUNGA…   21494           4187\n10 3175031002       JAKARTA TIMUR   JATINEGARA  BIDARA C…   36689           8447\n# ℹ 257 more rows\n# ℹ 1 more variable: date <chr>\n\n[[5]]\n# A tibble: 267 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN   KELURAHAN SASARAN `BELUM VAKSIN`\n   <chr>            <chr>           <chr>       <chr>       <dbl>          <dbl>\n 1 3172051003       JAKARTA UTARA   PADEMANGAN  ANCOL       23947           6688\n 2 3173041007       JAKARTA BARAT   TAMBORA     ANGKE       29381           7581\n 3 3175041005       JAKARTA TIMUR   KRAMAT JATI BALE KAM…   29074           8708\n 4 3175031003       JAKARTA TIMUR   JATINEGARA  BALI MES…    9752           2517\n 5 3175101006       JAKARTA TIMUR   CIPAYUNG    BAMBU AP…   26285           6252\n 6 3174031002       JAKARTA SELATAN MAMPANG PR… BANGKA      21566           5785\n 7 3175051002       JAKARTA TIMUR   PASAR REBO  BARU        23886           4899\n 8 3175041004       JAKARTA TIMUR   KRAMAT JATI BATU AMP…   47898          14105\n 9 3171071002       JAKARTA PUSAT   TANAH ABANG BENDUNGA…   21494           5239\n10 3175031002       JAKARTA TIMUR   JATINEGARA  BIDARA C…   36689          10626\n# ℹ 257 more rows\n# ℹ 1 more variable: date <chr>\n\n[[6]]\n# A tibble: 267 × 7\n   `KODE KELURAHAN` `WILAYAH KOTA`  KECAMATAN   KELURAHAN SASARAN `BELUM VAKSIN`\n   <chr>            <chr>           <chr>       <chr>       <dbl>          <dbl>\n 1 3172051003       JAKARTA UTARA   PADEMANGAN  ANCOL       23947           9191\n 2 3173041007       JAKARTA BARAT   TAMBORA     ANGKE       29381          10400\n 3 3175041005       JAKARTA TIMUR   KRAMAT JATI BALE KAM…   29074          12510\n 4 3175031003       JAKARTA TIMUR   JATINEGARA  BALI MES…    9752           3704\n 5 3175101006       JAKARTA TIMUR   CIPAYUNG    BAMBU AP…   26285           9416\n 6 3174031002       JAKARTA SELATAN MAMPANG PR… BANGKA      21566           8345\n 7 3175051002       JAKARTA TIMUR   PASAR REBO  BARU        23886           7751\n 8 3175041004       JAKARTA TIMUR   KRAMAT JATI BATU AMP…   47898          19908\n 9 3171071002       JAKARTA PUSAT   TANAH ABANG BENDUNGA…   21494           8033\n10 3175031002       JAKARTA TIMUR   JATINEGARA  BIDARA C…   36689          15563\n# ℹ 257 more rows\n# ℹ 1 more variable: date <chr>\n\n\nThis converts dflist - a list object - into a dataframe.\n\nvacc_jakarta <- ldply(dflist, data.frame)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#formatting-date-column",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#formatting-date-column",
    "title": "Take-home Exercise 2",
    "section": "7.3 Formatting Date Column",
    "text": "7.3 Formatting Date Column\nReferencing senior - Megan’s - work  here , re-formatting of the date column from Bahasa Indonesian to standard datetime format is done using the following references to account for timezone:\n\nhttps://www.rdocumentation.org/packages/base/versions/3.6.2/topics/locales\nhttps://www.rdocumentation.org/packages/base/versions/3.6.2/topics/strptime\n\n\nSys.setlocale(locale=\"ind\")\n\n[1] \"\"\n\n\n\nvacc_jakarta$date <- c(vacc_jakarta$date) %>% \n  as.Date(vacc_jakarta$date, format =\"%d %B %Y\")\n\nglimpse(vacc_jakarta)\n\nRows: 3,204\nColumns: 7\n$ KODE.KELURAHAN <chr> \"3172051003\", \"3173041007\", \"3175041005\", \"3175031003\",…\n$ WILAYAH.KOTA   <chr> \"JAKARTA UTARA\", \"JAKARTA BARAT\", \"JAKARTA TIMUR\", \"JAK…\n$ KECAMATAN      <chr> \"PADEMANGAN\", \"TAMBORA\", \"KRAMAT JATI\", \"JATINEGARA\", \"…\n$ KELURAHAN      <chr> \"ANCOL\", \"ANGKE\", \"BALE KAMBANG\", \"BALI MESTER\", \"BAMBU…\n$ SASARAN        <dbl> 23947, 29381, 29074, 9752, 26285, 21566, 23886, 47898, …\n$ BELUM.VAKSIN   <dbl> 4592, 5319, 5903, 1649, 4030, 3950, 3344, 9382, 3772, 7…\n$ date           <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#rename-columns",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#rename-columns",
    "title": "Take-home Exercise 2",
    "section": "7.4 Rename columns",
    "text": "7.4 Rename columns\nUsing google translate, rename the columns of vacc_jakarta for easy reference.\n\nvacc_jakarta <- vacc_jakarta %>% dplyr::rename(\n                  village_code= KODE.KELURAHAN,\n                  city = WILAYAH.KOTA,\n                  district = KECAMATAN,\n                  subdistrict = KELURAHAN,\n                  target = SASARAN,\n                tobe_vaccinated = BELUM.VAKSIN)\n\nColumns have been successfully renamed:\n\nglimpse(vacc_jakarta)\n\nRows: 3,204\nColumns: 7\n$ village_code    <chr> \"3172051003\", \"3173041007\", \"3175041005\", \"3175031003\"…\n$ city            <chr> \"JAKARTA UTARA\", \"JAKARTA BARAT\", \"JAKARTA TIMUR\", \"JA…\n$ district        <chr> \"PADEMANGAN\", \"TAMBORA\", \"KRAMAT JATI\", \"JATINEGARA\", …\n$ subdistrict     <chr> \"ANCOL\", \"ANGKE\", \"BALE KAMBANG\", \"BALI MESTER\", \"BAMB…\n$ target          <dbl> 23947, 29381, 29074, 9752, 26285, 21566, 23886, 47898,…\n$ tobe_vaccinated <dbl> 4592, 5319, 5903, 1649, 4030, 3950, 3344, 9382, 3772, …\n$ date            <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#vaccinated-population",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#vaccinated-population",
    "title": "Take-home Exercise 2",
    "section": "7.5 Vaccinated population",
    "text": "7.5 Vaccinated population\nIn preparation for calculating vaccination rate, add a new column to store the vaccinated population by subtracting tobe_vaccinated from target population.\n\nvacc_jakarta$vaccinated <- with(vacc_jakarta, target-tobe_vaccinated)\n\n\nglimpse(vacc_jakarta)\n\nRows: 3,204\nColumns: 8\n$ village_code    <chr> \"3172051003\", \"3173041007\", \"3175041005\", \"3175031003\"…\n$ city            <chr> \"JAKARTA UTARA\", \"JAKARTA BARAT\", \"JAKARTA TIMUR\", \"JA…\n$ district        <chr> \"PADEMANGAN\", \"TAMBORA\", \"KRAMAT JATI\", \"JATINEGARA\", …\n$ subdistrict     <chr> \"ANCOL\", \"ANGKE\", \"BALE KAMBANG\", \"BALI MESTER\", \"BAMB…\n$ target          <dbl> 23947, 29381, 29074, 9752, 26285, 21566, 23886, 47898,…\n$ tobe_vaccinated <dbl> 4592, 5319, 5903, 1649, 4030, 3950, 3344, 9382, 3772, …\n$ date            <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ vaccinated      <dbl> 19355, 24062, 23171, 8103, 22255, 17616, 20542, 38516,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#calculate-vaccintation-rate",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#calculate-vaccintation-rate",
    "title": "Take-home Exercise 2",
    "section": "8.1 Calculate Vaccintation Rate",
    "text": "8.1 Calculate Vaccintation Rate\nCreate a new column to store the vaccination rate calculated as shown below:\n\ncombined_jakarta$vacc_rate <- combined_jakarta$vaccinated/combined_jakarta$target*100"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#handling-missing-values-for-subdistricts",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#handling-missing-values-for-subdistricts",
    "title": "Take-home Exercise 2",
    "section": "9.1 Handling Missing Values for Subdistricts",
    "text": "9.1 Handling Missing Values for Subdistricts\nWe check if there is a mismatch between geospatial and aspatial data on the subdistrict level.\n\njakarta_subdistrict <-jakarta$subdistrict\nvacc_subdistrict <- vacc_jakarta$subdistrict\n\nWith reference to this  link , mismatched values can be identified; Returns values in aspatial vacc_jakarta that are not in geospatial jakarta:\n\nunique(vacc_subdistrict[!(vacc_subdistrict %in% jakarta_subdistrict)])\n\n [1] \"BALE KAMBANG\"          \"HALIM PERDANA KUSUMAH\" \"JATI PULO\"            \n [4] \"KAMPUNG TENGAH\"        \"KERENDANG\"             \"KRAMAT JATI\"          \n [7] \"PAL MERIAM\"            \"PINANG RANTI\"          \"PULAU HARAPAN\"        \n[10] \"PULAU KELAPA\"          \"PULAU PANGGANG\"        \"PULAU PARI\"           \n[13] \"PULAU TIDUNG\"          \"PULAU UNTUNG JAWA\"     \"RAWA JATI\"            \n\n\nReturns values in geospatial jakarta that are not in aspatial vacc_jakarta:\n\nunique(jakarta_subdistrict[!(jakarta_subdistrict %in% vacc_subdistrict)])\n\n[1] \"KRENDANG\"             \"RAWAJATI\"             \"TENGAH\"              \n[4] \"BALEKAMBANG\"          \"PINANGRANTI\"          \"JATIPULO\"            \n[7] \"PALMERIAM\"            \"KRAMATJATI\"           \"HALIM PERDANA KUSUMA\"\n\n\nThere are different number of mismatched records (15 and 9 respectively), hence let us check values on coarser level - city.\n\njakarta_city <-jakarta$city\nvacc_city <- vacc_jakarta$city\n\n\nunique(vacc_city[!(vacc_city %in% jakarta_city)])\n\n[1] \"KAB.ADM.KEP.SERIBU\"\n\n\n\nunique(jakarta_city[!(jakarta_city %in% vacc_city)])\n\ncharacter(0)\n\n\nIt is revealed that the aspatial data contains records on Seribu region that is not included in the geospatial data. Upon checking, we see that Seribu includes the outer islands"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#removing-seribu-islands",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#removing-seribu-islands",
    "title": "Take-home Exercise 2",
    "section": "9.2 Removing Seribu Islands",
    "text": "9.2 Removing Seribu Islands\nFilter out records of Seribu islands\n\nvacc_jakarta <- filter(vacc_jakarta, city != \"KAB.ADM.KEP.SERIBU\")\n\nRejoin the new aspatial data - vacc_jakarta:\n\ncombined_jakarta <- left_join(jakarta, vacc_jakarta,\n                              by=c(\"village_code\" = \"village_code\",\n                                   \"district\" = \"district\",\n                                \"subdistrict\"=\"subdistrict\",\n                                \"city\"=\"city\")\n                              )\n\nUpon checking again, both aspatial and geospatial data now have the same number of mismatched subdistricts.\n\njakarta_subdistrict <-jakarta$subdistrict\nvacc_subdistrict <- vacc_jakarta$subdistrict\n\n\nunique(vacc_subdistrict[!(vacc_subdistrict %in% jakarta_subdistrict)])\n\n[1] \"BALE KAMBANG\"          \"HALIM PERDANA KUSUMAH\" \"JATI PULO\"            \n[4] \"KAMPUNG TENGAH\"        \"KERENDANG\"             \"KRAMAT JATI\"          \n[7] \"PAL MERIAM\"            \"PINANG RANTI\"          \"RAWA JATI\"            \n\n\n\nunique(jakarta_subdistrict[!(jakarta_subdistrict %in% vacc_subdistrict)])\n\n[1] \"KRENDANG\"             \"RAWAJATI\"             \"TENGAH\"              \n[4] \"BALEKAMBANG\"          \"PINANGRANTI\"          \"JATIPULO\"            \n[7] \"PALMERIAM\"            \"KRAMATJATI\"           \"HALIM PERDANA KUSUMA\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#re-assignment-of-mismatched-subdistricts",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#re-assignment-of-mismatched-subdistricts",
    "title": "Take-home Exercise 2",
    "section": "9.3 Re-assignment of mismatched subdistricts",
    "text": "9.3 Re-assignment of mismatched subdistricts\nRe-assign the values in geospaital data to match records in aspatial data for the 9 mismatched subdistricts.\n\njakarta$subdistrict[jakarta$subdistrict == 'BALEKAMBANG'] <- 'BALE KAMBANG'\njakarta$subdistrict[jakarta$subdistrict == 'HALIM PERDANA KUSUMA'] <- 'HALIM PERDANA KUSUMAH'\njakarta$subdistrict[jakarta$subdistrict == 'JATIPULO'] <- 'JATI PULO'\njakarta$subdistrict[jakarta$subdistrict == 'TENGAH'] <- 'KAMPUNG TENGAH'\njakarta$subdistrict[jakarta$subdistrict == 'KRENDANG'] <- 'KERENDANG'\njakarta$subdistrict[jakarta$subdistrict == 'KRAMATJATI'] <- 'KRAMAT JATI'\njakarta$subdistrict[jakarta$subdistrict == 'PALMERIAM'] <- 'PAL MERIAM'\njakarta$subdistrict[jakarta$subdistrict == 'PINANGRANTI'] <- 'PINANG RANTI'\njakarta$subdistrict[jakarta$subdistrict == 'RAWAJATI'] <- 'RAWA JATI'\n\nRejoin the data by subdistrict\n\ncombined_jakarta <- left_join(jakarta, vacc_jakarta, by=c( \"subdistrict\"=\"subdistrict\")\n                              )\n\nSuccessfully handled mismatched subdistricts."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#re-organisation-of-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#re-organisation-of-data",
    "title": "Take-home Exercise 2",
    "section": "10.1 Re-organisation of data",
    "text": "10.1 Re-organisation of data\nCalculate vaccination rate with the newly processed data - combined_jakarta\n\ncombined_jakarta$vacc_rate <- combined_jakarta$vaccinated/combined_jakarta$target*100\n\nHere, select the date, subdistrict and vacc_rate columns and save it as a new variable called vaccine_rate. Group by subdistrict and date before pivoting the table for the date to be used as columns with the vaccination rate as values.\n\nvaccine_rate <- combined_jakarta %>% select(8, 15, 18) %>% group_by(subdistrict, date) %>% ungroup() %>% pivot_wider(names_from= \"date\", values_from= \"vacc_rate\")\n\nVisualise the vaccination rate of 31 July 2021 using tmap:\ncode chunk gives error- needs debugging tmap_mode(“plot”) tm_shape(vaccine_rate)+ tm_fill(“2021-07-31”, n= 6, style = “jenks”, title = “Vaccine Rate”) + tm_layout(main.title = “Distribution of vaccination rates in July 2021”, main.title.position = “center”, main.title.size = 1, legend.height = 0.5, legend.width = 0.4, frame = TRUE) + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-a-mapping-function",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-a-mapping-function",
    "title": "Take-home Exercise 2",
    "section": "10.2 Create a Mapping Function",
    "text": "10.2 Create a Mapping Function\nSince there are 12 maps to visualise, create a function that takes in the data and date, and outputs the resultant choropleth map\n\nmonthly_maps <- function(df, varname) {\n  tm_shape(vaccine_rate) +\n    tm_polygons() +\n  tm_shape(df) +\n    tm_fill(varname, \n          style = \"jenks\", \n          title = \"Vaccination Rate\") +\n    tm_layout(main.title = varname,\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.5)\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualise-vaccination-rates-for-2021",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualise-vaccination-rates-for-2021",
    "title": "Take-home Exercise 2",
    "section": "10.3 Visualise Vaccination Rates for 2021",
    "text": "10.3 Visualise Vaccination Rates for 2021\nFeed the data into the mapping function and visualise maps for 2021\ncode chunk gives error- needs debugging tmap_mode(“plot”) tmap_arrange( monthly_maps(vaccine_rate, “2021-07-31”), monthly_maps(vaccine_rate, “2021-08-31”), monthly_maps(vaccine_rate, “2021-09-30”), monthly_maps(vaccine_rate, “2021-10-31”), monthly_maps(vaccine_rate, “2021-11-30”), monthly_maps(vaccine_rate, “2021-12-31”)) —-\n\n10.3.1 Analysis (2021)\nOverall, we see a largely consistent vaccination rate across Jakarta where subdistricts in the West and East have lower vaccination rates - between 78% to 81% - compared to those in the central, North and Southern regions - between 83 to 87%. Vaccination rates have increased for the Southern subdistricts from 44.80 - 49.33% range to 64.45 - 67.28% range in just a month (from July to August 2021), and even up to 88.60% in October. Vaccination rates have also increased for subdistricts in the Northeastern region of Jakarta, from about 53 - 65% in July 2021 to 84 - 88.34% in December 2021."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualise-vaccination-rates-for-2022",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualise-vaccination-rates-for-2022",
    "title": "Take-home Exercise 2",
    "section": "10.4 Visualise Vaccination Rates for 2022",
    "text": "10.4 Visualise Vaccination Rates for 2022\ncode chunk gives error- needs debugging tmap_mode(“plot”) tmap_arrange( monthly_maps(vaccine_rate, “2022-01-31”), monthly_maps(vaccine_rate, “2022-02-27”), monthly_maps(vaccine_rate, “2022-03-31”), monthly_maps(vaccine_rate, “2022-04-30”), monthly_maps(vaccine_rate, “2022-05-31”), monthly_maps(vaccine_rate, “2022-06-30”)) —-\n\n10.4.1 Analysis (2022)\nAn overall trend of the Southern and central regions having higher vaccination rates compared to the extreme Western and Eastern regions. Although subtle, there is a gradual increase in vaccination rates from Janurary 2022 to April 2022. Western regions had a vaccination rate of 76.8% to 82.88 - 84.12%. Consistently high vaccination rates are observed in the Southern regions, maintaining rates in the 85.10 - 89.78% range."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#obtaining-centroids",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#obtaining-centroids",
    "title": "Take-home Exercise 2",
    "section": "11.1 Obtaining Centroids",
    "text": "11.1 Obtaining Centroids\nUsing the map_dbl function from purrr package, associate geospatial points with each polygon for build a connectivity graph. The mapping function achieves this by extracting the longitude and latitude coordinates and storing them as a separate dataframe using st_centroid().\n\nlongitude <- map_dbl(combined_jakarta$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(combined_jakarta$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#determining-cut-off-distance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#determining-cut-off-distance",
    "title": "Take-home Exercise 2",
    "section": "11.2 Determining Cut-off Distance",
    "text": "11.2 Determining Cut-off Distance\nThis will determine the upper threshold for the distance band with the following steps: - Using knearneigh() from spdep package, return a matrix with points that are the k nearest neighbours of each other. - Convert the matrix into a neighbours list if integer vectors using knn2nb() function. - Obtain length of neighbours list using nbdists()\n\n#coords <- coordinates(hunan) --  jakarta \nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#fixed-distance-matrix",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#fixed-distance-matrix",
    "title": "Take-home Exercise 2",
    "section": "11.3 Fixed Distance Matrix",
    "text": "11.3 Fixed Distance Matrix\nObtain the distance weight matrix using <a href=“https://r-spatial.github.io/spdep/reference/dnearneigh.html> dnearneigh()  which identifies neighbours of region points by Euclidean distance between lower and upper bounds.\n\nwm_d62 <- dnearneigh(coords, 0, 0, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 3132 \nNumber of nonzero links: 34452 \nPercentage nonzero weights: 0.3512133 \nAverage number of links: 11 \n\n\nSpatial Weights Object: Convert the neighbours object into spatial weights object needed for computing GI statistics later.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 3132 \nNumber of nonzero links: 34452 \nPercentage nonzero weights: 0.3512133 \nAverage number of links: 11 \nLink number distribution:\n\n  11 \n3132 \n3132 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 with 11 links\n3132 most connected regions:\nwith 11 links\n\nWeights style: B \nWeights constants summary:\n     n      nn    S0    S1      S2\nB 3132 9809424 34452 68904 1515888"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#adaptive-distance-weight-matrix",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#adaptive-distance-weight-matrix",
    "title": "Take-home Exercise 2",
    "section": "11.4 Adaptive Distance Weight Matrix",
    "text": "11.4 Adaptive Distance Weight Matrix\nUsing adaptive distance weight matrix, we can set the number of k nearest neighbours for adaptive distance.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 3132 \nNumber of nonzero links: 25056 \nPercentage nonzero weights: 0.2554278 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nSpatial Weights Object: convert the neighbours list into a spatial weights object\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 3132 \nNumber of nonzero links: 25056 \nPercentage nonzero weights: 0.2554278 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n   8 \n3132 \n3132 least connected regions:\nwith 8 links\n3132 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n     n      nn    S0    S1     S2\nB 3132 9809424 25056 43848 870696"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#fixed-distance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#fixed-distance",
    "title": "Take-home Exercise 2",
    "section": "12.1 Fixed Distance",
    "text": "12.1 Fixed Distance\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe local spatial statistic G is calculated for each zone based on spatial weights object. It returns a Z-value where high positive Z scores indicate greater intensity of clustering while low Z scores indicate similar clusters of low values. The localG() function is used with combined_jakarta sf dataframe and the spatial weights object list.\n\nfips <- order(combined_jakarta$subdistrict)\ngi.fixed <- localG(combined_jakarta$vacc_rate, wm62_lw)\n\n\nhead(gi.fixed, n=10)\n\n [1] 0.2586365 0.2308467 0.2239849 0.3176463 0.5070420 0.8248027 0.2876268\n [8] 0.2634397 1.1811858 0.2449132\n\n\n\n12.1.1 Joining sf data with Gi Values\n\njakarta.gi <- cbind(combined_jakarta, as.matrix(gi.fixed)) %>%\n  dplyr::rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n12.1.2 Mapping Gi Values\nGi stat with spatial weights\n\nvacc_rate_map <- qtm(combined_jakarta, \"vacc_rate\")\n\nGimap_fixed <-tm_shape(jakarta.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Gi Fixed Spatial Weights\")\n\ntmap_arrange(vacc_rate_map, Gimap_fixed, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#adaptive-distance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#adaptive-distance",
    "title": "Take-home Exercise 2",
    "section": "12.2 Adaptive Distance",
    "text": "12.2 Adaptive Distance\n\nfips <- order(combined_jakarta$subdistrict)\ngi.adaptive <- localG(combined_jakarta$vacc_rate, knn_lw)\njakarta.gi <- cbind(combined_jakarta, as.matrix(gi.adaptive)) %>%\n  dplyr::rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-gi-values-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-gi-values-1",
    "title": "Take-home Exercise 2",
    "section": "12.3 Mapping Gi Values",
    "text": "12.3 Mapping Gi Values\n\nvacc_rate_map <- qtm(combined_jakarta, \"vacc_rate\")\n\nGimap_adapt <-tm_shape(jakarta.gi) +\n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Gi Adaptive Spatial Weights\")\n\ntmap_arrange(vacc_rate_map, Gimap_adapt, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#analysis-of-gi-values",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#analysis-of-gi-values",
    "title": "Take-home Exercise 2",
    "section": "12.4 Analysis of Gi Values",
    "text": "12.4 Analysis of Gi Values\n\ntmap_arrange(Gimap_fixed, Gimap_adapt, asp=1 , ncol=2)\n\n\n\n\nFor both local Gi fixed and adaptive spatial weights, the subdistrict with the highest Gi value of 2 to 3 is Halim Perdana Kusumah located in East Jakarta from the code block below.\n\njakarta.gi$subdistrict[which.max(jakarta.gi$gstat_adaptive)]\n\n[1] \"HALIM PERDANA KUSUMAH\"\n\n\nThis indicates there is spatial clustering of high vaccination rates surrounding the subdistrict of Halim Perdana Kusumah; indicating it as a hot spot.\nReferencing  this  source on modeling spatial relationships, using the fixed distance band is more appropriate when there is large variation in polygon size. Jakarta has large polygons on the edge and small polygons at the center, hence using fixed distance spatial weights will ensure consistent scale of analysis.\nHence, focusing on analysis of fixed distance spatial weights, the subdistrict of Kebon Melati in central Jakarta has the lowest Gi value in the range of -3 to -2.\n\njakarta.gi$subdistrict[which.min(jakarta.gi$gstat_adaptive)]\n\n[1] \"KEBON MELATI\"\n\n\nThis indicates Kebon Melati is a cold spot, where surrounding subdistricts have low vaccination rates and are clustered together.\nMajority of subdistricts in Western Jakarta are in the -1 to 0 Gi value range, indicating that there is slight clustering of subdistricts with low vaccination rates. Similarly, subdistricts in Northeast and Southern Jakarta have 0 to 1 Gi value, indicating slight clustering of subdistricts with high vaccination rates."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In-class_Ex11.html",
    "href": "In-class_Ex/In-class_Ex11/In-class_Ex11.html",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "",
    "text": "New package:  SpatialAcc \n\npacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse, fca)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#update-crs-information",
    "href": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#update-crs-information",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "3.1 Update CRS Information",
    "text": "3.1 Update CRS Information\n\nmpsz <- st_transform(mpsz, 3414)\nhezagons <- st_transform(hexagons, 3414)\neldercare <- st_transform(eldercare, 3414)\n\n\nThis st_transform step is not a major requirement since original projections are in SVY21 which is still valid. But transforming to EPSG3414 is the conventionally used CRS\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#cleaning-up-data",
    "href": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#cleaning-up-data",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "3.2 Cleaning Up Data",
    "text": "3.2 Cleaning Up Data\nRetain necessary fields from the eldercare and hexagon data\n\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  rename(destination_id = fid, \n         postal_code = ADDRESSPOS) %>%\n  mutate(capacity = 100)\n\n\nselect fid and ADDRESSPOS to retain\nrename destination id to fid and postal code to ADDRESSPOS\nassign a value of 100 to all rows in capacity field\n\n\nhexagons <- hexagons %>%\n  select(fid) %>%\n  rename(origin_fid = fid) %>% \n  mutate(demand = 100)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#importing-distance-matrix-optional",
    "href": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#importing-distance-matrix-optional",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "4.1 Importing Distance Matrix (optional)",
    "text": "4.1 Importing Distance Matrix (optional)\n\neldercare_coord <- st_coordinates(eldercare)\nhexagons_coord <- st_coordinates(hexagons)\n\n\nEucMatrix <- SpatialAcc::distance(hexagons_coord,\n                                  eldercare_coord,\n                                  type = \"euclidean\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#visualising-model-output",
    "href": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#visualising-model-output",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "5.1 Visualising Model Output",
    "text": "5.1 Visualising Model Output\n\nmapex <- st_bbox(hexagons)\n\n\nallowing the map extent to encompass the whole study area Singapore\n\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n\n\n\n\n\nbbox = map extent derived previously\nAccessibility"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#statistical-graphic-visualisation",
    "href": "In-class_Ex/In-class_Ex11/In-class_Ex11.html#statistical-graphic-visualisation",
    "title": "In-class Exercise 11: Modelling Geographical Accessibility",
    "section": "5.2 Statistical Graphic Visualisation",
    "text": "5.2 Statistical Graphic Visualisation\n\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n\n\nggplot(data=hexagon_Hansen, \n       aes(y = log(accHansen), \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)\n\n\n\n\n\nlog transformation of hansen values to have better visibility (if no log transform, box plots will be flat and hard to see the proper distribution of values)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/data/geospatial/ELDERCARE.html",
    "href": "In-class_Ex/In-class_Ex11/data/geospatial/ELDERCARE.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/data/geospatial/hexagons.html",
    "href": "In-class_Ex/In-class_Ex11/data/geospatial/hexagons.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In-class_Ex10.html",
    "href": "In-class_Ex/In-class_Ex10/In-class_Ex10.html",
    "title": "In-class Exercise 10: Spatial Interaction Models",
    "section": "",
    "text": "population data - singstat: Singapore residents by planning area; subzone, single year of age june 2022 (raw)\npopulation by age - prof/ data categorised by age group (calculated using the same method as in class exercise 2) bus stop - LTA datamall\nmasterplan 2019 - URA data.gov.sg\n\n\npacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)\n\n\ncaret: ML library to assess model performance\nstplanr: spatial library\nreshape2 , broom: for handling of attribute data"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/In-class_Ex10.html#bring-in-population-data",
    "href": "In-class_Ex/In-class_Ex10/In-class_Ex10.html#bring-in-population-data",
    "title": "In-class Exercise 10: Spatial Interaction Models",
    "section": "4.1 Bring in population data",
    "text": "4.1 Bring in population data\n\npop <- read_csv(\"data/aspatial/pop.csv\")\n\n\npop <- pop %>%\n  left_join(mpsz, \n            by = c(\"PA\"=\"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %>%\n  select(1:6) %>%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\nleft join pop and mpsz to get SUBZONE code since flow_data only has subzone code\n\n\nflow_data1 <- flow_data %>%\n  left_join(distPair, \n            by = c(\"ORIGIN_SZ\"=\"orig\",\n                   \"DESTIN_SZ\" = \"dest\"))\n\n\nincluding the distance information into flow_data\nrename origin and destination fields\n\n\nflow_data1 <- flow_data1 %>% \n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %>%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n\n\njoin pop with flow_data for origin fields\nmapped with origin subzone fields\n\n\nflow_data1 <- flow_data1 %>% \n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %>%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n\n\njoin pop with flow_data for destination fields"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex10/data/geospatial/MPSZ-2019.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "",
    "text": "Installing and loading packages\n\npacman::p_load(tidyverse, sf, tmap)\n\nImporting data\n\n\n\n\n\n\nNote\n\n\n\nImport NGP_wp.rds created in In-class Exercise 2\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-map-of-functional-water-points",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-map-of-functional-water-points",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "2.1 Choropleth map of functional water points",
    "text": "2.1 Choropleth map of functional water points\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\", n = 10,\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_borders(lwd = 0.1,\n             alpha=1) +\n  tm_layout(main.title = \"Distribution of functional water points by LGA\", legend.outside=FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-of-total-water-points",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#choropleth-of-total-water-points",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "2.2 Choropleth of total water points",
    "text": "2.2 Choropleth of total water points\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\", n = 10,\n          style = \"equal\",\n          palette = \"Blues\")+\n  tm_borders(lwd = 0.1,\n             alpha=1) +\n  tm_layout(main.title = \"Total water points by LGA\", legend.outside=FALSE)\n\n\ntmap_arrange(p2, p1, nrow=1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "3.1 Plotting",
    "text": "3.1 Plotting\n\ntm_shape(NGA_wp)+\n  tm_fill(\"pct_functional\",\n          n=10,\n          style=\"equal\",\n          palette=\"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd=0.1,\n             alpha=1)+\n  tm_layout(main.title=\"Rate map of functional water points\", \n            legend.outside = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.1 Percentile Map",
    "text": "4.1 Percentile Map\n\n4.1.1 Data preparation\nStep 1: Removing NA values\n\nNGA_wp <- NGA_wp %>% drop_na()\n\nStep 2: Customised classification and extracting values\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n4.1.2 Functions\nMapping functions that simplify the mapping process and reduces the likelihood of mistakes\n\n\n4.1.3 get.var function\nExtracts a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\ninputs:\n\nvname: variable name\ndf: name of the sf data frame\n\noutput:\n\nv: a vector with values\n\n\n\nget.var <- function(vname,df){\n  v<- df[vname] %>%\n    st_set_geometry(NULL)\n  v<- unname(v[,1])\n  return(v)\n}\n\n\n\n4.1.4 Percentile function\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n4.1.5 Running or Calling the function\n\npercentmap(\"total_wp\", NGA_wp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.2 Box Map",
    "text": "4.2 Box Map\nUses custom breaks specifications which depend on lower or upper outliers.\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxbreak-function",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxbreak-function",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.3 Boxbreak function",
    "text": "4.3 Boxbreak function\nSimilarly, functions can be created for custom boxbreaks\n\ninputs:\n\nv: vector with observations\nmult: multiplier for IQR\n\noutput:\n\nbb: vector with 7 break points that compute quantile and fence\n\n\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#get.var-function-1",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#get.var-function-1",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.4 get.var function",
    "text": "4.4 get.var function\n\ninputs:\n\nvname: variable name (as character in quotes)\ndf: name of the sf data frame\n\noutput:\n\nv: a vector with values (without column name)\n\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#running-the-newly-created-function",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#running-the-newly-created-function",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.5 Running the newly created function",
    "text": "4.5 Running the newly created function\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxmap-function",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#boxmap-function",
    "title": "In-class Exercise 3: Anaytical Mapping",
    "section": "4.6 Boxmap function",
    "text": "4.6 Boxmap function\n\narguments:\n\nvnam: variable name\ndf: simple feature polygon layer\nlegtitle: legend title\nmtitle: map title\nmult: multiplier for IQR\n\noutput: tmap element that plots the map\n\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\nare the childcare centres in Singapore randomly distributed throughout the country? if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-sf-data-to-sp-spatial-class",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-sf-data-to-sp-spatial-class",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.1 Convert sf data to sp Spatial class",
    "text": "4.1 Convert sf data to sp Spatial class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Name,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Description \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-spatial-class-into-generic-sp-format",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-spatial-class-into-generic-sp-format",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.2 Convert Spatial class into generic sp format",
    "text": "4.2 Convert Spatial class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-generic-sp-format-to-spatstats-ppp-format",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#convert-generic-sp-format-to-spatstats-ppp-format",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.3 Convert generic sp format to spatstat’s ppp format",
    "text": "4.3 Convert generic sp format to spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#duplicate-points",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#duplicate-points",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.4 Duplicate points",
    "text": "4.4 Duplicate points\nCheck for presence of duplicate points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nCount the number of co-incidence points\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nCompute the number of locations with more than 1 point event\n\nsum(multiplicity(childcare_ppp) >1)\n\n[1] 128\n\n\nManaging duplicates by jittering approach\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-owin-object",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#creating-owin-object",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.5 Creating owin object",
    "text": "4.5 Creating owin object\nIn spatstat, owin objects are used to represent polygonal region (Singapore boundary). This helps explicitly define the required specific study area to prevent randomised points from falling out of the study area.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#combining-point-features-and-owin-objects",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#combining-point-features-and-owin-objects",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "4.6 Combining point features and owin objects",
    "text": "4.6 Combining point features and owin objects\nExtract the childcare points located within Singapore\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\nExtracting target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConvert Spatial Polygon Dataframe layers into generic spatial polygon layers\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nConvert spatial polygon objects into owin objects required by spatstat\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nChange the unit of measurement from metre to kilometre\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot showing the 4 study areas and childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-g-function",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-g-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "5.1 Analysing Spatial Point Process using G-Function",
    "text": "5.1 Analysing Spatial Point Process using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.1.1 Choa Chu Kang planning area\nG function estimation\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Choa Chu Kang are randomly distributed\nH1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with G function\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n5.1.2 Tampines planning area\nG function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Tampines are randomly distributed\nH1 = The distribution of childcare services at Tampines are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with G function\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction=\"all\",nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-f-function",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-process-using-f-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "5.2 Analysing Spatial Point Process using f-Function",
    "text": "5.2 Analysing Spatial Point Process using f-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.2.1 Choa Chu Kang planning area\nF function estimation\n\nF_CK =Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Choa Chu Kang are randomly distributed\nH1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with F function\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n5.2.2 Tampines planning area\nF function estimation\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\nComplete Spatial Randomness test\nH0 (null hypothesis) = The distribution of childcare services at Tampines are randomly distributed\nH1 = The distribution of childcare services at Tampines are not randomly distributed\nReject the null hypothesis if the p-value is smaller than the alpha value of 0.001.\nMonte Carlo test with F function\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-using-k-function",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#analysing-spatial-point-using-k-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Pattern Analysis Methods",
    "section": "5.3 Analysing Spatial Point using K function",
    "text": "5.3 Analysing Spatial Point using K function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.3.1 Choa Chu Kang planning area\nk function estimation\n\n\n\n\n\n\n\n\n\n\n\n5.3.2 Tampines planning area"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5: Local Colocation Quotient Analysis",
    "section": "",
    "text": "2 Installing and loading R packages\nsfdep package allows us to perform colocation methods\n\npacman::p_load(sf, tmap, tidyverse, sfdep)\n\n\nstudyArea <- st_read(dsn=\"data\",\n                     layer=\"study_area\") %>% st_transform(crs=3829)\n\nReading layer `study_area' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex05/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn=\"data\",\n                     layer=\"stores\") %>% st_transform(crs=3829)\n\nReading layer `stores' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex05/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n[reference this for take home 1] [always plot polygon then points so points will not be blocked by polygon] [plotting functional and non-functional water point]\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(stores) +\n  tm_dots(col = \"Name\", \n          size = 0.01,\n          border.col=\"black\",\n          border.lwd=0.5  )\n\n\n\n\n\ntm_view(set.zoom.limits = c(12,16))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1] 12 16\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n\n\nSearching for the 6 nearest neighbours (using adaptive kernel density method) - choosing 6 nearest since the target point is included in function as well (total 7 and will not get an even split)\n\nnb <- include_self(st_knn(st_geometry(stores), 6))\n\n\nwt <- st_kernel_weights(nb, stores, \"gaussian\", adaptive=TRUE)\n\nFiltering out stores that are family marts and convert into a dataframe, before saving into a variable A\n\nFamilyMart <- stores %>% filter(Name==\"Family Mart\")\nA <-FamilyMart$Name\n\n\nSevenEleven <- stores %>% filter(Name==\"7-Eleven\")\nB <-SevenEleven$Name\n\nA is target, B is neighbour category at 50 simulations outputs the p value directly\n\nLCLQ <- local_colocation(A,B,nb,wt,49)\n\n\nLCLQ_stores <- cbind(stores,LCLQ)\n\n\ncannot do relational join on LCLQ and LCLQ_stores since there is no unique identifier of LCLQ\nusing cbind function only works if you do not sort the original input data\ncbind inherits the properties of the first parameter\n\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(LCLQ_stores) +\n  tm_dots(col = \"X7.Eleven\",\n          size = 0.01,\n          border.col=\"black\",\n          border.lwd=0.5  )\n\n\n\n\n\ntm_view(set.zoom.limits = c(12,16))\n\n$tm_layout\n$tm_layout$set.zoom.limits\n[1] 12 16\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "href": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/stores.html",
    "href": "In-class_Ex/In-class_Ex05/data/stores.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#installing-appropriate-r-packages",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#installing-appropriate-r-packages",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.1 Installing appropriate R packages",
    "text": "2.1 Installing appropriate R packages\n\n\nShow the code\npacman::p_load(sf, tidyverse,funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-geoboundaries-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-geoboundaries-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.2 Importing geoboundaries data",
    "text": "2.2 Importing geoboundaries data\n\ngeoNGA <- st_read(\"data/geospatial/\", layer=\"geoBoundaries-NGA-ADM2\")  %>% st_transform(crs= 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-nga-data-set",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-nga-data-set",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.3 Importing NGA data set",
    "text": "2.3 Importing NGA data set\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.4 Importing aspatial data",
    "text": "2.4 Importing aspatial data\nWaterpoint data from Humanitarian website\n\n\nShow the code\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\n\n2.4.1 Converting data from aspatial to geospatial\nConverts aspatial data into a simple feature object because aspatial data does not have geospatial information although latitude and londitude columns are present in the dataset. The function st_as_sfc() converts the selected column into a tibble data frame.\n\n\nShow the code\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n\n# A tibble: 95,008 × 71\n   row_id `#source`            `#lat_deg` `#lon_deg` `#report_date` `#status_id`\n    <dbl> <chr>                     <dbl>      <dbl> <chr>          <chr>       \n 1 429068 GRID3                      7.98       5.12 08/29/2018 12… Unknown     \n 2 222071 Federal Ministry of…       6.96       3.60 08/16/2015 12… Yes         \n 3 160612 WaterAid                   6.49       7.93 12/04/2020 12… Yes         \n 4 160669 WaterAid                   6.73       7.65 12/04/2020 12… Yes         \n 5 160642 WaterAid                   6.78       7.66 12/04/2020 12… Yes         \n 6 160628 WaterAid                   6.96       7.78 12/04/2020 12… Yes         \n 7 160632 WaterAid                   7.02       7.84 12/04/2020 12… Yes         \n 8 642747 Living Water Intern…       7.33       8.98 10/03/2016 12… Yes         \n 9 642456 Living Water Intern…       7.17       9.11 10/03/2016 12… Yes         \n10 641347 Living Water Intern…       7.20       9.22 03/28/2015 12… Yes         \n# ℹ 94,998 more rows\n# ℹ 65 more variables: `#water_source_clean` <chr>,\n#   `#water_source_category` <chr>, `#water_tech_clean` <chr>,\n#   `#water_tech_category` <chr>, `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>, …\n\n\n\n\n2.4.2 Converts tibble data frame into sf object with the function st_sf()\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf <- wp_sf %>% st_transform(crs=26392)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#geospatial-data-cleaning",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#geospatial-data-cleaning",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.5 Geospatial data cleaning",
    "text": "2.5 Geospatial data cleaning\nRemoving redundant fields using dplyr select()\n\nNGA <- NGA %>% select (c(3:4,8:9))\n\nChecking for duplicate name using Base R duplicated()\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nThe above code shows the duplicated fields with the same name from different states (ADM1_PCODE).\nTo fix the duplicated values, replace the duplicated rows with\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nrename() is used to rename the column from #status_clean to status_clean (removing the hash icon)\nselect() is used to include status_clean in the outputs of sf data frame\nmutate() and replace_na() replaces the NA values in status_clean field into ‘unknown’\n\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(status_clean, \"unknown\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "title": "In-class Exercise 2: Geospatial Data Wrangling",
    "section": "2.6 Extracting water point data",
    "text": "2.6 Extracting water point data\nFunctional water point data\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in% \n  c(\"Functional\", \"Functional but not in use\", \"Functional but needs repair\"))\n\nNon-functional water point data\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in% \n  c(\"Abandoned/Decommissioned\", \"Abandoned\", \"Non-Functional due to dry season\", \"Non-Functional\",\"Non functional due to dry season\"))\n\n\nwp_unkown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nFinding water points that fall within each LGA length() used to calculate number of water points\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(st_intersects(NGA, wp_unkown)))\n\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")\n\nUsing ggplot2 to visualise distribution of water points.\n\nggplot(data = NGA_wp, aes(x=total_wp)) + geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(total_wp, na.rm=T)), color=\"red\", linetype=\"dashed\", size = 0.8 ) +\n  ggtitle(\"Distribution of total water points by LGA\") + \n  xlab(\"No. of water points\") +\n  ylab (\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle=0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "title": "In-class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "2 Prepaing the Data\n\nmdata <- read_rds(\"data/aspatial/mdata.rds\")\n\n\n\nset.seed(1234)\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\n\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n\n\n\n3 Computing Correlation Matrix\n\nmdata_nogeo <- mdata %>% \n  st_drop_geometry()\ncorrplot::corrplot\n\nfunction (corr, method = c(\"circle\", \"square\", \"ellipse\", \"number\", \n    \"shade\", \"color\", \"pie\"), type = c(\"full\", \"lower\", \"upper\"), \n    col = NULL, col.lim = NULL, bg = \"white\", title = \"\", is.corr = TRUE, \n    add = FALSE, diag = TRUE, outline = FALSE, mar = c(0, 0, \n        0, 0), addgrid.col = NULL, addCoef.col = NULL, addCoefasPercent = FALSE, \n    order = c(\"original\", \"AOE\", \"FPC\", \"hclust\", \"alphabet\"), \n    hclust.method = c(\"complete\", \"ward\", \"ward.D\", \"ward.D2\", \n        \"single\", \"average\", \"mcquitty\", \"median\", \"centroid\"), \n    addrect = NULL, rect.col = \"black\", rect.lwd = 2, tl.pos = NULL, \n    tl.cex = 1, tl.col = \"red\", tl.offset = 0.4, tl.srt = 90, \n    cl.pos = NULL, cl.length = NULL, cl.cex = 0.8, cl.ratio = 0.15, \n    cl.align.text = \"c\", cl.offset = 0.5, number.cex = 1, number.font = 2, \n    number.digits = NULL, addshade = c(\"negative\", \"positive\", \n        \"all\"), shade.lwd = 1, shade.col = \"white\", p.mat = NULL, \n    sig.level = 0.05, insig = c(\"pch\", \"p-value\", \"blank\", \"n\", \n        \"label_sig\"), pch = 4, pch.col = \"black\", pch.cex = 3, \n    plotCI = c(\"n\", \"square\", \"circle\", \"rect\"), lowCI.mat = NULL, \n    uppCI.mat = NULL, na.label = \"?\", na.label.col = \"black\", \n    win.asp = 1, ...) \n{\n    method = match.arg(method)\n    type = match.arg(type)\n    order = match.arg(order)\n    hclust.method = match.arg(hclust.method)\n    addshade = match.arg(addshade)\n    insig = match.arg(insig)\n    plotCI = match.arg(plotCI)\n    if (win.asp != 1 && !(method %in% c(\"circle\", \"square\"))) {\n        stop(\"Parameter 'win.asp' is supported only for circle and square methods.\")\n    }\n    asp_rescale_factor = min(1, win.asp)/max(1, win.asp)\n    stopifnot(asp_rescale_factor >= 0 && asp_rescale_factor <= \n        1)\n    if (!is.matrix(corr) && !is.data.frame(corr)) {\n        stop(\"Need a matrix or data frame!\")\n    }\n    if (is.null(addgrid.col)) {\n        addgrid.col = switch(method, color = NA, shade = NA, \n            \"grey\")\n    }\n    if (any(corr[!is.na(corr)] < col.lim[1]) || any(corr[!is.na(corr)] > \n        col.lim[2])) {\n        stop(\"color limits should cover matrix\")\n    }\n    if (is.null(col.lim)) {\n        if (is.corr) {\n            col.lim = c(-1, 1)\n        }\n        else {\n            if (!diag) {\n                diag(corr) = NA\n            }\n            col.lim = c(min(corr, na.rm = TRUE), max(corr, na.rm = TRUE))\n        }\n    }\n    SpecialCorr = 0\n    if (is.corr) {\n        if (min(corr, na.rm = TRUE) < -1 - .Machine$double.eps^0.75 || \n            max(corr, na.rm = TRUE) > 1 + .Machine$double.eps^0.75) {\n            stop(\"The matrix is not in [-1, 1]!\")\n        }\n        SpecialCorr = 1\n        if (col.lim[1] < -1 | col.lim[2] > 1) {\n            stop(\"col.lim should be within the interval [-1, 1]\")\n        }\n    }\n    intercept = 0\n    zoom = 1\n    if (!is.corr) {\n        c_max = max(corr, na.rm = TRUE)\n        c_min = min(corr, na.rm = TRUE)\n        if ((col.lim[1] > c_min) | (col.lim[2] < c_max)) {\n            stop(\"Wrong color: matrix should be in col.lim interval!\")\n        }\n        if (diff(col.lim)/(c_max - c_min) > 2) {\n            warning(\"col.lim interval too wide, please set a suitable value\")\n        }\n        if (c_max <= 0 | c_min >= 0) {\n            intercept = -col.lim[1]\n            zoom = 1/(diff(col.lim))\n            if (col.lim[1] * col.lim[2] < 0) {\n                warning(\"col.lim interval not suitable to the matrix\")\n            }\n        }\n        else {\n            stopifnot(c_max * c_min < 0)\n            stopifnot(c_min < 0 && c_max > 0)\n            intercept = 0\n            zoom = 1/max(abs(col.lim))\n            SpecialCorr = 1\n        }\n        corr = (intercept + corr) * zoom\n    }\n    col.lim2 = (intercept + col.lim) * zoom\n    int = intercept * zoom\n    if (is.null(col) & is.corr) {\n        col = COL2(\"RdBu\", 200)\n    }\n    if (is.null(col) & !is.corr) {\n        if (col.lim[1] * col.lim[2] < 0) {\n            col = COL2(\"RdBu\", 200)\n        }\n        else {\n            col = COL1(\"YlOrBr\", 200)\n        }\n    }\n    n = nrow(corr)\n    m = ncol(corr)\n    min.nm = min(n, m)\n    ord = 1:min.nm\n    if (order != \"original\") {\n        ord = corrMatOrder(corr, order = order, hclust.method = hclust.method)\n        corr = corr[ord, ord]\n    }\n    if (is.null(rownames(corr))) {\n        rownames(corr) = 1:n\n    }\n    if (is.null(colnames(corr))) {\n        colnames(corr) = 1:m\n    }\n    apply_mat_filter = function(mat) {\n        x = matrix(1:n * m, nrow = n, ncol = m)\n        switch(type, upper = mat[row(x) > col(x)] <- Inf, lower = mat[row(x) < \n            col(x)] <- Inf)\n        if (!diag) {\n            diag(mat) = Inf\n        }\n        return(mat)\n    }\n    getPos.Dat = function(mat) {\n        tmp = apply_mat_filter(mat)\n        Dat = tmp[is.finite(tmp)]\n        ind = which(is.finite(tmp), arr.ind = TRUE)\n        Pos = ind\n        Pos[, 1] = ind[, 2]\n        Pos[, 2] = -ind[, 1] + 1 + n\n        PosName = ind\n        PosName[, 1] = colnames(mat)[ind[, 2]]\n        PosName[, 2] = rownames(mat)[ind[, 1]]\n        return(list(Pos, Dat, PosName))\n    }\n    getPos.NAs = function(mat) {\n        tmp = apply_mat_filter(mat)\n        ind = which(is.na(tmp), arr.ind = TRUE)\n        Pos = ind\n        Pos[, 1] = ind[, 2]\n        Pos[, 2] = -ind[, 1] + 1 + n\n        return(Pos)\n    }\n    testTemp = getPos.Dat(corr)\n    Pos = getPos.Dat(corr)[[1]]\n    PosName = getPos.Dat(corr)[[3]]\n    if (any(is.na(corr)) && is.character(na.label)) {\n        PosNA = getPos.NAs(corr)\n    }\n    else {\n        PosNA = NULL\n    }\n    AllCoords = rbind(Pos, PosNA)\n    n2 = max(AllCoords[, 2])\n    n1 = min(AllCoords[, 2])\n    nn = n2 - n1\n    m2 = max(AllCoords[, 1])\n    m1 = min(AllCoords[, 1])\n    mm = max(1, m2 - m1)\n    expand_expression = function(s) {\n        ifelse(grepl(\"^[:=$]\", s), parse(text = substring(s, \n            2)), s)\n    }\n    newrownames = sapply(rownames(corr)[(n + 1 - n2):(n + 1 - \n        n1)], expand_expression)\n    newcolnames = sapply(colnames(corr)[m1:m2], expand_expression)\n    DAT = getPos.Dat(corr)[[2]]\n    len.DAT = length(DAT)\n    rm(expand_expression)\n    assign.color = function(dat = DAT, color = col, isSpecialCorr = SpecialCorr) {\n        if (isSpecialCorr) {\n            newcorr = (dat + 1)/2\n        }\n        else {\n            newcorr = dat\n        }\n        newcorr[newcorr <= 0] = 0\n        newcorr[newcorr >= 1] = 1 - 1e-16\n        color[floor(newcorr * length(color)) + 1]\n    }\n    col.fill = assign.color()\n    isFALSE = function(x) identical(x, FALSE)\n    isTRUE = function(x) identical(x, TRUE)\n    if (isFALSE(tl.pos)) {\n        tl.pos = \"n\"\n    }\n    if (is.null(tl.pos) || isTRUE(tl.pos)) {\n        tl.pos = switch(type, full = \"lt\", lower = \"ld\", upper = \"td\")\n    }\n    if (isFALSE(cl.pos)) {\n        cl.pos = \"n\"\n    }\n    if (is.null(cl.pos) || isTRUE(cl.pos)) {\n        cl.pos = switch(type, full = \"r\", lower = \"b\", upper = \"r\")\n    }\n    if (isFALSE(outline)) {\n        col.border = col.fill\n    }\n    else if (isTRUE(outline)) {\n        col.border = \"black\"\n    }\n    else if (is.character(outline)) {\n        col.border = outline\n    }\n    else {\n        stop(\"Unsupported value type for parameter outline\")\n    }\n    oldpar = par(mar = mar, bg = par()$bg)\n    on.exit(par(oldpar), add = TRUE)\n    if (!add) {\n        plot.new()\n        xlabwidth = max(strwidth(newrownames, cex = tl.cex))\n        ylabwidth = max(strwidth(newcolnames, cex = tl.cex))\n        laboffset = strwidth(\"W\", cex = tl.cex) * tl.offset\n        for (i in 1:50) {\n            xlim = c(m1 - 0.5 - laboffset - xlabwidth * (grepl(\"l\", \n                tl.pos) | grepl(\"d\", tl.pos)), m2 + 0.5 + mm * \n                cl.ratio * (cl.pos == \"r\") + xlabwidth * abs(cos(tl.srt * \n                pi/180)) * grepl(\"d\", tl.pos))\n            ylim = c(n1 - 0.5 - nn * cl.ratio * (cl.pos == \"b\") - \n                laboffset, n2 + 0.5 + laboffset + ylabwidth * \n                abs(sin(tl.srt * pi/180)) * grepl(\"t\", tl.pos) + \n                ylabwidth * abs(sin(tl.srt * pi/180)) * (type == \n                  \"lower\") * grepl(\"d\", tl.pos))\n            plot.window(xlim, ylim, asp = 1, xaxs = \"i\", yaxs = \"i\")\n            x.tmp = max(strwidth(newrownames, cex = tl.cex))\n            y.tmp = max(strwidth(newcolnames, cex = tl.cex))\n            laboffset.tmp = strwidth(\"W\", cex = tl.cex) * tl.offset\n            if (max(x.tmp - xlabwidth, y.tmp - ylabwidth, laboffset.tmp - \n                laboffset) < 0.001) {\n                break\n            }\n            xlabwidth = x.tmp\n            ylabwidth = y.tmp\n            laboffset = laboffset.tmp\n            if (i == 50) {\n                warning(c(\"Not been able to calculate text margin, \", \n                  \"please try again with a clean new empty window using \", \n                  \"{plot.new(); dev.off()} or reduce tl.cex\"))\n            }\n        }\n        if (.Platform$OS.type == \"windows\") {\n            grDevices::windows.options(width = 7, height = 7 * \n                diff(ylim)/diff(xlim))\n        }\n        xlim = xlim + diff(xlim) * 0.01 * c(-1, 1)\n        ylim = ylim + diff(ylim) * 0.01 * c(-1, 1)\n        plot.window(xlim = xlim, ylim = ylim, asp = win.asp, \n            xlab = \"\", ylab = \"\", xaxs = \"i\", yaxs = \"i\")\n    }\n    laboffset = strwidth(\"W\", cex = tl.cex) * tl.offset\n    symbols(Pos, add = TRUE, inches = FALSE, rectangles = matrix(1, \n        len.DAT, 2), bg = bg, fg = bg)\n    if (method == \"circle\" && plotCI == \"n\") {\n        symbols(Pos, add = TRUE, inches = FALSE, circles = asp_rescale_factor * \n            0.9 * abs(DAT)^0.5/2, fg = col.border, bg = col.fill)\n    }\n    if (method == \"ellipse\" && plotCI == \"n\") {\n        ell.dat = function(rho, length = 99) {\n            k = seq(0, 2 * pi, length = length)\n            x = cos(k + acos(rho)/2)/2\n            y = cos(k - acos(rho)/2)/2\n            cbind(rbind(x, y), c(NA, NA))\n        }\n        ELL.dat = lapply(DAT, ell.dat)\n        ELL.dat2 = 0.85 * matrix(unlist(ELL.dat), ncol = 2, byrow = TRUE)\n        ELL.dat2 = ELL.dat2 + Pos[rep(1:length(DAT), each = 100), \n            ]\n        polygon(ELL.dat2, border = col.border, col = col.fill)\n    }\n    if (is.null(number.digits)) {\n        number.digits = switch(addCoefasPercent + 1, 2, 0)\n    }\n    stopifnot(number.digits%%1 == 0)\n    stopifnot(number.digits >= 0)\n    if (method == \"number\" && plotCI == \"n\") {\n        x = (DAT - int) * ifelse(addCoefasPercent, 100, 1)/zoom\n        text(Pos[, 1], Pos[, 2], font = number.font, col = col.fill, \n            labels = format(round(x, number.digits), nsmall = number.digits), \n            cex = number.cex)\n    }\n    NA_LABEL_MAX_CHARS = 2\n    if (is.matrix(PosNA) && nrow(PosNA) > 0) {\n        stopifnot(is.matrix(PosNA))\n        if (na.label == \"square\") {\n            symbols(PosNA, add = TRUE, inches = FALSE, squares = rep(1, \n                nrow(PosNA)), bg = na.label.col, fg = na.label.col)\n        }\n        else if (nchar(na.label) %in% 1:NA_LABEL_MAX_CHARS) {\n            symbols(PosNA, add = TRUE, inches = FALSE, squares = rep(1, \n                nrow(PosNA)), fg = bg, bg = bg)\n            text(PosNA[, 1], PosNA[, 2], font = number.font, \n                col = na.label.col, labels = na.label, cex = number.cex, \n                ...)\n        }\n        else {\n            stop(paste(\"Maximum number of characters for NA label is:\", \n                NA_LABEL_MAX_CHARS))\n        }\n    }\n    if (method == \"pie\" && plotCI == \"n\") {\n        symbols(Pos, add = TRUE, inches = FALSE, circles = rep(0.5, \n            len.DAT) * 0.85, fg = col.border)\n        pie.dat = function(theta, length = 100) {\n            k = seq(pi/2, pi/2 - theta, length = 0.5 * length * \n                abs(theta)/pi)\n            x = c(0, cos(k)/2, 0)\n            y = c(0, sin(k)/2, 0)\n            cbind(rbind(x, y), c(NA, NA))\n        }\n        PIE.dat = lapply(DAT * 2 * pi, pie.dat)\n        len.pie = unlist(lapply(PIE.dat, length))/2\n        PIE.dat2 = 0.85 * matrix(unlist(PIE.dat), ncol = 2, byrow = TRUE)\n        PIE.dat2 = PIE.dat2 + Pos[rep(1:length(DAT), len.pie), \n            ]\n        polygon(PIE.dat2, border = \"black\", col = col.fill)\n    }\n    if (method == \"shade\" && plotCI == \"n\") {\n        symbols(Pos, add = TRUE, inches = FALSE, squares = rep(1, \n            len.DAT), bg = col.fill, fg = addgrid.col)\n        shade.dat = function(w) {\n            x = w[1]\n            y = w[2]\n            rho = w[3]\n            x1 = x - 0.5\n            x2 = x + 0.5\n            y1 = y - 0.5\n            y2 = y + 0.5\n            dat = NA\n            if ((addshade == \"positive\" || addshade == \"all\") && \n                rho > 0) {\n                dat = cbind(c(x1, x1, x), c(y, y1, y1), c(x, \n                  x2, x2), c(y2, y2, y))\n            }\n            if ((addshade == \"negative\" || addshade == \"all\") && \n                rho < 0) {\n                dat = cbind(c(x1, x1, x), c(y, y2, y2), c(x, \n                  x2, x2), c(y1, y1, y))\n            }\n            return(t(dat))\n        }\n        pos_corr = rbind(cbind(Pos, DAT))\n        pos_corr2 = split(pos_corr, 1:nrow(pos_corr))\n        SHADE.dat = matrix(na.omit(unlist(lapply(pos_corr2, shade.dat))), \n            byrow = TRUE, ncol = 4)\n        segments(SHADE.dat[, 1], SHADE.dat[, 2], SHADE.dat[, \n            3], SHADE.dat[, 4], col = shade.col, lwd = shade.lwd)\n    }\n    if (method == \"square\" && plotCI == \"n\") {\n        draw_method_square(Pos, DAT, asp_rescale_factor, col.border, \n            col.fill)\n    }\n    if (method == \"color\" && plotCI == \"n\") {\n        draw_method_color(Pos, col.border, col.fill)\n    }\n    draw_grid(AllCoords, addgrid.col)\n    if (plotCI != \"n\") {\n        if (is.null(lowCI.mat) || is.null(uppCI.mat)) {\n            stop(\"Need lowCI.mat and uppCI.mat!\")\n        }\n        if (order != \"original\") {\n            lowCI.mat = lowCI.mat[ord, ord]\n            uppCI.mat = uppCI.mat[ord, ord]\n        }\n        pos.lowNew = getPos.Dat(lowCI.mat)[[1]]\n        lowNew = getPos.Dat(lowCI.mat)[[2]]\n        pos.uppNew = getPos.Dat(uppCI.mat)[[1]]\n        uppNew = getPos.Dat(uppCI.mat)[[2]]\n        k1 = (abs(uppNew) > abs(lowNew))\n        bigabs = uppNew\n        bigabs[which(!k1)] = lowNew[!k1]\n        smallabs = lowNew\n        smallabs[which(!k1)] = uppNew[!k1]\n        sig = sign(uppNew * lowNew)\n        color_bigabs = col[ceiling((bigabs + 1) * length(col)/2)]\n        color_smallabs = col[ceiling((smallabs + 1) * length(col)/2)]\n        if (plotCI == \"circle\") {\n            symbols(pos.uppNew[, 1], pos.uppNew[, 2], add = TRUE, \n                inches = FALSE, circles = 0.95 * abs(bigabs)^0.5/2, \n                bg = ifelse(sig > 0, col.fill, color_bigabs), \n                fg = ifelse(sig > 0, col.fill, color_bigabs))\n            symbols(pos.lowNew[, 1], pos.lowNew[, 2], add = TRUE, \n                inches = FALSE, circles = 0.95 * abs(smallabs)^0.5/2, \n                bg = ifelse(sig > 0, bg, color_smallabs), fg = ifelse(sig > \n                  0, col.fill, color_smallabs))\n        }\n        if (plotCI == \"square\") {\n            symbols(pos.uppNew[, 1], pos.uppNew[, 2], add = TRUE, \n                inches = FALSE, squares = abs(bigabs)^0.5, bg = ifelse(sig > \n                  0, col.fill, color_bigabs), fg = ifelse(sig > \n                  0, col.fill, color_bigabs))\n            symbols(pos.lowNew[, 1], pos.lowNew[, 2], add = TRUE, \n                inches = FALSE, squares = abs(smallabs)^0.5, \n                bg = ifelse(sig > 0, bg, color_smallabs), fg = ifelse(sig > \n                  0, col.fill, color_smallabs))\n        }\n        if (plotCI == \"rect\") {\n            rect.width = 0.25\n            rect(pos.uppNew[, 1] - rect.width, pos.uppNew[, 2] + \n                smallabs/2, pos.uppNew[, 1] + rect.width, pos.uppNew[, \n                2] + bigabs/2, col = col.fill, border = col.fill)\n            segments(pos.lowNew[, 1] - rect.width, pos.lowNew[, \n                2] + DAT/2, pos.lowNew[, 1] + rect.width, pos.lowNew[, \n                2] + DAT/2, col = \"black\", lwd = 1)\n            segments(pos.uppNew[, 1] - rect.width, pos.uppNew[, \n                2] + uppNew/2, pos.uppNew[, 1] + rect.width, \n                pos.uppNew[, 2] + uppNew/2, col = \"black\", lwd = 1)\n            segments(pos.lowNew[, 1] - rect.width, pos.lowNew[, \n                2] + lowNew/2, pos.lowNew[, 1] + rect.width, \n                pos.lowNew[, 2] + lowNew/2, col = \"black\", lwd = 1)\n            segments(pos.lowNew[, 1] - 0.5, pos.lowNew[, 2], \n                pos.lowNew[, 1] + 0.5, pos.lowNew[, 2], col = \"grey70\", \n                lty = 3)\n        }\n    }\n    if (!is.null(addCoef.col) && method != \"number\") {\n        text(Pos[, 1], Pos[, 2], col = addCoef.col, labels = round((DAT - \n            int) * ifelse(addCoefasPercent, 100, 1)/zoom, number.digits), \n            cex = number.cex, font = number.font)\n    }\n    if (!is.null(p.mat) && insig != \"n\") {\n        if (order != \"original\") {\n            p.mat = p.mat[ord, ord]\n        }\n        if (!is.null(rownames(p.mat)) | !is.null(rownames(p.mat))) {\n            if (!all(colnames(p.mat) == colnames(corr)) | !all(rownames(p.mat) == \n                rownames(corr))) {\n                warning(\"p.mat and corr may be not paired, their rownames and colnames are not totally same!\")\n            }\n        }\n        pos.pNew = getPos.Dat(p.mat)[[1]]\n        pNew = getPos.Dat(p.mat)[[2]]\n        if (insig == \"label_sig\") {\n            if (!is.character(pch)) \n                pch = \"*\"\n            place_points = function(sig.locs, point) {\n                text(pos.pNew[, 1][sig.locs], pos.pNew[, 2][sig.locs], \n                  labels = point, col = pch.col, cex = pch.cex, \n                  lwd = 2)\n            }\n            if (length(sig.level) == 1) {\n                place_points(sig.locs = which(pNew < sig.level), \n                  point = pch)\n            }\n            else {\n                l = length(sig.level)\n                for (i in seq_along(sig.level)) {\n                  iter = l + 1 - i\n                  pchTmp = paste(rep(pch, i), collapse = \"\")\n                  if (i == length(sig.level)) {\n                    locs = which(pNew < sig.level[iter])\n                    if (length(locs)) {\n                      place_points(sig.locs = locs, point = pchTmp)\n                    }\n                  }\n                  else {\n                    locs = which(pNew < sig.level[iter] & pNew > \n                      sig.level[iter - 1])\n                    if (length(locs)) {\n                      place_points(sig.locs = locs, point = pchTmp)\n                    }\n                  }\n                }\n            }\n        }\n        else {\n            ind.p = which(pNew > sig.level)\n            p_inSig = length(ind.p) > 0\n            if (insig == \"pch\" && p_inSig) {\n                points(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p], \n                  pch = pch, col = pch.col, cex = pch.cex, lwd = 2)\n            }\n            if (insig == \"p-value\" && p_inSig) {\n                text(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p], \n                  round(pNew[ind.p], number.digits), col = pch.col)\n            }\n            if (insig == \"blank\" && p_inSig) {\n                symbols(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p], \n                  inches = FALSE, squares = rep(1, length(pos.pNew[, \n                    1][ind.p])), fg = addgrid.col, bg = bg, add = TRUE)\n            }\n        }\n    }\n    if (cl.pos != \"n\") {\n        colRange = assign.color(dat = col.lim2)\n        ind1 = which(col == colRange[1])\n        ind2 = which(col == colRange[2])\n        colbar = col[ind1:ind2]\n        if (is.null(cl.length)) {\n            cl.length = ifelse(length(colbar) > 20, 11, length(colbar) + \n                1)\n        }\n        labels = seq(col.lim[1], col.lim[2], length = cl.length)\n        if (cl.pos == \"r\") {\n            vertical = TRUE\n            xlim = c(m2 + 0.5 + mm * 0.02, m2 + 0.5 + mm * cl.ratio)\n            ylim = c(n1 - 0.5, n2 + 0.5)\n        }\n        if (cl.pos == \"b\") {\n            vertical = FALSE\n            xlim = c(m1 - 0.5, m2 + 0.5)\n            ylim = c(n1 - 0.5 - nn * cl.ratio, n1 - 0.5 - nn * \n                0.02)\n        }\n        colorlegend(colbar = colbar, labels = round(labels, 2), \n            offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex, \n            xlim = xlim, ylim = ylim, vertical = vertical, align = cl.align.text)\n    }\n    if (tl.pos != \"n\") {\n        pos.xlabel = cbind(m1:m2, n2 + 0.5 + laboffset)\n        pos.ylabel = cbind(m1 - 0.5, n2:n1)\n        if (tl.pos == \"td\") {\n            if (type != \"upper\") {\n                stop(\"type should be 'upper' if tl.pos is 'dt'.\")\n            }\n            pos.ylabel = cbind(m1:(m1 + nn) - 0.5, n2:n1)\n        }\n        if (tl.pos == \"ld\") {\n            if (type != \"lower\") {\n                stop(\"type should be 'lower' if tl.pos is 'ld'.\")\n            }\n            pos.xlabel = cbind(m1:m2, n2:(n2 - mm) + 0.5 + laboffset)\n        }\n        if (tl.pos == \"d\") {\n            pos.ylabel = cbind(m1:(m1 + nn) - 0.5, n2:n1)\n            pos.ylabel = pos.ylabel[1:min(n, m), ]\n            symbols(pos.ylabel[, 1] + 0.5, pos.ylabel[, 2], add = TRUE, \n                bg = bg, fg = addgrid.col, inches = FALSE, squares = rep(1, \n                  length(pos.ylabel[, 1])))\n            text(pos.ylabel[, 1] + 0.5, pos.ylabel[, 2], newcolnames[1:min(n, \n                m)], col = tl.col, cex = tl.cex, ...)\n        }\n        else {\n            if (tl.pos != \"l\") {\n                text(pos.xlabel[, 1], pos.xlabel[, 2], newcolnames, \n                  srt = tl.srt, adj = ifelse(tl.srt == 0, c(0.5, \n                    0), c(0, 0)), col = tl.col, cex = tl.cex, \n                  offset = tl.offset, ...)\n            }\n            text(pos.ylabel[, 1], pos.ylabel[, 2], newrownames, \n                col = tl.col, cex = tl.cex, pos = 2, offset = tl.offset, \n                ...)\n        }\n    }\n    title(title, ...)\n    if (type == \"full\" && plotCI == \"n\" && !is.null(addgrid.col)) {\n        rect(m1 - 0.5, n1 - 0.5, m2 + 0.5, n2 + 0.5, border = addgrid.col)\n    }\n    if (!is.null(addrect) && order == \"hclust\" && type == \"full\") {\n        corrRect.hclust(corr, k = addrect, method = hclust.method, \n            col = rect.col, lwd = rect.lwd)\n    }\n    corrPos = data.frame(PosName, Pos, DAT)\n    colnames(corrPos) = c(\"xName\", \"yName\", \"x\", \"y\", \"corr\")\n    if (!is.null(p.mat)) {\n        corrPos = cbind(corrPos, pNew)\n        colnames(corrPos)[6] = c(\"p.value\")\n    }\n    corrPos = corrPos[order(corrPos[, 3], -corrPos[, 4]), ]\n    rownames(corrPos) = NULL\n    res = list(corr = corr, corrPos = corrPos, arg = list(type = type))\n    invisible(res)\n}\n<bytecode: 0x7f7cacdfea90>\n<environment: namespace:corrplot>\n\n\n\n\n4 Retrieving Stored Data\n\n\n\n\nprice_mlr <- lm(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + WITHIN_350M_CHILDCARE + PROX_ELDERLYCARE +\n               PROX_HAWKER + WITHIN_350M_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + WITHIN_1KM_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_BUS,\n                data=train_data)\n\n^note difference between hands on 8/9 and this: mlr is loading the training data instead of whole dataset\n\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\nbw.adaptive methods : same as hands on 8 but only difference is loading the training data\n\n\n5 Preparing Coordinates Data\nfor using package ranger - fast implementation of random forest https://cran.r-project.org/web/packages/ranger/index.html\n\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\n\ncoords_train <- write_rds(coords_train, \"data/model/coords_train.rds\")\ncoords_test <- write_rds(coords_test, \"data/model/coords_test.rds\")\n\n\n\n6 Dropping Geometry Columns\n\ntrain_data <- train_data %>% st_drop_geometry()\n\n\n\n7 Calibrating Random Forest\n(using base ranger)\n\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + WITHIN_350M_CHILDCARE + PROX_ELDERLYCARE +\n               PROX_HAWKER + WITHIN_350M_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + WITHIN_1KM_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_BUS,\n                data=train_data)\n\n\nrf\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + WITHIN_350M_CHILDCARE + PROX_ELDERLYCARE + PROX_HAWKER +      WITHIN_350M_KINDERGARTEN + PROX_MRT + PROX_PARK + WITHIN_1KM_PRISCH +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_BUS, data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       726909657 \nR squared (OOB):                  0.94969 \n\n\nrf results: - OOB prediction error MSE = mean square error which is a squared value (need to square root before using this value) - lm model residuals are already square rooted - target node size: 5 subsets of original data\n\n\n8 Calibrating random forest - adaptive\n\nshould not take more than 10min to run\nre-running of this code without clearing environment will increase computational time\nneed to free away unused memory\n\n\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~  floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + WITHIN_350M_CHILDCARE + PROX_ELDERLYCARE +\n               PROX_HAWKER + WITHIN_350M_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + WITHIN_1KM_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_BUS,\n               dframe=train_data,\n               bw = 55,\n               kernel = \"adaptive\",\n               coords=coords_train)\n\n\nAIC and AICc should be quite close in value if there is no bias in the data\ndetermining the bandwidth\n\nusing from geographically weighted method\nor using grf.bw (https://cran.r-project.org/web/packages/SpatialML/SpatialML.pdf)\n\nfinding out which models are contributing most, type on console> gwRF_adaptive\\(Global.Model\\)variable.importance\ndisplay var importance as a dataframe, type on console or code chunk> vi_df <- as.data.frame(gwRF_adaptive\\(Global.Model\\)variable.importance)\n\n\n\n9 Predicting using Test Data\n\ntest_data <- cbind(test_data, coords_test) %>% st_drop_geometry()\n\n\ncombine back the coordinate data with the test data and drop geometry column from test data\n\n\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                         test_data,\n                         x.var.name=\"X\",\n                         y.var.name=\"Y\",\n                         local.w= 1,\n                         global.w=0)\n\n\nthis code will take time to run\nlocal.w = 1 means calibrate the local version\noutput is a vector\n\n\n\n\n\nusing ggplot to plot the predict_grf output; see the fit of the model\ncompare random forest and lm (least square model) output"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex09/data/geospatial/MPSZ-2019.html",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "",
    "text": "Note\n\n\n\ndisclaimer: absent on week 7, prof’s code below"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#installing-and-loading-the-r-packages",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#installing-and-loading-the-r-packages",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "1.1 Installing and Loading the R Packages",
    "text": "1.1 Installing and Loading the R Packages\nAs usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, and tidyverse.\n\n\npacman::p_load(sf, sfdep, spdep, tmap, plotly, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#importing-geospatial-data",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "2.1 Importing geospatial data",
    "text": "2.1 Importing geospatial data\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R.\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex07/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\n\nDo it Yourself\n\n\n\nUsing the steps you learned in previous lesson, examine the content hunan sf data.frame"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#importing-attribute-table",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#importing-attribute-table",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "2.2 Importing attribute table",
    "text": "2.2 Importing attribute table\nIn the code chunk below, read_csv() of readr is used to import Hunan_GDPPC.csv into R.\n\n\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\n\n\n\n\n\nDo it Yourself\n\n\n\nUsing the steps you learned in previous lesson, examine the content the GDPPC tibble data.frame."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-gi",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-gi",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "3.1 Computing Gi*",
    "text": "3.1 Computing Gi*\nNext, we will compute the local Gi* statistics.\n\n3.1.1 Deriving the spatial weights\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\n\nGDPPC_nb <- GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nactivate() of dplyr package is used to activate the geometry context\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\nrow order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\n\n\nNote that this dataset now has neighbors and weights for each time-slice.\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  <dbl> <chr>   <dbl> <list>    <list>   \n1  2005 Anxiang  8184 <int [6]> <dbl [6]>\n2  2005 Hanshou  6560 <int [6]> <dbl [6]>\n3  2005 Jinshi   9956 <int [5]> <dbl [5]>\n4  2005 Li       8394 <int [5]> <dbl [5]>\n5  2005 Linli    8850 <int [5]> <dbl [5]>\n6  2005 Shimen   9244 <int [6]> <dbl [6]>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-gi-1",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-gi-1",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "3.2 Computing Gi*",
    "text": "3.2 Computing Gi*\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\n\ngi_stars <- GDPPC_nb %>% \n  group_by(Year) %>% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %>%  \n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "4.1 Arrange to show significant emerging hot/cold spots",
    "text": "4.1 Arrange to show significant emerging hot/cold spots\n\n\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#performing-emerging-hotspot-analysis",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#performing-emerging-hotspot-analysis",
    "title": "In-class Exercise 7: Emerging Hot Spot Analysis (sfdep)",
    "section": "4.2 Performing Emerging Hotspot Analysis",
    "text": "4.2 Performing Emerging Hotspot Analysis\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\n\nehsa <- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)\n\n\n\n4.2.1 Visualising the distribution of EHSA classes\nIn the code chunk below, ggplot2 functions ised used to reveal the distribution of EHSA classes as a bar chart.\n\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\nFigure above shows that sporadic cold spots class has the high numbers of county.\n\n\n4.2.2 Visualising EHSA\nIn this section, you will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\nBELOW 2 CODE BLOCKS GIVING ERROR - CANNOT FIND FUNCTION JOIN_BY\n\n::: {style=“font-size: 1.2em”}\n\nhunan_ehsa <- hunan %>% left_join(ehsa, by = join_by(County == location))\n:::\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig <- hunan_ehsa %>% filter(p_value < 0.05) tmap_mode(“plot”) tm_shape(hunan_ehsa) + tm_polygons() + tm_borders(alpha = 0.5) + tm_shape(ehsa_sig) + tm_fill(“classification”) + tm_borders(alpha = 0.4) ```"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#geospatial-data",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#geospatial-data",
    "title": "In-class Exercise 6: Spatial Weights and Applications using sfdep",
    "section": "3.1 Geospatial data",
    "text": "3.1 Geospatial data\n\nhunan <- st_read(dsn=\"data/geospatial\",\n                     layer=\"Hunan\") %>% st_transform(crs=4480)\n\nReading layer `Hunan' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex06/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#aspatial-data",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#aspatial-data",
    "title": "In-class Exercise 6: Spatial Weights and Applications using sfdep",
    "section": "3.2 Aspatial data",
    "text": "3.2 Aspatial data\n\npop2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nhead( list(pop2012), n=10)\n\n[[1]]\n# A tibble: 88 × 29\n   County    City   avg_wage deposite    FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO\n   <chr>     <chr>     <dbl>    <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl>\n 1 Anhua     Yiyang    30544   10967   6832.    457.   2703  13225  14567  9277.\n 2 Anren     Chenz…    28058    4599.  6386.    221.   1455.  4941. 12761  4189.\n 3 Anxiang   Chang…    31935    5517.  3541     244.   1780. 12482  23667  5109.\n 4 Baojing   Hunan…    30843    2250   1005.    193.   1379.  4088. 14563  3624.\n 5 Chaling   Zhuzh…    31251    8241.  6508.    620.   1947  11585  20078  9158.\n 6 Changning Hengy…    28518   10860   7920     770.   2632. 19886  24418 37392 \n 7 Changsha  Chang…    54540   24332  33624    5350    7886. 88009  88656 51361 \n 8 Chengbu   Shaoy…    28597    2581.  1922.    161.   1192.  2570. 10132  1681.\n 9 Chenxi    Huaih…    33580    4990   5818.    460.   1724.  7755. 17026  6644.\n10 Cili      Zhang…    33099    8117.  4498.    500.   2306. 11378  18714  5843.\n# ℹ 78 more rows\n# ℹ 19 more variables: Loan <dbl>, NIPCR <dbl>, Bed <dbl>, Emp <dbl>,\n#   EmpR <dbl>, EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#queen-method",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#queen-method",
    "title": "In-class Exercise 6: Spatial Weights and Applications using sfdep",
    "section": "6.1 Queen method",
    "text": "6.1 Queen method\n\n\n\n\n\n\nNote\n\n\n\n.before = 1 places the newly created field in the first column of hunan_join dataframe.\n\n\n\ncn_queen <- hunan_join %>% mutate(nb= st_contiguity(geometry), .before=1)\n\n\nthe generated output cn_queen ’s nb column shows the nearest neighbours that are referenced by the index\nie: the first data point Anxiang county has the following nearest neighbours: c(2,3,57,85) which refers to Hanshou, Jinshi, Li, Nan and Taoyuan."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#rook-method",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#rook-method",
    "title": "In-class Exercise 6: Spatial Weights and Applications using sfdep",
    "section": "6.2 Rook method",
    "text": "6.2 Rook method\n\ncn_rook <- hunan_join %>% mutate(nb= st_contiguity(geometry), queen=FALSE, .before=1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#queen-method-1",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#queen-method-1",
    "title": "In-class Exercise 6: Spatial Weights and Applications using sfdep",
    "section": "7.1 Queen method",
    "text": "7.1 Queen method\n\nwm_q <- hunan_join %>% \n  mutate(nb= st_contiguity(geometry), \n         wt = st_weights(nb),\n         .before=1)\n\n\nthis code chunk allow the running of nearest neighbour using queen method and calculation of the weights\ngenerated output will include both the nearest neighbours and weights in the same dataframe"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#rook-method-1",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#rook-method-1",
    "title": "In-class Exercise 6: Spatial Weights and Applications using sfdep",
    "section": "7.2 Rook method",
    "text": "7.2 Rook method\n\nwm_r <- hunan_join %>% \n  mutate(nb= st_contiguity(geometry),\n         queen= FALSE,\n         wt = st_weights(nb),\n         .before=1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "title": "In-class Exercise 8: Building Hedonic Pricing Model with GWR",
    "section": "",
    "text": "Data used are\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#import-geospatial-data",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#import-geospatial-data",
    "title": "In-class Exercise 8: Building Hedonic Pricing Model with GWR",
    "section": "3.1 Import Geospatial Data",
    "text": "3.1 Import Geospatial Data\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/annatrw/annatrw/IS415MAC/In-class_Ex/In-class_Ex08/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#update-crs",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#update-crs",
    "title": "In-class Exercise 8: Building Hedonic Pricing Model with GWR",
    "section": "3.2 Update CRS",
    "text": "3.2 Update CRS\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\nVerify transformed layer\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nReveal extent of mpsz_svy21 layer\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\ndate field (if it is actual date) will be treated as continuous data causing trouble on spacetime cube good to always view the data and look what it is consisting of"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#import-aspatial-data",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#import-aspatial-data",
    "title": "In-class Exercise 8: Building Hedonic Pricing Model with GWR",
    "section": "4.1 Import Aspatial Data",
    "text": "4.1 Import Aspatial Data\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "index.html#geographical-information-system-gis",
    "href": "index.html#geographical-information-system-gis",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "1.1 Geographical Information System (GIS)",
    "text": "1.1 Geographical Information System (GIS)\nGIS is a toolkit for creating, managing, analysing,visualising, and sharing data of any kind according to where it's located. GIS can show various types of data including streets, buildings, and vegetation. This enables people to more easily see, analyze, and understand patterns and relationships."
  },
  {
    "objectID": "index.html#geospatial-analysis",
    "href": "index.html#geospatial-analysis",
    "title": "IS415: Geospatial Analytics & Applications",
    "section": "1.2 Geospatial Analysis",
    "text": "1.2 Geospatial Analysis\nGeospatial Analytics is more than just GIS, mapping, or data visualisation. It enables insights not found in statistical maps to be uncovered, revealing the untapped property of spatial contiguity in geographical knowledge discovery, and enabling the modelling of spatial interactions. It provides decision makers and planners with data- driven information for better problem solving and efficient use of resources.\nIt’s motivation lies in the following areas:\n\nBig data from 80% of organisations globally consists of a location component. Geographical data is powerful in sectors like business analytics, e-commerce, trade and more.\nSingapore’s push towards a Smart Nation will see initiatives allowing access to maps, building up geospatial databases by contributing information such as animal sightings, traffic incidents or the best mee pok eateries.\nSingapore’s Geospatial Masterplan is an initative by Singapore Land Authority (SLA) and the Government Technology Agency (GovTech) that aims to build a geospatial-powered Singapore to maximise the impact of geospatial information and technology for the economy and wider society."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on Exercise 10: Spatial Interaction Models",
    "section": "",
    "text": "Please refer to In-class exercise 10"
  }
]